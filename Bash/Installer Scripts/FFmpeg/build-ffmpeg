#!/usr/bin/env bash
# shellcheck disable=SC1091,SC2000,SC2034,SC2046,SC2066,SC2068,SC2086,SC2162,SC2317

############################################################################################
##
##  GitHub: https://github.com/slyfox1186/script-repo
##
##  Supported Distro:
##
##    - Ubuntu 18.04 | 20.04 | 22.04
##    - Debian 10 | 11 | 12
##
##  Supported architecture:
##
##    - x86_64
##
##  Purpose:
##
##    - Build FFmpeg from source code with addon development libraries also compiled from
##    - source to ensure the latest extra functionality
##
##  GeForce CUDA:
##
##  Updated: Version to 12.2.1
##
##    - If the cuda libraries are not installed (for Geforce graphics cards only) the user
##    - will be prompted by the script to install them so that hardware acceleration is
##    - enabled when compiling FFmpeg
##
##  Last Update: 08.16.23
##
##  Added: Debian OS Support for Bookworm (12)
##  Added: cyanrip
##  Added: vapoursynth
##  Added: cunit support library for libmysofa
##  Added: libcurl support library for cyanrip
##
##  Updated: the CUDA SDK Toolkit to version 12.2.0
##
##  Script version: v2.3
##
############################################################################################

#
# DEFINE GLOBAL VARIABLES
#

script_name="${0:2}"
script_ver=2.3
ffmpeg_ver=5.1.3
cuda_ver=12.2.1
cwd="$PWD"/ffmpeg-build-script
packages="$cwd"/packages
workspace="$cwd"/workspace
install_prefix=/usr/local
CFLAGS="-I$workspace/include -I/usr/local/include -I/usr/include -I/usr/include/x86_64-linux-gnu -I/usr/include/SDL2"
CFLAGS+=' -g -O2 -flto -ffunction-sections -fdata-sections -pipe -march=native'
CXXFLAGS='-g -O2 -flto -ffunction-sections -fdata-sections -pipe -march=native'
LDFLAGS="-L$workspace/lib64 -L$workspace/lib -L$workspace/lib/x86_64-linux-gnu -L/usr/local/lib64 -L/usr/local/lib -L/usr/local/cuda/nvvm/lib64"
LDFLAGS+=' -L/usr/local/cuda/targets/x86_64-linux/lib -L/usr/lib64 -L/usr/lib -L/usr/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -L/lib64 -L/lib'
CPPFLAGS="-I$workspace/include -I/usr/local/include -I/usr/include"
LDEXEFLAGS=
EXTRALIBS='-ldl -lpthread -lm -lz'
ffmpeg_libraries=()
latest=false
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36'
repo=https://github.com/slyfox1186/script-repo
debug=OFF # CHANGE THE DEBUG VARIABLE TO "ON" FOR HELP TROUBLESHOOTING ISSUES

#
# CREATE THE OUTPUT DIRECTORIES
#

mkdir -p "$packages" "$workspace"

#
# SET THE AVAILABLE CPU THREAD AND CORE COUNT FOR PARALLEL PROCESSING (SPEEDS UP THE BUILD PROCESS)
#

if [ -f /proc/cpuinfo ]; then
    cpu_threads="$(grep -c ^processor /proc/cpuinfo)"
else
    cpu_threads="$(nproc --all)"
fi

#
# DEFINE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n\n" \
        'Make sure to star this repository to show your support!' \
        "$repo"
    exit 0
}

fail_fn()
{
    printf "\n%s\n\n%s\n\n" \
        "$1" \
        "To report a bug create an issue at: $repo/issues"
    exit 1
}

cleanup_fn()
{
    local answer

    printf "\n%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' answer

    case "$answer" in
        1)      sudo rm -fr "$cwd" "$script_name";;
        2)      echo;;
        *)
                printf "\n%s\n\n" 'Bad user input.'
                read -p 'Press enter to try again.'
                echo
                cleanup_fn
                ;;
    esac
}

ff_ver_fn()
{
    printf "%s\n%s\n%s\n\n" \
        '============================================' \
        '               FFmpeg Version               ' \
        '============================================'
    ffmpeg -version
}

download()
{
    dl_path="$packages"
    dl_url="$1"
    dl_file="${2:-"${1##*/}"}"

    if [[ "$dl_file" =~ tar. ]]; then
        output_dir="${dl_file%.*}"
        output_dir="${3:-"${output_dir%.*}"}"
    else
        output_dir="${3:-"${dl_file%.*}"}"
    fi

    target_file="$dl_path/$dl_file"
    target_dir="$dl_path/$output_dir"

    if [ -f "$target_file" ]; then
        echo "The file \"$dl_file\" is already downloaded."
    else
        echo "Downloading \"$dl_url\" saving as \"$dl_file\""
        if ! curl -A "$user_agent" -Lso "$target_file" "$dl_url"; then
            printf "\n%s\n\n" "The script failed to download \"$dl_file\" and will try again in 10 seconds..."
            sleep 10
            if ! curl -A "$user_agent" -Lso "$target_file" "$dl_url"; then
                fail_fn "The script failed to download \"$dl_file\" twice and will now exit."
            fi
        fi
        echo 'Download Completed'
    fi

    if [ -d "$target_dir" ]; then
        sudo rm -fr "$target_dir"
    fi

    mkdir -p "$target_dir"

    if [ -n "$3" ]; then
        if ! tar -xf "$target_file" -C "$target_dir" 2>/dev/null >/dev/null; then
            sudo rm "$target_file"
            fail_fn "The script failed to extract \"$dl_file\" so it was deleted. Please re-run the script."
        fi
    else
        if ! tar -xf "$target_file" -C "$target_dir" --strip-components 1 2>/dev/null >/dev/null; then
            sudo rm "$target_file"
            fail_fn "The script failed to extract \"$dl_file\" so it was deleted. Please re-run the script."
        fi
    fi

    printf "%s\n\n" "File extracted: $dl_file"

    cd "$target_dir" || fail_fn "Unable to change the working directory to: $target_dir"
}

download_git()
{
    local dl_path dl_url dl_file target_dir

    dl_path="$packages"
    dl_url="$1"
    dl_file="${2:-"${1##*/}"}"
    dl_file="${dl_file//\./-}"
    target_dir="$dl_path/$dl_file"

    if [ -d "$target_dir" ]; then
        sudo rm -fr "$target_dir"
    fi

    echo "Downloading $dl_url as $dl_file"

    if ! git clone -q "$dl_url" "$target_dir"; then
        printf "\n%s\n\n" "The script failed to clone the directory \"$target_dir\" and will try again in 10 seconds..."
        sleep 10
        if ! git clone -q "$dl_url" "$target_dir"; then
            fail_fn "The script failed to clone the directory \"$target_dir\" twice and will now exit the build."
        fi
    else
        printf "%s\n\n" "Successfully cloned: $target_dir"
    fi

    cd "$target_dir" || fail_fn "Unable to change the working directory to: $target_dir"
}

# CREATE TXT FILES TO STORE VERSION NUMBERS TO AVOID UNNECESSARY API CALLS
ver_file_tmp="$workspace"/latest-versions-tmp.txt
ver_file="$workspace"/latest-versions.txt

sed -i -e '/null-/d' -e '/null /d' -e '/-null/d' -e '/-$/d' "$ver_file_tmp" "$ver_file" 2>/dev/null

if [ ! -f "$ver_file_tmp" ] || [ ! -f "$ver_file" ]; then
    touch "$ver_file_tmp" "$ver_file" 2>/dev/null
fi

# PULL THE LATEST VERSIONS OF EACH PACKAGE FROM THE WEBSITE API
curl_timeout=10

git_1_fn()
{
    local curl_cmd github_repo github_url

    # SCRAPE GITHUB WEBSITE FOR THE LATEST REPO VERSION
    github_repo="$1"
    github_url="$2"

    if curl_cmd="$(curl -m "$curl_timeout" -sSL "https://api.github.com/repos/$github_repo/$github_url")"; then
        g_ver="$(echo "$curl_cmd" | jq -r '.[0].name' 2>/dev/null)"
        g_ver1="$(echo "$curl_cmd" | jq -r '.[1].name' 2>/dev/null)"
        g_ver="${g_ver#cares-}"
        g_ver="${g_ver#FAAC }"
        g_ver="${g_ver#lcms}"
        g_ver="${g_ver#OpenJPEG }"
        g_ver="${g_ver#OpenSSL }"
        g_ver="${g_ver#pcre}"
        g_ver="${g_ver#pkgconf-}"
        g_ver="${g_ver#release-}"
        g_ver="${g_ver#Rust }"
        g_ver="${g_ver//-snapshot/}"
        g_ver="${g_ver#ver-}"
        g_ver="${g_ver#v}"
        g_ver1="${g_ver1#nasm-}"
        g_ver1="${g_ver1#v}"
    fi

    echo "${github_repo%/*}-$g_ver" >>"$ver_file_tmp"
    awk '!NF || !seen[$0]++' "$latest_txt_tmp" >"$ver_file"
}

git_2_fn()
{
    repo="$1"
    url="$2"
    if curl_cmd="$(curl -m "$curl_timeout" -sSL "https://code.videolan.org/api/v4/projects/$repo/repository/$url")"; then
        g_ver="$(echo "$curl_cmd" | jq -r '.[0].commit.id')"
        g_sver="$(echo "$curl_cmd" | jq -r '.[0].commit.short_id')"
        g_sver="${g_sver::7}"
        g_ver1="$(echo "$curl_cmd" | jq -r '.[0].name')"
        g_ver1="${g_ver1#v}"
    fi
}

git_3_fn()
{
    repo="$1"
    url="$2"
    if curl_cmd="$(curl -m "$curl_timeout" -sSL "https://gitlab.com/api/v4/projects/$repo/repository/$url")"; then
        g_ver="$(echo "$curl_cmd" | jq -r '.[0].name')"
        g_ver="${g_ver#v}"
        g_ver1="$(echo "$curl_cmd" | jq -r '.[0].commit.id')"
        g_ver1="${g_ver1#v}"
        g_sver1="$(echo "$curl_cmd" | jq -r '.[0].commit.short_id')"
        g_ver="${g_ver#VTM-}"
    fi
}

git_4_fn()
{
    repo="$1"
    if curl_cmd="$(curl -m "$curl_timeout" -sSL "https://gitlab.freedesktop.org/api/v4/projects/$repo/repository/tags")"; then
        g_ver="$(echo "$curl_cmd" | jq -r '.[0].name')"
        g_ver="${g_ver#pkg-config-}"
        g_ver="${g_ver#VER-}"
    fi
}

git_5_fn()
{
    repo="$1"
    if curl_cmd="$(curl -m "$curl_timeout" -sSL 'https://bitbucket.org/!api/2.0/repositories/multicoreware/x265_git/effective-branching-model')"; then
        g_sver="$(echo "$curl_cmd" | jq '.development.branch.target' | grep -Eo '[0-9a-z][0-9a-z]+' | sort | head -n 1)"
        g_ver="${g_sver::7}"
    fi
}

git_6_fn()
{
    repo="$1"
    if curl_cmd="$(curl -m "$curl_timeout" -sSL "https://gitlab.gnome.org/api/v4/projects/$repo/repository/tags")"; then
        g_ver="$(echo "$curl_cmd" | jq -r '.[0].name')"
        g_ver="${g_ver#v}"
    fi
}

git_7_fn()
{
    repo="$1"
    if curl_cmd="$(curl -m "$curl_timeout" -sSL "https://git.archive.org/api/v4/projects/$repo/repository/tags")"; then
        g_ver="$(echo "$curl_cmd" | jq -r '.[0].name')"
        g_ver="${g_ver#v}"
    fi
}

git_8_fn()
{
    repo="$1"
    if curl_cmd="$(curl -m "$curl_timeout" -sSL "https://gitlab.kitware.com/api/v4/projects/$repo/repository/tags")"; then
        g_ver="$(echo "$curl_cmd" | jq -r '.[0].name')"
        g_ver="${g_ver#v}"
    fi
}

git_ver_fn()
{
    local url u_flag v_flag v_url v_url

    v_url="$1"
    v_url="$2"

    if [ -n "$3" ]; then
        case "$3" in
                B)      url=branches;;
                R)      url=releases;;
                T)      url=urls;;
                *)      fail_fn 'Could not detect the variable "url" in the function "git_ver_fn"';;
        esac
    fi
    
    case "$v_url" in
            1)      u_flag=git_1_fn;;
            2)      u_flag=git_2_fn;;
            3)      u_flag=git_3_fn;;
            4)      u_flag=git_4_fn;;
            5)      u_flag=git_5_fn;;
            6)      u_flag=git_6_fn;;
            7)      u_flag=git_7_fn;;
            8)      u_flag=git_8_fn;;
            *)      fail_fn 'Could not detect the variable "v_url" in the function "git_ver_fn"';;
    esac

    "$u_flag" "$v_url" "$url" 2>/dev/null
}

check_version()
{
    github_repo="$1"
    latest_txt_tmp="$ver_file_tmp"
    latest_txt="$ver_file"

    awk '!NF || !seen[$0]++' "$latest_txt_tmp" > "$latest_txt"
    check_ver="$(grep -Eo "${github_repo#*/}-[0-9\.]+$" "$latest_txt" | sort | head -n1)"

    if [ -n "$check_ver" ]; then
        g_nocheck=0
    else
        g_nocheck=1
    fi
}

pre_check_ver()
{
    github_repo="$1"
    git_ver="$2"
    git_url_type="$3"

    check_version "$github_repo"
    if [ "$g_nocheck" -eq '1' ]; then
        git_ver_fn "$github_repo" "$git_ver" "$git_url_type"
        g_ver="${g_ver##-*}"
        g_ver2="${g_ver2##-*}"
    else
        g_ver="${check_ver#*-}"
    fi
}

execute()
{
    echo "$ $*"

    if [ "$debug" = 'ON' ]; then
        if ! output=$("$@"); then
            notify-send -t 5000 "Failed to execute: $*"
            fail_fn "Failed to execute: $*"
        fi
    else
        if ! output=$("$@" 2>&1); then
            notify-send -t 5000 "Failed to execute: $*"
            fail_fn "Failed to execute: $*"
        fi
    fi
}

build()
{
    printf "\n%s\n%s\n" \
        "building $1 - version $2" \
        '===================================='

    if [ -f "$packages/$1.done" ]; then
        if grep -Fx "$2" "$packages/$1.done" >/dev/null; then
            echo "$1 version $2 already built. Remove $packages/$1.done lockfile to rebuild it."
            return 1
        elif $latest; then
            echo "$1 is outdated and will be rebuilt using version $2"
            return 0
        else
            echo "$1 is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove $packages/$1.done lockfile."
            return 1
        fi
    fi
    return 0
}

library_exists()
{

    if ! [[ -x "$(pkg-config --exists --print-errors "$1" 2>&1 >/dev/null)" ]]; then
        return 1
    fi
    return 0
}

build_done() { echo "$2" > "$packages/$1.done"; }

installed() { return $(dpkg-query -W -f '${Status}\n' "$1" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}'); }

gpu_arch_fn()
{
    local is_wsl gpu_name gpu_type

    is_wsl="$(uname -a | grep -Eo 'WSL2')"
    if [ -n "$is_wsl" ]; then
        sudo apt -y install nvidia-utils-530
    fi

    gpu_name="$(nvidia-smi --query-gpu=gpu_name --format=csv | sort -r | head -n 1)"
    if [ "$gpu_name" = 'name' ]; then
        gpu_name="$(nvidia-smi --query-gpu=gpu_name --format=csv | sort | head -n 1)"
    fi

    case "$gpu_name" in
        'NVIDIA GeForce GT 1010')     gpu_type=1;;
        'NVIDIA GeForce GTX 1030')    gpu_type=1;;
        'NVIDIA GeForce GTX 1050')    gpu_type=1;;
        'NVIDIA GeForce GTX 1060')    gpu_type=1;;
        'NVIDIA GeForce GTX 1070')    gpu_type=1;;
        'NVIDIA GeForce GTX 1080')    gpu_type=1;;
        'NVIDIA TITAN Xp')            gpu_type=1;;
        'NVIDIA Tesla P40')           gpu_type=1;;
        'NVIDIA Tesla P4')            gpu_type=1;;
        'NVIDIA GeForce GTX 1180')    gpu_type=2;;
        'NVIDIA GeForce GTX Titan V') gpu_type=2;;
        'NVIDIA Quadro GV100')        gpu_type=2;;
        'NVIDIA Tesla V100')          gpu_type=2;;
        'NVIDIA GeForce GTX 1660 Ti') gpu_type=3;;
        'NVIDIA GeForce RTX 2060')    gpu_type=3;;
        'NVIDIA GeForce RTX 2070')    gpu_type=3;;
        'NVIDIA GeForce RTX 2080')    gpu_type=3;;
        'NVIDIA Quadro RTX 4000')     gpu_type=3;;
        'NVIDIA Quadro RTX 5000')     gpu_type=3;;
        'NVIDIA Quadro RTX 6000')     gpu_type=3;;
        'NVIDIA Quadro RTX 8000')     gpu_type=3;;
        'NVIDIA T1000')               gpu_type=3;;
        'NVIDIA T2000')               gpu_type=3;;
        'NVIDIA Tesla T4')            gpu_type=3;;
        'NVIDIA GeForce RTX 3050')    gpu_type=4;;
        'NVIDIA GeForce RTX 3060')    gpu_type=4;;
        'NVIDIA GeForce RTX 3070')    gpu_type=4;;
        'NVIDIA GeForce RTX 3080')    gpu_type=4;;
        'NVIDIA GeForce RTX 3080 Ti') gpu_type=4;;
        'NVIDIA GeForce RTX 3090')    gpu_type=4;;
        'NVIDIA RTX A2000')           gpu_type=4;;
        'NVIDIA RTX A3000')           gpu_type=4;;
        'NVIDIA RTX A4000')           gpu_type=4;;
        'NVIDIA RTX A5000')           gpu_type=4;;
        'NVIDIA RTX A6000')           gpu_type=4;;
        'NVIDIA GeForce RTX 4080')    gpu_type=5;;
        'NVIDIA GeForce RTX 4090')    gpu_type=5;;
        'NVIDIA H100')                gpu_type=6;;
        *)                            fail_fn 'Unable to define the variable "gpu_type" in the function "gpu_arch_fn".';;
    esac

    if [ -n "$gpu_type" ]; then
        case "$gpu_type" in
            1)      gpu_arch=compute_61,code=sm_61;;
            2)      gpu_arch=compute_70,code=sm_70;;
            3)      gpu_arch=compute_75,code=sm_75;;
            4)      gpu_arch=compute_86,code=sm_86;;
            5)      gpu_arch=compute_89,code=sm_89;;
            6)      gpu_arch=compute_90,code=sm_90;;
            *)      fail_fn 'Unable to define the variable "gpu_arch" in the function "gpu_arch_fn".';;
        esac
    else
        fail_fn 'Failed to find the variable: gpu_type'
    fi
}

# PRINT THE OPTIONS AVAILABLE WHEN MANUALLY RUNNING THE SCRIPT
usage()
{
    printf "%s\n\n" "Usage: $script_name [OPTIONS]"
    echo 'Options:'
    echo '    -h, --help                                       Display usage information'
    echo '        --version                                    Display version information'
    echo '    -b, --build                                      Starts the build process'
    echo '    -c, --cleanup                                    Remove all working dirs'
    echo '        --latest                                     Build latest version of dependencies if newer available'
    echo
}

printf "%s\n%s\n%s\n\n" \
    "ffmpeg-build-script v$script_ver" \
    '======================================' \
    "The script will utilize $cpu_threads CPU cores for parallel processing to accelerate the build speed."

while (($# > 0))
do
    case "$1" in
        -h | --help)
                usage
                echo
                exit 0
                ;;
        --version)
                printf "%s\n\n" "The script version is: $script_ver"
                exit 0
                ;;
        -*)
                if [[ "$1" == '--build' || "$1" =~ '-b' ]]; then
                    bflag='-b'
                fi
                if [[ "$1" == '--cleanup' || "$1" =~ '-c' && ! "$1" =~ '--' ]]; then
                    cflag='-c'
                    cleanup_fn
                fi
                if [[ "$1" == '--full-static' ]]; then
                    LDEXEFLAGS='-static'
                fi
                if [[ "$1" == '--latest' ]]; then
                    latest=true
                fi
                shift
                ;;
        *)
                usage
                echo
                exit 1
                ;;
    esac
done

if [ -z "${bflag}" ]; then
    if [ -z "${cflag}" ]; then
        usage
        echo
        exit 1
    fi
    exit 0
fi

if [ -n "${LDEXEFLAGS}" ]; then
    printf "%s\n\n" 'The script has been configured to run in full static mode.'
fi

#
# SET GLOBAL VARIABLES
#

find_java="$(sudo find /usr/lib/jvm -type d -name java-*-openjdk-*)"
JAVA_HOME="${find_java}"
export JAVA_HOME

#
# SET THE PATH VARIABLE
#

PATH="\
/usr/lib/ccache:\
$workspace/bin:\
$HOME/.cargo/bin:\
$HOME/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

PKG_CONFIG_PATH="\
$workspace/lib64/pkgconfig:\
$workspace/lib/pkgconfig:\
$workspace/lib/x86_64-linux-gnu/pkgconfig:\
$workspace/share/pkgconfig:\
$workspace/usr/lib/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/x86_64-linux-gnu/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/open-coarrays/openmpi/pkgconfig:\
/usr/lib/x86_64-linux-gnu/openmpi/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/share/pkgconfig\
"
export PKG_CONFIG_PATH

cuda_download_fn()
{
    clear

    local cuda_choice cuda_url

     mkdir -p "$packages/nvidia-cuda"

     printf "%s\n\n%s\n\n%s\n%s\n%s\n%s\n%s\n%s\n\n" \
        'Pick your Linux distro from the list below:' \
        'Supported architecture: x86_64' \
        '[1] Debian 10' \
        '[2] Debian 11' \
        '[3] Ubuntu 20.04' \
        '[4] Ubuntu 22.04' \
        '[5] Ubuntu WSL' \
        '[6] Skip this'

    read -p 'Your choices are (1 to 7): ' cuda_choice
    clear

    cuda_url='https://developer.download.nvidia.com/compute/cuda'

    case "$cuda_choice" in
        1)
            wget --show progress -cqO "$packages/nvidia-cuda/cuda-$cuda_ver.deb" "$cuda_url/$cuda_ver/local_installers/cuda-repo-debian10-12-2-local_12.2.1-535.86.10-1_amd64.deb"
            sudo dpkg -i "$packages/nvidia-cuda/cuda-$cuda_ver.deb"
            sudo cp -f /var/cuda-repo-debian10-12-2-local/cuda-*-keyring.gpg /usr/share/keyrings/
            sudo add-apt-repository -y contrib
            ;;
        2)
            wget --show progress -cqO "$packages/nvidia-cuda/cuda-$cuda_ver.deb" "$cuda_url/$cuda_ver/local_installers/cuda-repo-debian11-12-2-local_12.2.1-535.86.10-1_amd64.deb"
            sudo dpkg -i "$packages/nvidia-cuda/cuda-$cuda_ver.deb"
            sudo cp -f /var/cuda-repo-debian11-12-2-local/cuda-*-keyring.gpg /usr/share/keyrings/
            sudo add-apt-repository -y contrib
            ;;
        3)
            wget --show progress -cqO "$packages/nvidia-cuda/cuda-ubuntu2004.pin" "$cuda_url/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin"
            sudo mv "$packages/nvidia-cuda/cuda-ubuntu2004.pin" /etc/apt/preferences.d/cuda-repository-pin-600
            wget --show progress -cqO "$packages/nvidia/cuda-$cuda_ver.deb" "$cuda_url/$cuda_ver/local_installers/cuda-repo-ubuntu2004-12-2-local_12.2.1-535.86.10-1_amd64.deb"
            sudo dpkg -i "$packages/nvidia/cuda-$cuda_ver.deb"
            sudo cp -f /var/cuda-repo-ubuntu2004-12-2-local/cuda-*-keyring.gpg /usr/share/keyrings/
            ;;
        4)
            wget --show progress -cqO "$packages/nvidia-cuda/cuda-ubuntu2204.pin" "$cuda_url/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin"
            sudo mv "$packages/nvidia-cuda/cuda-ubuntu2204.pin" /etc/apt/preferences.d/cuda-repository-pin-600
            wget --show progress -cqO "$packages/nvidia/cuda-$cuda_ver.deb" "$cuda_url/$cuda_ver/local_installers/cuda-repo-ubuntu2204-12-2-local_12.2.1-535.86.10-1_amd64.deb"
            sudo dpkg -i "$packages/nvidia/cuda-$cuda_ver.deb"
            sudo cp -f /var/cuda-repo-ubuntu2204-12-2-local/cuda-*-keyring.gpg /usr/share/keyrings/
            ;;
        5)
            wget --show progress -cqO "$packages/nvidia-cuda/cuda-wsl-ubuntu.pin" "$cuda_url/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin"
            sudo mv "$packages/nvidia-cuda/cuda-wsl-ubuntu.pin" /etc/apt/preferences.d/cuda-repository-pin-600
            wget --show progress -cqO "$packages/nvidia/cuda-$cuda_ver.deb" "$cuda_url/$cuda_ver/local_installers/cuda-repo-wsl-ubuntu-12-2-local_12.2.1-1_amd64.deb"
            sudo dpkg -i "$packages/nvidia/cuda-$cuda_ver.deb"
            sudo cp -f /var/cuda-repo-wsl-ubuntu-12-2-local/cuda-*-keyring.gpg /usr/share/keyrings/
            ;;
    6)      exit_fn;;
    *)
            clear
            fail_fn 'Bad user input. Resetting script...'
            sleep 2
            unset cuda_choice
            clear
            cuda_download_fn
            ;;
    esac

    # UPDATE THE APT PACKAGES THEN INSTALL THE CUDA-SDK-TOOLKIT
    sudo apt update
    sudo apt -y install cuda

    cuda_ver="$(cat /usr/local/cuda/version.json | jq -r '.cuda.version')"

    if [ -z "$cuda_ver" ]; then
        fail_fn 'Unable to locate the file: /usr/local/cuda/version.json'
    else
        export PATH="$PATH:$cuda_path"
    fi
}

#
# REQUIRED GEFORCE CUDA DEVELOPMENT PACKAGES
#

install_cuda_fn()
{
    local answer choice
    #
    # CHECK IF THE CUDA FOLDER EXISTS TO ENSURE IT WAS INSTALLED
    #

    iscuda="$(sudo find /usr/local/cuda* -type f -name nvcc)"
    cuda_path="$(sudo find /usr/local/cuda* -type f -name nvcc | grep -Eo '^.*\/bin?')"

    if [ -n "$iscuda" ]; then
        printf "\n%s\n%s\n%s\n\n%s\n%s\n\n" \
            "The installed cuda-sdk-toolkit version is: $cuda_ver" \
            '=====================================================' \
            'Do you want to update/reinstall it?' \
            '[1] Yes' \
            '[2] No'
        read -p 'Your choices are (1 or 2): ' choice
        clear

        case "$choice" in
                1)      cuda_download_fn;;
                2)      export PATH="$PATH:$cuda_path";;
                *)      fail_fn 'Bad user input.';;
        esac
    else
        printf "\n%s\n\n%s\n%s\n\n%s\n%s\n\n" \
            "The cuda-sdk-toolkit was not detected and the latest version is: v$cuda_ver" \
            '====================================================================' \
            'What do you want to do next?' \
            '[1] Install the toolkit and add it to PATH' \
            '[2] Continue the build without installing (hardware acceleration will be turned off)'
        read -p 'Your choices are (1 or 2): ' answer
        echo

        case "$answer" in
            1)      cuda_download_fn;;
            2)      echo;;
            *)      fail_fn 'Bad user input.';;
        esac
    fi
}

#
# REQUIRED BUILD PACKAGES
#

pkgs_fn()
{
    local pkg pkgs missing_pkgs

    printf "%s\n%s\n" \
        'Installing the required APT packages' \
        '=============================================='

    pkgs=("$1" ant apt asciidoc autoconf autoconf-archive automake autopoint binutils bison build-essential cargo ccache
          checkinstall clang cmake curl doxygen fcitx-libs-dev flex flite1-dev freeglut3-dev frei0r-plugins-dev
          gawk gettext git gnome-desktop-testing gnustep-gui-runtime google-perftools gperf gtk-doc-tools
          guile-3.0-dev help2man jq junit ladspa-sdk libasound2-dev libass-dev libaudio-dev libavfilter-dev
          libbluray-dev libbs2b-dev libbz2-dev libc6 libc6-dev libcaca-dev libcairo2-dev libcdio-dev
          libcdio-paranoia-dev libcdparanoia-dev libchromaprint-dev libcrypto++-dev libcurl4-openssl-dev
          libdbus-1-dev libde265-dev libdevil-dev libdmalloc-dev libdrm-dev libdvbpsi-dev libebml-dev
          libegl1-mesa-dev libfdk-aac-dev libffi-dev libgbm-dev libgdbm-dev libgl1-mesa-dev libgles2-mesa-dev
          libglib2.0-dev libgme-dev libgnutls28-dev libgnutls30 libgoogle-perftools4 libgoogle-perftools-dev
          libgvc6 libibus-1.0-dev libiconv-hook-dev libintl-perl libjack-dev libjemalloc-dev libladspa-ocaml-dev
          libleptonica-dev liblz-dev liblzma-dev liblzo2-dev libmathic-dev libmatroska-dev libmodplug-dev
          libmp3lame-dev libmusicbrainz5-dev libmysofa-dev libncurses5-dev libncursesw5-dev libnuma1 libnuma-dev
          libopencore-amrnb-dev libopencore-amrwb-dev libopencv-dev libopenjp2-7-dev libopenmpt-dev libopus-dev
          libperl-dev libpstoedit-dev libpulse-dev libraqm-dev libraw-dev librsvg2-dev librubberband-dev libshine-dev
          libsmbclient-dev libsnappy-dev libsndio-dev libsoxr-dev libspeex-dev libsqlite3-dev libssl-dev libsvtav1dec-dev
          libsvtav1-dev libsvtav1enc-dev libtalloc-dev libtheora-dev libtool libtool-bin libtwolame-dev libudev-dev
          libv4l-dev libvidstab-dev libvlccore-dev libvo-amrwbenc-dev libvpx-dev libx11-dev libx264-dev libx265-dev
          libxcursor-dev libxext-dev libxfixes-dev libxi-dev libxkbcommon-dev libxrandr-dev libxss-dev libxvidcore-dev
          libzstd-dev libzzip-dev lshw lzma-dev m4 meson nasm ninja-build openjdk-17-jdk-headless pandoc python3
          python3-pip ragel re2c scons sudo texi2html texinfo tk-dev unzip wget xmlto zlib1g-dev)

    for pkg in ${pkgs[@]}
    do
        if ! installed "$pkg"; then
            missing_pkgs+=" $pkg"
        fi
    done

    if [ -n "$missing_pkgs" ]; then
        if sudo apt -y install $missing_pkgs; then
            echo 'The required APT packages were installed.'
        else
            fail_fn "These required APT packages failed to install: $missing_pkgs"
        fi
    else
        echo 'The required APT packages are already installed.'
    fi
}

ffmpeg_install_test()
{
    local binaries i

    binaries=(cyanrip ffmpeg ffplay ffprobe flac mediainfo MP4Box)

    for i in ${binaries[@]}
    do
        if [ ! -f "$workspace/bin/$i" ]; then
            printf "\n%s\n\n%s\n\n%s\n\n" \
                "Unable to locate the binary file: $workspace/bin/$i" \
                "Please report this at:" \
                "$repo/issues"
            read -p 'You can press enter to continue, however, please consider creating an issue report.'
            clear
        fi
    done
}

ffmpeg_install_choice()
{
    local binaries i choice

    printf "\n%s\n\n%s\n%s\n\n" \
        "Would you like to install the static binaries system-wide? [$install_prefix/bin]" \
        '[1] Yes ' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "$choice" in
        1)
                binaries=(cyanrip ffmpeg ffplay ffprobe flac mediainfo MP4Box)
                for i in ${binaries[@]}
                do
                    if [ -f "$workspace/bin/$i" ]; then
                        sudo cp -f "$workspace/bin/$i" "$install_prefix/bin"
                        sudo chmod 755 "$install_prefix/bin/$i"
                    fi
                done
                ;;
        2)
                printf "\n%s\n\n%s\n" \
                    'The FFmpeg binaries are located in:' \
                    "$workspace"/bin
                ;;
        *)
                printf "%s\n\n" 'Bad user input.'
                    read -p 'Press enter to try again.'
                    clear
                    ffmpeg_install_choice
                ;;
    esac
}

install_libjxl_fn()
{
    local i

    cd "$packages"/deb-files || exit 1

    printf "\n%s\n%s\n" \
        'Installing: libjxl_0.8.1_amd64.deb' \
        '=========================================='
    if sudo dpkg -i libjxl_0.8.1_amd64.deb; then
        sudo rm libjxl_0.8.1_amd64.deb &>/dev/null
        echo
    fi

    for i in *.deb
    do
        printf "%s\n%s\n" \
            "Installing: $i" \
            '=========================================='
        sudo dpkg -i "$i"
        echo
    done
}

download_libjxl_fn()
{
    if ! curl -A "$user_agent" -Lso "$packages"/libjxl.tar.gz "$1"; then
        fail_fn 'Failed to download the libjxl archive: $packages/libjxl.tar.gz'
    fi
}

sort_libjxl_fn()
{
    local url_base url_suffix

    url_base=https://github.com/libjxl/libjxl/releases/download/v0.8.1/jxl-debs-amd64
    url_suffix=v0.8.1.tar.gz

    mkdir -p "$packages"/deb-files

        case "$VER" in
                12)     libjxl_download="$url_base-debian-bookworm-$url_suffix";;
                11)     libjxl_download="$url_base-debian-bullseye-$url_suffix";;
                10)     libjxl_download="$url_base-debian-buster-$url_suffix";;
                22.04)  libjxl_download="$url_base-ubuntu-22.04-$url_suffix";;
                20.04)  libjxl_download="$url_base-ubuntu-20.04-$url_suffix";;
                18.04)  libjxl_download="$url_base-ubuntu-18.04-$url_suffix";;
                *)      fail_fn 'Coudn'\''t detect the OS version of Linux.';;
        esac

        # CALL THE DOWNLOAD FUNCTION FOR THE LIBJXL DEBIAN FILES
        download_libjxl_fn "$libjxl_download"

        if ! tar -xf "$packages"/libjxl.tar.gz -C "$packages"/deb-files --strip-components 1; then
            fail_fn "Could not extract the libjxl archive: $packages/libjxl.tar.gz"
        fi
        install_libjxl_fn
}

#
# INSTALL REQUIRED APT PACKAGES
#

debian_os_version()
{
    case "$VER" in
        12|11|10)    pkgs_fn 'libdmalloc5 libjemalloc2 libtcmalloc-minimal4 libyuv-dev libyuv-utils libyuv0 libsharp-dev libticonv-dev';;
        *)           fail_fn 'Could not detect the Ubuntu version.';;
    esac
}

ubuntu_os_version()
{
    bionic_pkgs='libdmalloc5 libjemalloc1 libtcmalloc-minimal4 libvmmalloc-dev libvmmalloc1 libreadline-gplv2-dev'
    focal_pkgs='libjemalloc2 libtcmalloc-minimal4 libvmmalloc1 libvmmalloc-dev libdmalloc5 libcunit1-dev libde265-dev'
    focal_pkgs+=' librust-jemalloc-sys-dev librust-malloc-buf-dev libsrt-doc libreadline-dev libcunit1 libcunit1-doc'
    jammy_lunar_pkgs='libmimalloc-dev libtbbmalloc2 libyuv-dev librust-jemalloc-sys-dev librust-malloc-buf-dev'
    jammy_lunar_pkgs+=' libsrt-doc libreadline-dev libpipewire-0.3-dev libwayland-dev libdecor-0-dev libde265-dev'

    case "$VER" in
        23.04|22.04)    pkgs_fn "$jammy_lunar_pkgs";;
        20.04)          pkgs_fn "$focal_pkgs";;
        18.04)          pkgs_fn "$bionic_pkgs";;
        *)              fail_fn 'Could not detect the Ubuntu version.';;
    esac
}

if [ -f /etc/os-release ]; then
    source /etc/os-release
    OS="$NAME"
    VER="$VERSION_ID"
elif type lsb_release >/dev/null 2>&1; then
    OS="$(lsb_release -si)"
    VER="$(lsb_release -sr)"
elif [ -f /etc/lsb-release ]; then
    source /etc/lsb-release
    OS="$DISTRIB_ID"
    VER="$DISTRIB_RELEASE"
elif [ -f /etc/debian_version ]; then
    OS=Debian
    VER="$(cat /etc/debian_version)"
else
    OS="$(uname -s)"
    VER="$(uname -r)"
fi

#
# TEST THE OS AND ITS VERSION IF UBUNTU THEN CALL THE pkgs_fn
#

case "$OS" in
    'Debian GNU/Linux')     debian_os_version;;
    'Ubuntu')               ubuntu_os_version;;
    *)                      fail_fn 'Could not detect the OS architecture.';;
esac

check_python3_ver()
{
    python3_ver="$(python3 --version | grep -Eo '[0-9\.]+')"
    python3_rm_decimals="${python3_ver//\./}"
}

patch_fn()
{
    local patch1 patch2 patch3 patch4 vvc_patch_url

    vvc_patch_url=https://raw.githubusercontent.com/m-ab-s/mabs-patches/master/VVCSoftware_VTM

    patch1="$vvc_patch_url/0001-BBuildEnc.cmake-Remove-Werror-for-gcc-and-clang.patch"
    patch2="$vvc_patch_url/0002-cmake-allow-installing-apps.patch"
    patch3="$vvc_patch_url/0003-CMake-add-USE_CCACHE-variable-to-disable-using-found.patch"

    if ! curl -A "$user_agent" -Lso vvc_patch1.patch $patch1; then
        fail_fn "Failed to download vvc patch 1: $patch1"
    fi
    if ! curl -A "$user_agent" -Lso vvc_patch2.patch $patch2; then
        fail_fn "Failed to download vvc patch 2: $patch2"
    fi
    if ! curl -A "$user_agent" -Lso vvc_patch3.patch $patch3; then
        fail_fn "Failed to download vvc patch 3: $patch3"
    fi
}

#
# INSTALL CUDA SDK-TOOLKIT
#

install_cuda_fn

#
# CHECK IF THE CUDA FOLDER EXISTS TO ENSURE IT WAS INSTALLED
#

iscuda="$(sudo find /usr/local/cuda* -type f -name nvcc)"

#
# SET THE C & C++ COMPILERS TO THE HIGHEST VERSION INSTALLED
#

if which gcc &>/dev/null; then
    export CC=gcc CXX=g++
else
    fail_fn 'Please install "gcc" to continue the build.'
fi

#
# MAKE SURE WE USE THE CORRECT M4 FOLDER
#

export ACLOCAL_PATH=/usr/share/aclocal

#
# GET PC TYPE
#

curl -Lso "$cwd/config.guess" 'https://raw.githubusercontent.com/gcc-mirror/gcc/master/config.guess'
chmod +x "$cwd/config.guess"
pc_type="$(source "$cwd/config.guess")"

#
# INSTALL GLOBAL TOOLS
#

printf "%s\n%s\n%s\n" \
    '==============================================' \
    '           Installing Global Tools            ' \
    '=============================================='

if build 'm4' 'latest'; then
    download 'https://ftp.gnu.org/gnu/m4/m4-latest.tar.xz'
    execute ./configure --prefix="$workspace" --disable-nls --enable-c++ --{build,host,target}="$pc_type"
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'm4' 'latest'
fi

if build 'autoconf' 'latest'; then
    download 'http://ftp.gnu.org/gnu/autoconf/autoconf-latest.tar.xz'
    execute autoreconf -fi
    execute ./configure --prefix="$workspace" --{build,host}="$pc_type" M4="$workspace"/bin/m4
    execute make "-j$cpu_threads"
    execute make install
    build_done 'autoconf' 'latest'
fi

if build 'libtool' '2.4.7'; then
    download 'https://ftp.gnu.org/gnu/libtool/libtool-2.4.7.tar.xz'
    execute ./configure --prefix="$workspace" --{build,host}="$pc_type" --with-pic M4="$workspace"/bin/m4
    execute make "-j$cpu_threads"
    execute make install
    build_done 'libtool' '2.4.7'
fi

if build 'pkg-config' '0.29.2'; then
    download "https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz"
    execute ./configure --prefix="$workspace" --with-pc-path="$PKG_CONFIG_PATH"
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'pkg-config' '0.29.2'
fi

pre_check_ver 'madler/zlib' '1' 'T'
if build 'zlib' "$g_ver"; then
    download "https://github.com/madler/zlib/releases/download/v$g_ver/zlib-$g_ver.tar.gz"
    execute ./configure --prefix="$workspace"
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'zlib' "$g_ver"
fi

if build 'openssl' '3.1.2'; then
    download 'https://www.openssl.org/source/openssl-3.1.2.tar.gz'
    execute ./Configure linux-x86_64 --prefix=/usr/local enable-egd enable-fips enable-md2 enable-rc5 enable-trace \
        threads zlib --with-rand-seed=os --with-zlib-include="$workspace"/include --with-zlib-lib="$workspace"/lib
    execute make "-j$cpu_threads"
    execute sudo make install_sw
    execute sudo make install_fips
    execute make distclean
    build_done 'openssl' '3.1.2'
fi
ffmpeg_libraries+=('--enable-openssl')

# UBUNTU BIONIC NEEDS A RECENT VERSION OF PYTHON3 TO INSTALL A RECENT VERSION OF MESON
check_python3_ver
if [ "$python3_rm_decimals" -lt '700' ]; then
    if build 'python3' '3.9.16'; then
        download 'https://www.python.org/ftp/python/3.9.16/Python-3.9.16.tar.xz' 'python3-3.9.16.tar.xz'
        rm_pip_lock="$(find /usr/lib/python3* -type f -name EXTERNALLY-MANAGED)"
        if [ -n "$rm_pip_lock" ]; then
            sudo rm "$rm_pip_lock"
        fi
        if ! pip show setuptools; then
            execute pip install setuptools --disable-pip-version-check --no-cache-dir --quiet --upgrade
        fi
        execute sudo ./configure --enable-optimizations
        execute sudo make "-j$cpu_threads"
        execute sudo make altinstall
        build_done 'python3' '3.9.16'
    fi
    python_var='python3.9'
else
    python_var='python3'
fi

pre_check_ver 'yasm/yasm' '1' 'T'
if build 'yasm' "$g_ver"; then
    download "https://codeload.github.com/yasm/yasm/tar.gz/refs/tags/v$g_ver" "yasm-$g_ver.tar.gz"
    execute autoreconf -fi
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} \
        -DBUILD_SHARED_LIBS=OFF -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'yasm' "$g_ver"
fi

if build 'nasm' '2.16.01'; then
    download 'https://www.nasm.us/pub/nasm/stable/nasm-2.16.01.tar.xz'
    execute ./autogen.sh
    execute ./configure --prefix="$workspace"            \
                         --{build,host,target}="$pc_type" \
                         --disable-pedantic               \
                         --enable-ccache
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'nasm' '2.16.01'
fi

    ./configure --prefix=/usr/local
if build 'giflib' '5.2.1'; then
    download 'https://cfhcable.dl.sourceforge.net/project/giflib/giflib-5.2.1.tar.gz'
    # PARELLEL BUILDING NOT AVAILABLE FOR THIS LIBRARY
    execute make
    execute make PREFIX="$workspace" install
    execute make clean
    build_done 'giflib' '5.2.1'
fi

# UBUNTU BIONIC FAILS TO BUILD XML2
if [ "$VER" != '18.04' ]; then
    git_ver_fn '1665' '6' 'T'
    if build 'xml2' "$g_ver"; then
        download "https://gitlab.gnome.org/GNOME/libxml2/-/archive/v$g_ver/libxml2-v$g_ver.tar.bz2" "xml2-$g_ver.tar.bz2"
        CFLAGS+=' -DNOLIBTOOL'
        execute ./autogen.sh
        execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",EXPORT_COMPILE_COMMANDS=OFF,VERBOSE_MAKEFILE=OFF} \
            -DCPACK_{BINARY_DEB,BINARY_FREEBSD,BINARY_IFW,BINARY_NSIS,BINARY_RPM,BINARY_TBZ2,BINARY_TXZ,SOURCE_{RPM,ZIP}}=ON \
            -DBUILD_SHARED_LIBS=OFF -G Ninja -Wno-dev
        execute ninja "-j$cpu_threads" -C build
        execute ninja "-j$cpu_threads" -C build install
        build_done 'xml2' "$g_ver"
    fi
    ffmpeg_libraries+=('--enable-libxml2')
fi

# MANUALLY UPDATE THIS FROM TIME TO TIME ($g_ver returns = 1.7.0beta88)
if build 'libpng' '1.6.40'; then
    download 'https://github.com/glennrp/libpng/archive/refs/tags/v1.6.40.tar.gz' 'libpng-1.6.40.tar.gz'
    execute autoupdate
    execute autoreconf -fi
    execute ./configure --prefix="$workspace" --disable-shared --enable-{hardware-optimizations,unversioned-links}
    execute make "-j$cpu_threads"
    execute make install-header-links
    execute make install-library-links
    execute make install
    execute make distclean
    build_done 'libpng' '1.6.40'
fi

pre_check_ver 'nkoriyama/aribb24' '1' 'T'
if build 'aribb24' '2.16.01'; then
    download "https://codeload.github.com/nkoriyama/aribb24/tar.gz/refs/tags/v$g_ver" "aribb24-$g_ver.tar.gz"
    execute autoreconf -fi
    execute ./configure --prefix="$workspace" --disable-shared
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'aribb24' '2.16.01'
fi

git_ver_fn '7950' '4'
g_ver1="${g_ver//-/.}"
if build 'freetype' "$g_ver1"; then
    download "https://gitlab.freedesktop.org/freetype/freetype/-/archive/VER-$g_ver/freetype-VER-$g_ver.tar.bz2" "freetype-$g_ver1.tar.bz2"
    extracommands=(-D{harfbuzz,png,bzip2,brotli,zlib,tests}'=disabled')
    execute ./autogen.sh
    execute meson setup build --prefix="$workspace" --libdir="$workspace"/lib \
        --buildtype=release --default-library=static --strip "${extracommands[@]}"
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
build_done 'freetype' "$g_ver1"
fi
ffmpeg_libraries+=('--enable-libfreetype')

git_ver_fn '890' '4'
if build 'fontconfig' "$g_ver"; then
    download "https://gitlab.freedesktop.org/fontconfig/fontconfig/-/archive/$g_ver/fontconfig-$g_ver.tar.bz2"
    execute ./autogen.sh --noconf
    execute autoreconf -fi
    execute autoupdate
    LDFLAGS+=' -DLIBXML_STATIC'
    sed -i 's|Cflags:|& -DLIBXML_STATIC|' fontconfig.pc.in
    execute ./configure --prefix="$workspace" --disable-{docs,shared}
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'fontconfig' "$g_ver"
fi
ffmpeg_libraries+=('--enable-libfontconfig')

# UBUNTU BIONIC FAILS TO BUILD XML2
if [ "$VER" != '18.04' ]; then
    pre_check_ver 'harfbuzz/harfbuzz' '1' 'R'
    if build 'harfbuzz' "$g_ver"; then
        download "https://codeload.github.com/harfbuzz/harfbuzz/tar.gz/refs/tags/$g_ver" "harfbuzz-$g_ver.tar.gz"
        extracommands=(-D{benchmark,cairo,docs,glib,gobject,icu,introspection,tests}'=disabled')
        execute ./autogen.sh
        execute meson setup build --prefix="$workspace" --libdir="$workspace"/lib \
            --buildtype=release --default-library=static --strip "${extracommands[@]}"
        execute ninja "-j$cpu_threads" -C build
        execute ninja "-j$cpu_threads" -C build install
        build_done 'harfbuzz' "$g_ver"
    fi
fi

if build 'c2man' 'git'; then
    download_git 'https://github.com/fribidi/c2man.git'
    execute ./Configure -desO -D prefix="$workspace" -D bin="$workspace"/bin -D bash="$(type -P bash)" \
        -D cc=/usr/bin/cc -D d_gnu=/usr/lib/x86_64-linux-gnu -D find="$(type -P find)" -D gcc=/usr/bin/gcc \
        -D gzip="$(type -P gzip)" -D installmansrc="$workspace"/share/man -D ldflags="$LDFLAGS" \
        -D less="$(type -P less)" -D libpth='/lib /usr/lib' -D uniq="$(type -P uniq)" -D tr="$(type -P tr)" \
        -D locincpth="$workspace/include /usr/local/include /usr/include" -D yacc="$(type -P yacc)" \
        -D loclibpth="$workspace/lib /usr/local/lib" -D make="$(type -P make)" -D troff="$(type -P troff)" \
        -D more="$(type -P more)" -D osname="$OS" -D perl="$(type -P perl)" -D privlib="$workspace"/lib/c2man \
        -D privlibexp="$workspace"/lib/c2man -D sleep="$(type -P sleep)" -D tail="$(type -P tail)" \
        -D tar="$(type -P tar)" -D uuname="$(uname -s)" -D vi="$(type -P vi)" -D zip="$(type -P zip)"
    execute make depend
    execute make "-j$cpu_threads"
    execute sudo make install
    execute make distclean
    build_done 'c2man' 'git'
fi

pre_check_ver 'fribidi/fribidi' '1' 'T'
if build 'fribidi' "$g_ver"; then
    download "https://codeload.github.com/fribidi/fribidi/tar.gz/refs/tags/v$g_ver" "fribidi-$g_ver.tar.gz"
    extracommands=(-D{docs,tests}'=false')
    execute autoreconf -fi
    execute meson setup build --prefix="$workspace" --libdir="$workspace"/lib \
        --buildtype=release --default-library=static --strip "${extracommands[@]}"
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'fribidi' "$g_ver"
fi
ffmpeg_libraries+=('--enable-libfribidi')

pre_check_ver 'libass/libass' '1' 'T'
if build 'libass' "$g_ver"; then
    download "https://codeload.github.com/libass/libass/tar.gz/refs/tags/$g_ver" "libass-$g_ver.tar.gz"
    execute ./autogen.sh
    execute ./configure --prefix="$workspace" --disable-shared
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'libass' "$g_ver"
fi
ffmpeg_libraries+=('--enable-libass')

pre_check_ver 'FreeGLUTProject/freeglut' '1' 'T'
if build 'freeglut' "$g_ver"; then
    download "https://codeload.github.com/FreeGLUTProject/freeglut/tar.gz/refs/tags/v$g_ver" "freeglut-$g_ver.tar.gz"
    CFLAGS+=' -DFREEGLUT_STATIC'
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} \
        -DFREEGLUT_{BUILD_SHARED_LIBS,GLES,PRINT_WARNINGS}=OFF -G Ninja -Wno-dev \
        -DFREEGLUT_{BUILD_STATIC_LIBS,WAYLAND,PRINT_ERRORS,REPLACE_GLUT}=ON
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'freeglut' "$g_ver"
fi

git_ver_fn '4720790' '3' 'T'
if build 'libtiff' "$g_ver"; then
    download "https://gitlab.com/libtiff/libtiff/-/archive/v$g_ver/libtiff-v$g_ver.tar.bz2" "libtiff-$g_ver.tar.bz2"
    execute ./autogen.sh
    execute ./configure --prefix="$workspace" --disable-shared
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'libtiff' "$g_ver"
fi

if build 'libwebp' 'git'; then
    download_git 'https://chromium.googlesource.com/webm/libwebp' 'libwebp-git'
    execute autoreconf -fi
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",INSTALL_INCLUDEDIR="$workspace"/include,BUILD_TYPE=Release} \
        -DZLIB_INCLUDE_DIR="$workspace"/include -DBUILD_SHARED_LIBS=OFF -DCMAKE_C_FLAGS_RELEASE='-g -O2 -flto -ffunction-sections -fdata-sections -pipe -march=native' \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=OFF -DWEBP_{BUILD_CWEBP,BUILD_DWEBP}=ON -G Ninja -Wno-dev \
        -DWEBP_{BUILD_ANIM_UTILS,BUILD_EXTRAS,BUILD_GIF2WEBP,BUILD_IMG2WEBP,BUILD_LIBWEBPMUX}=OFF \
        -DWEBP_{BUILD_VWEBP,BUILD_WEBPINFO,BUILD_WEBPMUX,ENABLE_SWAP_16BIT_CSP,LINK_STATIC}=OFF
    execute ninja "-j$cpu_threads" -C build all
    execute ninja "-j$cpu_threads" -C build install
    build_done 'libwebp' 'git'
fi
ffmpeg_libraries+=('--enable-libwebp')

git_ver_fn 'google/highway' '1' 'R'
if build 'libhwy' "$g_ver"; then
    download "https://codeload.github.com/google/highway/tar.gz/refs/tags/$g_ver" "libhwy-$g_ver.tar.gz"
    CXXFLAGS+=" -DHWY_COMPILE_ALL_ATTAINABLE"
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} \
        -DHWY_ENABLE_{EXAMPLES,TESTS}=OFF -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'libhwy' "$g_ver"
fi

pre_check_ver 'google/brotli' '1' 'T'
if build 'brotli' "$g_ver"; then
    download "https://codeload.github.com/google/brotli/tar.gz/refs/tags/v$g_ver" "brotli-$g_ver.tar.gz"
    execute ./bootstrap
    mkdir build
    cd build || exit 1
    execute ../configure-cmake --prefix="$workspace"
    execute make "-j$cpu_threads"
    execute make test
    execute make install
    execute make clean
    build_done 'brotli' "$g_ver"
fi

pre_check_ver 'mm2/Little-CMS' '1' 'T'
if build 'lcms2' "$g_ver"; then
    download "https://codeload.github.com/mm2/Little-CMS/tar.gz/refs/tags/lcms$g_ver" "lcms2-$g_ver.tar.gz"
    execute ./autogen.sh
    execute ./configure --prefix="$workspace" --disable-shared
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'lcms2' "$g_ver"
fi
ffmpeg_libraries+=('--enable-lcms2')

pre_check_ver 'gflags/gflags' '1' 'T'
if build 'gflags' "$g_ver"; then
    download "https://codeload.github.com/gflags/gflags/tar.gz/refs/tags/v$g_ver" "gflags-$g_ver.tar.gz"
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} -DINSTALL_HEADERS=ON \
        -DBUILD_{STATIC_LIBS,gflags_LIB}=ON -DREGISTER_{BUILD_DIR,INSTALL_PREFIX}=ON -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'gflags' "$g_ver"
fi

if build 'libjxl' '0.8.1'; then
    sort_libjxl_fn
    build_done 'libjxl' '0.8.1'
fi
ffmpeg_libraries+=('--enable-libjxl')

pre_check_ver 'khronosgroup/opencl-headers' '1' 'T'
if build 'opencl-headers' "$g_ver"; then
    download "https://codeload.github.com/KhronosGroup/OpenCL-Headers/tar.gz/refs/tags/v$g_ver" "opencl-headers-$g_ver.tar.gz"
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} -G Ninja -Wno-dev
    execute ninja -C build "-j$cpu_threads"
    execute ninja -C build "-j$cpu_threads" install
    build_done 'opencl-headers' "$g_ver"
fi
ffmpeg_libraries+=('--enable-opencl')

pre_check_ver 'tesseract-ocr/tesseract' '1' 'T'
if build 'tesseract' "$g_ver"; then
    download "https://codeload.github.com/tesseract-ocr/tesseract/tar.gz/refs/tags/$g_ver" "tesseract-$g_ver.tar.gz"
    execute ./autogen.sh
    execute ./configure --prefix="$workspace" --datadir="$workspace"/bin \
        --disable-{graphics,shared,tessdata-prefix} --without-curl
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'tesseract' "$g_ver"
fi

if build 'rubberband' 'git'; then
    download_git 'https://github.com/m-ab-s/rubberband.git'
    execute make "-j$cpu_threads" PREFIX="$workspace" install-static
    execute make distclean
    build_done 'rubberband' 'git'
fi
ffmpeg_libraries+=('--enable-librubberband')

pre_check_ver 'sekrit-twc/zimg' '1' 'T'
if build 'zimg' "$g_ver"; then
    download "https://codeload.github.com/sekrit-twc/zimg/tar.gz/refs/tags/release-$g_ver" "zimg-$g_ver.tar.gz"
    execute libtoolize -fiq
    execute autoupdate
    execute autoreconf -fi
    execute ./configure --prefix="$workspace" --disable-shared
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'zimg' "$g_ver"
fi
ffmpeg_libraries+=('--enable-libzimg')

pre_check_ver 'c-ares/c-ares' '1' 'R'
g_ver="${g_ver//ares-/}"
g_tag="${g_ver//\./_}"
if build 'c-ares' "$g_ver"; then
    download "https://codeload.github.com/c-ares/c-ares/tar.gz/refs/tags/cares-$g_tag" "c-ares-$g_ver.tar.gz"
    execute autoreconf -fi
    execute autoupdate
    execute ./configure --prefix="$workspace" --disable-{shared,warnings} --enable-optimize="$CXXFLAGS"
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'c-ares' "$g_ver"
fi

if build 'lv2' 'git'; then
    download_git 'https://github.com/lv2/lv2.git'
    execute meson setup build --prefix="$workspace" --libdir="$workspace"/lib \
        --buildtype=release --default-library=static --strip
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'lv2' 'git'
fi

git_ver_fn '7131569' '3' 'T'
g_ver="$(echo "$g_ver" | sed 's/-//g' | sed 's/waf//g')"
if build 'waflib' "$g_ver"; then
    download "https://gitlab.com/ita1024/waf/-/archive/waf-$g_ver/waf-waf-$g_ver.tar.bz2" "waflib-$g_ver.tar.bz2"
    build_done 'waflib' "$g_ver"
fi

git_ver_fn '5048975' '3' 'T'
if build 'serd' "$g_ver"; then
    download "https://gitlab.com/drobilla/serd/-/archive/v$g_ver/serd-v$g_ver.tar.bz2" "serd-$g_ver.tar.bz2"
    execute meson setup build --prefix="$workspace" --libdir="$workspace"/lib \
        --buildtype=release --default-library=static --strip
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'serd' "$g_ver"
fi

pre_check_ver 'pcre2project/pcre2' '1' 'T'
if build 'pcre2' "$g_ver"; then
    download "https://codeload.github.com/PCRE2Project/pcre2/tar.gz/refs/tags/pcre$g_ver" "pcre2-$g_ver.tar.gz"
    execute ./autogen.sh
    execute ./configure --prefix="$workspace" --disable-shared
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'pcre2' "$g_ver"
fi

git_ver_fn '14889806' '3' 'B'
if build 'zix' "$g_sver1"; then
    download "https://gitlab.com/drobilla/zix/-/archive/$g_ver1/zix-$g_ver1.tar.bz2" "zix-$g_sver1.tar.bz2"
    extracommands=(-D{benchmarks,docs,singlehtml,tests,tests_cpp}=disabled)
    execute meson setup build --prefix="$workspace" --libdir="$workspace"/lib \
        --buildtype=release --default-library=static --strip "${extracommands[@]}"
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'zix' "$g_sver1"
fi

git_ver_fn '11853362' '3' 'B'
if build 'sord' "$g_sver1"; then
    CFLAGS+=" -I$workspace/include/serd-0"
    download "https://gitlab.com/drobilla/sord/-/archive/$g_ver1/sord-$g_ver1.tar.bz2" "sord-$g_sver1.tar.bz2"
    extracommands=(-D{docs,tests}=disabled)
    execute meson setup build --prefix="$workspace" --libdir="$workspace"/lib \
        --buildtype=release --default-library=static --strip "${extracommands[@]}"
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'sord' "$g_sver1"
fi

git_ver_fn '11853194' '3' 'T'
if build 'sratom' "$g_ver"; then
    download "https://gitlab.com/lv2/sratom/-/archive/v$g_ver/sratom-v$g_ver.tar.bz2" "sratom-$g_ver.tar.bz2"
    extracommands=(-D{docs,tests}=disabled)
    execute meson setup build --prefix="$workspace" --libdir="$workspace"/lib \
        --buildtype=release --default-library=static --strip "${extracommands[@]}"
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'sratom' "$g_ver"
fi

git_ver_fn '11853176' '3' 'T'
if build 'lilv' "$g_ver"; then
    download "https://gitlab.com/lv2/lilv/-/archive/v$g_ver/lilv-v$g_ver.tar.bz2" "lilv-$g_ver.tar.bz2"
    extracommands=(-D{docs,tests}=disabled)
    execute meson setup build --prefix="$workspace" --libdir="$workspace"/lib \
        --buildtype=release --default-library=static --strip "${extracommands[@]}"
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'lilv' "$g_ver"
fi
CFLAGS+=" -I$workspace/include/lilv-0"
ffmpeg_libraries+=('--enable-lv2')

if build 'libmpg123' 'git'; then
    download_git 'https://github.com/gypified/libmpg123.git'
    execute rm -rf aclocal.m4
    execute aclocal --force -I m4
    execute autoconf -f -W all,no-obsolete
    execute autoheader -f -W all
    execute automake -a -c -f -W all,no-portability
    execute autoreconf -fi
    execute ./configure --prefix="$workspace" --enable-static --with-cpu=x86-64
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'libmpg123' 'git'
fi

pre_check_ver 'akheron/jansson' '1' 'T'
if build 'jansson' "$g_ver"; then
    download "https://codeload.github.com/akheron/jansson/tar.gz/refs/tags/v$g_ver" "jansson-$g_ver.tar.gz"
    execute autoreconf -fi
    execute ./configure --prefix="$workspace"
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'jansson' "$g_ver"
fi

pre_check_ver 'jemalloc/jemalloc' '1' 'T'
if build 'jemalloc' "$g_ver"; then
    download "https://codeload.github.com/jemalloc/jemalloc/tar.gz/refs/tags/$g_ver" "jemalloc-$g_ver.tar.gz"
    execute ./autogen.sh
    execute ./configure --prefix="$workspace" --enable-{autogen,lazy-lock,static,xmalloc} \
        --disable-{debug,doc,fill,log,shared,prof,stats}
    execute make "-j$cpu_threads"
    execute make install
    build_done 'jemalloc' "$g_ver"
fi

if build 'cunit' 'git'; then
    download_git 'https://github.com/jacklicn/cunit.git'
    execute autoreconf -fi
    execute ./configure --prefix="$workspace" --disable-shared
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'cunit' 'git'
fi

#
# INSTALL AUDIO TOOLS
#

printf "\n%s\n%s\n%s\n" \
    '==============================================' \
    '            Installing Audio Tools            ' \
    '=============================================='

pre_check_ver 'xiph/flac' '1' 'T'
if build 'libflac' "$g_ver"; then
    download "https://codeload.github.com/xiph/flac/tar.gz/refs/tags/$g_ver" "libflac-$g_ver.tar.gz"
    execute ./autogen.sh
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} \
        -DINSTALL_{CMAKE_CONFIG_MODULE,MANPAGES,PKGCONFIG_MODULES}=ON -DBUILD_{CXXLIBS,PROGRAMS}=ON \
        -DWITH_{ASM,AVX,FORTIFY_SOURCE,STACK_PROTECTOR}=ON -DWITH_OGG=OFF -DENABLE_64_BIT_WORDS=ON \
        -DBUILD_{DOCS,EXAMPLES,TESTING}=OFF -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'libflac' "$g_ver"
fi

pre_check_ver 'mstorsjo/fdk-aac' '1' 'T'
if build 'libfdk-aac' '2.0.2'; then
    download 'https://gigenet.dl.sourceforge.net/project/opencore-amr/fdk-aac/fdk-aac-2.0.2.tar.gz' 'libfdk-aac-2.0.2.tar.gz'
    execute ./autogen.sh
    execute ./configure --prefix="$workspace" --disable-shared --enable-static --enable-pic
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'libfdk-aac' '2.0.2'
fi
ffmpeg_libraries+=('--enable-libfdk-aac')

pre_check_ver 'knik0/faac' '1' 'R'
g_ver1="${g_ver//er_/}"
g_ver1="${g_ver//\./_}"
g_ver="$(echo "$g_ver" | sed 's/er_//g' | sed 's/_/./g')"
if build 'libfaac' "$g_ver"; then
    download "https://codeload.github.com/knik0/faac/tar.gz/refs/tags/$g_ver1" "libfaac-$g_ver.tar.gz"
    execute ./bootstrap
    execute ./configure --prefix="$workspace" --disable-shared
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'libfaac' "$g_ver"
fi

pre_check_ver 'xiph/ogg' '1' 'T'
if build 'libogg' "$g_ver"; then
    download "https://codeload.github.com/xiph/ogg/tar.gz/refs/tags/v$g_ver" "libogg-$g_ver.tar.gz"
    execute autoreconf -fi
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} \
        -DCPACK_{BINARY_DEB,SOURCE_ZIP}=OFF -DBUILD_{SHARED_LIBS,TESTING}=OFF -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'libogg' "$g_ver"
fi

pre_check_ver 'xiph/vorbis' '1' 'T'
if build 'vorbis' "$g_ver"; then
    download "https://codeload.github.com/xiph/vorbis/tar.gz/refs/tags/v$g_ver" "vorbis-$g_ver.tar.gz"
    execute ./autogen.sh
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} -DBUILD_SHARED_LIBS=OFF \
        -DOGG_{INCLUDE_DIR="$workspace"/include,LIBRARY="$workspace"/lib} -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'vorbis' "$g_ver"
fi
ffmpeg_libraries+=('--enable-libvorbis')

pre_check_ver 'xiph/opus' '1' 'T'
if build 'opus' "$g_ver"; then
    download "https://codeload.github.com/xiph/opus/tar.gz/refs/tags/v$g_ver" "opus-$g_ver.tar.gz"
    execute autoreconf -fis
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} \
        -DBUILD_SHARED_LIBS=OFF -DCPACK_SOURCE_ZIP=OFF -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'opus' "$g_ver"
fi
ffmpeg_libraries+=('--enable-libopus')

pre_check_ver 'hoene/libmysofa' '1' 'T'
if build 'libmysofa' "$g_ver"; then
    download "https://codeload.github.com/hoene/libmysofa/tar.gz/refs/tags/v$g_ver" "libmysofa-$g_ver.tar.gz"
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} -DBUILD_SHARED_LIBS=OFF -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'libmysofa' "$g_ver"
fi
ffmpeg_libraries+=('--enable-libmysofa')

pre_check_ver 'webmproject/libvpx' '1' 'T'
if build 'vpx' '1.13.0'; then
    download 'https://github.com/webmproject/libvpx/archive/refs/tags/v1.13.0.tar.gz' 'libvpx-1.13.0.tar.gz'
    execute ./configure --prefix="$workspace" --disable-unit-tests --disable-shared --disable-examples --as=yasm --enable-vp9-highbitdepth
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'vpx' '1.13.0'
fi
ffmpeg_libraries+=('--enable-libvpx')

if build 'opencore-amr' '0.1.6'; then
    download 'https://netactuate.dl.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-0.1.6.tar.gz'
    execute ./configure --prefix="$workspace" --disable-shared --enable-static
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'opencore-amr' '0.1.6'
fi
ffmpeg_libraries+=('--enable-libopencore-amrnb' '--enable-libopencore-amrwb')

if build 'liblame' '3.100'; then
    download 'https://zenlayer.dl.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz'
    execute ./configure --prefix="$workspace" --disable-shared
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'liblame' '3.100'
fi
ffmpeg_libraries+=('--enable-libmp3lame')

pre_check_ver 'xiph/theora' '1' 'T'
if build 'libtheora' "$g_ver1"; then
    download "https://codeload.github.com/xiph/theora/tar.gz/refs/tags/v$g_ver1" "libtheora-$g_ver1.tar.gz"
    execute ./autogen.sh
    sed 's/-fforce-addr//g' configure > configure.patched
    chmod +x configure.patched
    execute mv configure.patched configure
    execute rm config.guess
    execute curl -A "$user_agent" -Lso config.guess 'https://raw.githubusercontent.com/gcc-mirror/gcc/master/config.guess'
    chmod +x config.guess
    execute ./configure --prefix="$workspace" --disable-{asm,examples,oggtest,spec,shared,vorbistest} \
        --with-{ogg-includes="$workspace"/include,ogg-libraries="$workspace"/lib,vorbis-includes="$workspace"/include,vorbis-libraries="$workspace"/lib}
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'libtheora' "$g_ver1"
fi
ffmpeg_libraries+=('--enable-libtheora')

#
# INSTALL VIDEO TOOLS
#

printf "\n%s\n%s\n%s\n" \
    '==============================================' \
    '            Installing Video Tools            ' \
    '=============================================='

# NEED TO MANUALLY UPDATE THIS REPO FROM TIME TO TIME
if build 'av1' '7d637e1'; then
    download 'https://aomedia.googlesource.com/aom/+archive/7d637e1ccd859f9018ebff88911411685d3a3a2b.tar.gz' 'av1-7d637e1.tar.gz' 'av1'
    mkdir -p "$packages/aom_build"
    cd "$packages/aom_build" || exit 1
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",INSTALL_LIBDIR="$workspace"/lib,BUILD_TYPE=Release} \
        -DCONFIG_{ANALYZER,AV1_TEMPORAL_DENOISING,BIG_ENDIAN,COLLECT_RD_STATS,ENTROPY_STATS}=0 \
        -DCONFIG_{AV1_DECODER,AV1_ENCODER,AV1_HIGHBITDEPTH,DENOISE,DISABLE_FULL_PIXEL_SPLIT_8X8}=1 \
        -DBUILD_SHARED_LIBS=OFF -DENABLE_{CCACHE=1,{EXAMPLES,TESTS}=0} -G Ninja -Wno-dev "$packages"/av1
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'av1' '7d637e1'
fi
ffmpeg_libraries+=('--enable-libaom')

pre_check_ver '198' '2' 'T'
if build 'dav1d' "$g_sver"; then
    download "https://code.videolan.org/videolan/dav1d/-/archive/$g_ver/$g_ver.tar.bz2" "dav1d-$g_sver.tar.bz2"
    extracommands=(-D{enable_tests,logging}'=false')
    execute meson setup build --prefix="$workspace" --libdir="$workspace"/lib --buildtype=release \
        --default-library=static --strip "${extracommands[@]}"
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'dav1d' "$g_sver"
fi
ffmpeg_libraries+=('--enable-libdav1d')

# RAV1E FAILS TO BUILD ON UBUNTU BIONIC
if [ "$VER" != '18.04' ]; then
    pre_check_ver 'xiph/rav1e' '1' 'T'
    if build 'rav1e' "$g_ver"; then
        echo '$ installing RUSTUP'
        curl -sSf --proto '=https' --tlsv1.2 'https://sh.rustup.rs' | sh -s -- -y &>/dev/null
        source "$HOME"/.cargo/env
        if [ -f "$HOME"/.zshrc ]; then
            source "$HOME"/.zshrc
        else
            source "$HOME"/.bashrc
        fi
        rm -fr "$HOME"/.cargo/registry/index/* "$HOME"/.cargo/.package-cache
        execute cargo install --version '0.9.20+cargo-0.71' cargo-c
        download "https://codeload.github.com/xiph/rav1e/tar.gz/refs/tags/v$g_ver" "rav1e-$g_ver.tar.gz"
        execute cargo cinstall --prefix="$workspace" --library-type=staticlib --crt-static --release
        build_done 'rav1e' "$g_ver"
    fi
    ffmpeg_libraries+=("--enable-librav1e")
fi

pre_check_ver 'AOMediaCodec/libavif' '1' 'T'
if build 'avif' "$g_ver"; then
    download "https://codeload.github.com/AOMediaCodec/libavif/tar.gz/refs/tags/v$g_ver" "avif-$g_ver.tar.gz"
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} -DBUILD_SHARED_LIBS=OFF \
        -DAVIF_{CODEC_AOM,CODEC_AOM_DECODE,CODEC_AOM_ENCODE}=ON -DAVIF_{ENABLE_GTEST,ENABLE_WERROR}=OFF -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'avif' "$g_ver"
fi

pre_check_ver 'ultravideo/kvazaar' '1' 'T'
if build 'kvazaar' "$g_ver"; then
    download "https://codeload.github.com/ultravideo/kvazaar/tar.gz/refs/tags/v$g_ver" "kvazaar-$g_ver.tar.gz"
    execute ./autogen.sh
    execute ./configure --prefix="$workspace" --disable-shared
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'kvazaar' "$g_ver"
fi
ffmpeg_libraries+=('--enable-libkvazaar')

git_ver_fn '76' '2' 'T'
if build 'libdvdread' "$g_ver1"; then
    download "https://code.videolan.org/videolan/libdvdread/-/archive/$g_ver1/libdvdread-$g_ver1.tar.bz2"
    execute autoreconf -fi
    execute ./configure --prefix="$workspace" --disable-{apidoc,shared}
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'libdvdread' "$g_ver1"
fi

git_ver_fn '363' '2' 'T'
if build 'udfread' "$g_ver1"; then
    download "https://code.videolan.org/videolan/libudfread/-/archive/$g_ver1/libudfread-$g_ver1.tar.bz2"
    execute autoreconf -fi
    execute ./configure --prefix="$workspace" --disable-shared
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'udfread' "$g_ver1"
fi

git_ver_fn '206' '2' 'T'
if build 'libbluray' "$g_ver1"; then
    download "https://code.videolan.org/videolan/libbluray/-/archive/$g_ver1/$g_ver1.tar.gz" "libbluray-$g_ver1.tar.gz"
    execute autoreconf -fi
    execute ./configure --prefix="$workspace" --disable-shared --without-libxml2
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'libbluray' "$g_ver1"
fi
unset JAVA_HOME
ffmpeg_libraries+=('--enable-libbluray')

pre_check_ver 'mediaarea/zenLib' '1' 'T'
if build 'zenlib' "$g_ver"; then
    download "https://codeload.github.com/MediaArea/ZenLib/tar.gz/refs/tags/v$g_ver" "zenlib-$g_ver.tar.gz"
    cd Project/GNU/Library || exit 1
    execute ./autogen.sh
    execute ./configure --prefix="$workspace" --disable-shared
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'zenlib' "$g_ver"
fi

pre_check_ver 'MediaArea/MediaInfoLib' '1' 'T'
if build 'mediainfolib' "$g_ver"; then
    download "https://codeload.github.com/MediaArea/MediaInfoLib/tar.gz/refs/tags/v$g_ver" "mediainfolib-$g_ver.tar.gz"
    cd Project/GNU/Library || exit 1
    execute ./autogen.sh
    execute ./configure --prefix="$workspace" --disable-shared
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'mediainfolib' "$g_ver"
fi

pre_check_ver 'MediaArea/MediaInfo' '1' 'T'
if build 'mediainfocli' "$g_ver"; then
    download "https://codeload.github.com/MediaArea/MediaInfo/tar.gz/refs/tags/v$g_ver" "mediainfocli-$g_ver.tar.gz"
    cd Project/GNU/CLI || exit 1
    execute ./autogen.sh
    execute ./configure --prefix="$workspace" --enable-staticlibs
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'mediainfocli' "$g_ver"
fi

pre_check_ver 'georgmartius/vid.stab' '1' 'T'
if build 'vid-stab' "$g_ver"; then
    download "https://codeload.github.com/georgmartius/vid.stab/tar.gz/refs/tags/v$g_ver" "vid-stab-$g_ver.tar.gz"
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} -DBUILD_SHARED_LIBS=OFF -DUSE_OMP=ON -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'vid-stab' "$g_ver"
fi
ffmpeg_libraries+=('--enable-libvidstab')

pre_check_ver 'dyne/frei0r' '1' 'T'
if build 'frei0r' "$g_ver"; then
    download "https://codeload.github.com/dyne/frei0r/tar.gz/refs/tags/v$g_ver" "frei0r-$g_ver.tar.gz"
    which gcc-ranlib &>/dev/null && gcc_rlib="$(type -P gcc-ranlib)"
    which gcc-ranlib-11 &>/dev/null && gcc_rlib="$(type -P gcc-ranlib-11)"
    which gcc-ranlib-12 &>/dev/null && gcc_rlib="$(type -P gcc-ranlib-12)"
    which gcc-ranlib-13 &>/dev/null && gcc_rlib="$(type -P gcc-ranlib-13)"
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release,CXX_{COMPILER_RANLIB="$gcc_rlib",FLAGS_DEBUG=-g},EXPORT_COMPILE_COMMANDS=ON} \
        -DBUILD_SHARED_LIBS=OFF -DWITHOUT_OPENCV=OFF -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'frei0r' "$g_ver"
fi
ffmpeg_libraries+=('--enable-frei0r')

pre_check_ver 'GPUOpen-LibrariesAndSDKs/AMF' '1' 'T'
g_sver="$(echo "$g_ver" | sed -E 's/^\.//g')"
if build 'amf' "$g_sver"; then
    download "https://codeload.github.com/GPUOpen-LibrariesAndSDKs/AMF/tar.gz/refs/tags/v$g_ver" "amf-$g_sver.tar.gz"
    execute rm -fr "$workspace"/include/AMF
    execute mkdir -p "$workspace"/include/AMF
    execute cp -fr "$packages"/amf-"$g_sver"/amf/public/include/* "$workspace"/include/AMF
    build_done 'amf' "$g_sver"
fi
ffmpeg_libraries+=('--enable-amf')

pre_check_ver 'gpac/gpac' '1' 'T'
if build 'gpac' "$g_ver"; then
    download "https://codeload.github.com/gpac/gpac/tar.gz/refs/tags/v$g_ver" "gpac-$g_ver.tar.gz"
    execute ./configure --prefix="$workspace" --enable-gprof --static-{bin,modules} --extra-cflags="${cflag}S"
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'gpac' "$g_ver"
fi

pre_check_ver 'openvisualcloud/svt-hevc' '1' 'T'
if build 'svt-hevc' "$g_ver"; then
    download "https://codeload.github.com/OpenVisualCloud/SVT-HEVC/tar.gz/refs/tags/v$g_ver" "svt-hevc-$g_ver.tar.gz"
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} \
        -DBUILD_SHARED_LIBS=OFF -DYASM_EXE="$workspace"/bin/yasm -DNATIVE=ON -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'svt-hevc' "$g_ver"
fi

# UPDATE THIS FROM TIME TO TIME
git_ver_fn '24327400' '3' 'T'
if build 'svt-av1' '1.4.1'; then
    download 'https://gitlab.com/AOMediaCodec/SVT-AV1/-/archive/v1.4.1/SVT-AV1-v1.4.1.tar.bz2' 'svt-av1-1.4.1.tar.bz2'
    execute cmake -S . -B Build/linux -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} \
        -DCLOG_LOG_TO_STDIO=OFF -DBUILD_SHARED_LIBS=OFF -G Ninja -Wno-dev
    execute ninja -C Build/linux
    execute ninja -C Build/linux install
    execute cp -f Build/linux/SvtAv1Enc.pc "$workspace"/lib/pkgconfig
    execute cp -f Build/linux/SvtAv1Dec.pc "$workspace"/lib/pkgconfig
    build_done 'svt-av1' '1.4.1'
fi
ffmpeg_libraries+=('--enable-libsvtav1')

git_ver_fn '536' '2' 'B'
if build 'x264' "$g_sver"; then
    download "https://code.videolan.org/videolan/x264/-/archive/$g_ver/x264-$g_ver.tar.bz2" "x264-$g_sver.tar.bz2"
    execute ./configure --prefix="$workspace" --bit-depth=all --chroma-format=all --enable-{gprof,lto,static,strip}
    execute make "-j$cpu_threads"
    execute make install
    execute make install-lib-static
    execute make distclean
    build_done 'x264' "$g_sver"
fi
ffmpeg_libraries+=('--enable-libx264')

if build 'x265' '8f18e3a'; then
    download 'https://bitbucket.org/multicoreware/x265_git/get/8f18e3ad32684eee95e885e718655f93951128c3.tar.bz2' 'x265-8f18e3a.tar.bz2'
    # download 'https://bitbucket.org/multicoreware/x265_git/downloads/x265_3.5.tar.gz' 'x265-3.5.tar.gz'
    cd build/linux || exit 1
    rm -fr {8,10,12}bit 2>/dev/null
    mkdir -p {8,10,12}bit
    cd 12bit || exit 1
    echo '$ making 12bit binaries'
    execute cmake ../../../source -DCMAKE_INSTALL_PREFIX="$workspace" -DHIGH_BIT_DEPTH=ON -DEXPORT_C_API=OFF \
        -DENABLE_SHARED=OFF -DENABLE_CLI=OFF -DMAIN12=ON -DENABLE_LIBVMAF=OFF -DENABLE_PIC=ON -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads"
    echo '$ making 10bit binaries'
    cd ../10bit || exit 1
    execute cmake ../../../source -DCMAKE_INSTALL_PREFIX="$workspace" -DENABLE_HDR10_PLUS=ON -DHIGH_BIT_DEPTH=ON -DEXPORT_C_API=OFF \
        -DENABLE_SHARED=OFF -DENABLE_CLI=OFF -DENABLE_LIBVMAF=OFF -DENABLE_PIC=ON -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads"
    echo '$ making 8bit binaries'
    cd ../8bit || exit 1
    ln -sf ../10bit/libx265.a libx265_main10.a
    ln -sf ../12bit/libx265.a libx265_main12.a
    execute cmake ../../../source -DCMAKE_INSTALL_PREFIX="$workspace" -DEXTRA_LIB='x265_main10.a;x265_main12.a' \
        -DHIGH_BIT_DEPTH=ON -DEXTRA_LINK_FLAGS=-L. -DLINKED_10BIT=ON -DLINKED_12BIT=ON -DENABLE_LIBVMAF=OFF -DENABLE_PIC=ON -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads"
    mv libx265.a libx265_main.a

    execute ar -M <<EOF
CREATE libx265.a
ADDLIB libx265_main.a
ADDLIB libx265_main10.a
ADDLIB libx265_main12.a
SAVE
END
EOF

    execute ninja "-j$cpu_threads" install

    if [ -n "${LDEXEFLAGS}" ]; then
        sed -i.backup 's/lgcc_s/lgcc_eh/g' "$workspace"/lib/pkgconfig/x265.pc
    fi

    if [ -f "$workspace"/lib/libx265.so.208 ]; then
        sudo cp -f "$workspace"/lib/libx265.so.208 /usr/lib/x86_64-linux-gnu
        sudo ln -fs /usr/lib/x86_64-linux-gnu/libx265.so.208 /usr/lib/x86_64-linux-gnu/libx265.so
    else
        echo
        read -p "The sript could not located the file \"$workspace/lib/libx265.so.208\" and needs to be updated. This error is located in the 'x265' build."
        echo
    fi

    build_done 'x265' '8f18e3a'
fi
ffmpeg_libraries+=('--enable-libx265')

# Vaapi doesn't work well with static links FFmpeg.
if [ -z "${LDEXEFLAGS}" ]; then
    # If the libva development SDK is installed, enable vaapi.
    if library_exists 'libva'; then
        if build 'vaapi' '1'; then
            build_done 'vaapi' '1'
        fi
        ffmpeg_libraries+=('--enable-vaapi')
    fi
fi

if [ -n "$iscuda" ]; then
    if build 'nv-codec-headers' '12.0.16.0'; then
        download 'https://github.com/FFmpeg/nv-codec-headers/releases/download/n12.0.16.0/nv-codec-headers-12.0.16.0.tar.gz'
        execute make "-j$cpu_threads"
        execute make PREFIX="$workspace" install
        build_done 'nv-codec-headers' '12.0.16.0'
    fi
    CFLAGS+=' -I/usr/local/cuda/include'
    LDFLAGS+=' -L/usr/local/cuda/lib64'
    ffmpeg_libraries+=(--enable-{cuda-nvcc,cuda-llvm,cuvid,nvenc})

    if [ -z "${LDEXEFLAGS}" ]; then
        ffmpeg_libraries+=('--enable-libnpp')
    fi

    # GET THE GPU ARCHITECTURE
    # https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards
    gpu_arch_fn
    ffmpeg_libraries+=("--nvccflags=-gencode arch=$gpu_arch")
fi

pre_check_ver 'Haivision/srt' '1' 'R'
if build 'srt' "$g_ver"; then
    download "https://codeload.github.com/Haivision/srt/tar.gz/refs/tags/v$g_ver" "srt-$g_ver.tar.gz"
    export OPENSSL_ROOT_DIR="$workspace"
    export OPENSSL_LIB_DIR="$workspace"/lib
    export OPENSSL_INCLUDE_DIR="$workspace"/include
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} -DBUILD_SHARED_LIBS=OFF \
        -DENABLE_{APPS=OFF,SHARED=OFF,STATIC=ON} -DUSE_STATIC_LIBSTDCXX=ON -G Ninja -Wno-dev
    execute ninja -C build "-j$cpu_threads"
    execute ninja -C build "-j$cpu_threads" install
    if [ -n "${LDEXEFLAGS}" ]; then
        sed -i.backup 's/-lgcc_s/-lgcc_eh/g' "$workspace"/lib/pkgconfig/srt.pc
    fi
    build_done 'srt' "$g_ver"
fi
ffmpeg_libraries+=('--enable-libsrt')

git_ver_fn '12073082' '3' 'T'
if build 'vvc' 'git'; then
    download_git 'https://gitlab.com/m-ab-s/VVCSoftware_VTM.git' 'vvc-git'
    patch_fn
    execute git apply -3 --check --ignore-space-change --ignore-whitespace vvc_patch1.patch
    execute git apply -3 --check --ignore-space-change --ignore-whitespace vvc_patch2.patch
    execute git apply -3 --check --ignore-space-change --ignore-whitespace vvc_patch3.patch
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} -DBUILD_{SHARED_LIBS=OFF,STATIC=ON} -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads" -C build
    execute cp -f bin/ninja/*/*/release/* "$workspace"/bin
    build_done 'vvc' 'git'
fi

pre_check_ver 'avisynth/avisynthplus' '1' 'T'
if build 'avisynth' "$g_ver"; then
    download "https://codeload.github.com/AviSynth/AviSynthPlus/tar.gz/refs/tags/v$g_ver" "avisynth-$g_ver.tar.gz"
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} -DHEADERS_ONLY=ON -G 'Unix Makefiles' -Wno-dev
    execute make "-j$cpu_threads" -C build VersionGen install
    build_done 'avisynth' "$g_ver"
fi
ffmpeg_libraries+=('--enable-avisynth')

pre_check_ver 'vapoursynth/vapoursynth' '1' 'R'
if build 'vapoursynth' "$g_ver"; then
    download "https://codeload.github.com/vapoursynth/vapoursynth/tar.gz/refs/tags/$g_ver" "vapoursynth-$g_ver.tar.gz"
    rm_pip_lock="$(find /usr/lib/python3* -type f -name EXTERNALLY-MANAGED)"
    if [ -n "$rm_pip_lock" ]; then
        sudo rm "$rm_pip_lock"
    fi
    execute pip install Cython==0.29.36
    execute ./autogen.sh
    execute ./configure --prefix="$workspace" --disable-shared CPPFLAGS="-I$workspace/include" CXXFLAGS="$CXXFLAGS"
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
    build_done 'vapoursynth' "$g_ver"
fi
ffmpeg_libraries+=('--enable-vapoursynth')

pre_check_ver 'cyanreg/cyanrip' '1' 'T'
if build 'cyanrip' "$g_ver"; then
    download "https://codeload.github.com/cyanreg/cyanrip/tar.gz/refs/tags/v$g_ver" "cyanrip-$g_ver.tar.gz"
    execute meson setup build --prefix="$workspace" --libdir="$workspace"/lib --buildtype=release --default-library=static --strip
    execute ninja -C build "-j$cpu_threads"
    execute ninja -C build "-j$cpu_threads" install
    build_done 'cyanrip' "$g_ver"
fi

if build 'libgav1' 'git'; then
    # version 1.3.0, 1.2.4, and 1.2.3 fail to build successfully
    download_git 'https://chromium.googlesource.com/codecs/libgav1' 'libgav1-git'
    mkdir -p 'libgav1_build'
    execute git clone -b 20220623.0 --depth 1 https://github.com/abseil/abseil-cpp.git third_party/abseil-cpp
    execute cmake -B libgav1_build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release,EXPORT_COMPILE_COMMANDS=ON,INSTALL_SBINDIR=sbin} \
        -DBUILD_SHARED_LIBS=OFF -DABSL_{ENABLE_INSTALL,PROPAGATE_CXX_STD}=ON -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads" -C libgav1_build
    execute ninja "-j$cpu_threads" -C libgav1_build install
    build_done 'libgav1' 'git'
fi

if build 'xvidcore' '1.3.7'; then
    download 'https://downloads.xvid.com/downloads/xvidcore-1.3.7.tar.bz2'
    cd build/generic || exit 1
    execute ./configure --prefix="$workspace"
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean

    if [ -f "$workspace"/lib/libxvidcore.4.dylib ]; then
        rm "$workspace"/lib/libxvidcore.4.dylib
    fi

    if [ -f "$workspace"/lib/libxvidcore.so ]; then
        rm "$workspace"/lib/libxvidcore.so*
    fi

    ln -fs build/libxvidcore.so.4.3 "$workspace"/lib/libxvidcore.so.4@
    ln -fs build/libxvidcore.so.4@ "$workspace"/lib/libxvidcore.so

    build_done 'xvidcore' '1.3.7'
fi
ffmpeg_libraries+=('--enable-libxvid')

#
# IMAGE LIBRARIES
#

printf "\n%s\n%s\n%s\n" \
    '==============================================' \
    '            Installing Image Tools            ' \
    '=============================================='

pre_check_ver 'strukturag/libheif' '1' 'T'
if build 'libheif' "$g_ver"; then
    download "https://codeload.github.com/strukturag/libheif/tar.gz/refs/tags/v$g_ver" "libheif-$g_ver.tar.gz"
    if [[ "$VER" == '18.04' ]] || [[ "$VER" == '20.04' ]]; then
        pixbuf_var=OFF
    elif [[ "$VER" == '22.04' ]] || [[ "$VER" == '22.10' ]] || [[ "$VER" == '23.04' ]] || [[ "$VER" == '10' ]] || [[ "$VER" == '11' ]] || [[ "$VER" == '12' ]]; then
        pixbuf_var=ON
    fi
    third_party="$packages/libheif-$g_ver/third-party"
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} -DBUILD_SHARED_LIBS=OFF -G Ninja -Wno-dev \
        -DWITH_{AOM_DECODER,AOM_ENCODER,DAV1D,LIBDE265,LIBSHARPYUV,RAV1E,RAV1E_PLUGIN,SvtEnc,SvtEnc_PLUGIN,X265}=ON -DWITH_GDK_PIXBUF="$pixbuf_var" \
        -DWITH_{EXAMPLES,REDUCED_VISIBILITY}=OFF -DSvtEnc_{INCLUDE_DIR="$workspace"/include,LIBRARY="$workspace"/lib} \
        -DAOM_{INCLUDE_DIR="$workspace"/include,LIBRARY="$workspace"/lib} -DDAV1D_{INCLUDE_DIR="$workspace"/include,LIBRARY="$workspace"/lib} \
        -DRAV1E_{INCLUDE_DIR="$workspace"/include/rav1e,LIBRARY="$workspace"/lib} -DLIBDE265_{INCLUDE_DIR="$workspace"/include,LIBRARY="$workspace"/lib} \
        -DX265_{INCLUDE_DIR="$workspace"/include,LIBRARY="$workspace"/lib} -DLIBSHARPYUV_{INCLUDE_DIR="$workspace"/include/webp,LIBRARY="$workspace"/lib}
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'libheif' "$g_ver"
fi

pre_check_ver 'uclouvain/openjpeg' '1' 'T'
if build 'openjpeg' "$g_ver"; then
    download "https://codeload.github.com/uclouvain/openjpeg/tar.gz/refs/tags/$g_ver" "openjpeg-$g_ver.tar.gz"
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} -DBUILD_{TESTING,SHARED_LIBS}=OFF -DBUILD_THIRDPARTY=ON \
        -DCPACK_{BINARY_DEB,BINARY_FREEBSD,BINARY_IFW,BINARY_NSIS,BINARY_RPM,BINARY_TBZ2,BINARY_TXZ,SOURCE_RPM,SOURCE_ZIP}=ON \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja -Wno-dev
    execute ninja "-j$cpu_threads" -C build
    execute ninja "-j$cpu_threads" -C build install
    build_done 'openjpeg' "$g_ver"
fi
ffmpeg_libraries+=('--enable-libopenjpeg')

#
# BUILD FFMPEG
#

printf "\n%s\n%s\n%s\n" \
    '==============================================' \
    '              Installing FFmpeg               ' \
    '=============================================='

if build 'ffmpeg' "$ffmpeg_ver"; then
    download "https://www.ffmpeg.org/releases/ffmpeg-$ffmpeg_ver.tar.xz"
    mkdir build
    cd build || exit 1
    ../configure                                  \
        "${ffmpeg_libraries[@]}"                  \
        --prefix="$workspace"                     \
        --arch="$(uname -m)"                      \
        --cpu="$((cpu_threads / 2))"              \
        --disable-debug                           \
        --disable-doc                             \
        --disable-shared                          \
        --enable-ffnvcodec                        \
        --enable-gpl                              \
        --enable-ladspa                           \
        --enable-libbs2b                          \
        --enable-libcaca                          \
        --enable-libcdio                          \
        --enable-libflite                         \
        --enable-libgme                           \
        --enable-libmodplug                       \
        --enable-libpulse                         \
        --enable-libshine                         \
        --enable-libsmbclient                     \
        --enable-libsnappy                        \
        --enable-libsoxr                          \
        --enable-libspeex                         \
        --enable-libtwolame                       \
        --enable-libv4l2                          \
        --enable-libvo-amrwbenc                   \
        --enable-lto                              \
        --enable-nonfree                          \
        --enable-opengl                           \
        --enable-pic                              \
        --enable-pthreads                         \
        --enable-small                            \
        --enable-static                           \
        --enable-version3                         \
        --extra-cflags="${cflag}S"                  \
        --extra-cxxflags="$CXXFLAGS"              \
        --extra-ldexeflags="${LDEXEFLAGS}"          \
        --extra-ldflags="$LDFLAGS"                \
        --extra-libs="$EXTRALIBS"                 \
        --extra-version="$EXTRA_VERSION"          \
        --pkgconfigdir="$workspace"/lib/pkgconfig \
        --pkg-config-flags='--static'             \
        --strip="$(type -P strip)"
    execute make "-j$cpu_threads"
    execute make install
    execute make distclean
fi

# EXECUTE THE LDCONFIG COMMAND TO ENSURE THAT ALL LIBRARY CHANGES ARE DETECTED BY FFMPEG
sudo ldconfig 2>/dev/null

# DISPLAY FFMPEG'S VERSION
if [ -f "$workspace"/bin/ffmpeg ]; then
    ff_ver_fn
else
    fail_fn "Failed to find the binary file: $workspace/bin/ffmpeg"
fi

# MAKE SURE ALL OF THE FILES WERE COMPILED CORRECTLY
ffmpeg_install_test
# PROMPT THE USER TO INSTALL THE FFMPEG BINARIES SYSTEM-WIDE
ffmpeg_install_choice
# PROMPT THE USER TO CLEAN UP THE BUILD FILES
cleanup_fn
# SHOW EXIT MESSAGE
exit_fn
