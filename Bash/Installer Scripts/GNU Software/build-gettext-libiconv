#!/usr/bin/env bash

###########################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/edit/main/Bash/Installer%20Scripts/GNU%20Software/build-gettext-libiconv
##
##  Purpose: Build GNU gettext and iconv
##
##  Updated: 08.31.23
##
##  Fixed: Variable error
##
##  Script version: 1.3
##
###########################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET VARIABLES
#

script_ver=1.3
archive_dir1=libiconv-1.17
archive_dir2=gettext-0.22
archive_url1=https://ftp.gnu.org/gnu/libiconv/libiconv-1.17.tar.gz
archive_url2=https://ftp.gnu.org/gnu/gettext/gettext-0.22.tar.lz
archive_ext1="${archive_url1//*.}"
archive_ext2="${archive_url2//*.}"
cwd="${PWD}"/gettext-libiconv-build-script
install_prefix=/usr/local
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36'

printf "%s\n%s\n\n" \
    "Iconv + GetText Build Script - v${script_ver}" \
    '==============================================='

#
# CREATE OUTPUT DIRECTORY
#

if [ ! -d "${cwd}/${archive_dir1}" ] || [ ! -d "${cwd}/${archive_dir2}" ]; then
    mkdir -p "${cwd}/${archive_dir1}" "${cwd}/${archive_dir2}" 2>/dev/null
fi

#
# SET THE C+CPP COMPILERS
#

export CC=gcc CXX=g++

#
# EXPORT COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O2 -ffunction-sections -fdata-sections -pipe -march=native'

#
# SET THE PATH VARIABLE
#

PATH="\
/usr/lib/ccache:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

#
# SET THE PKG_CONFIG_PATH VARIABLE
#

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/x86_64-linux-gnu/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n" 'The script has completed.'
    exit 0
}

cleanup_fn()
{
    local choice

    printf "\n%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "${choice}" in
        1)      sudo rm -fr "${cwd}";;
        2)      echo;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

fail_fn()
{
    printf "%s\n\n" "${1}"
    exit 1
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs_fn()
{
    pkgs=("${1}" autoconf autoconf-archive autogen automake binutils bison build-essential ccache
          libc6-dev libintl-perl libtool libtool-bin libxml2-dev lzip m4 nasm pkg-config yasm)

    for i in ${pkgs[@]}
    do
        missing_pkg="$(sudo dpkg -l | grep -o "${i}")"

        if [ -z "${missing_pkg}" ]; then
            missing_pkgs+=" ${i}"
        fi
    done

    if [ -n "${missing_pkgs}" ]; then
        sudo apt -y install ${missing_pkgs}
        clear
    fi
    unset i missing_pkgs
}

#
# DETERMINE WHAT VERSION OF LINUX WE ARE ON
#

os_ver_check_fn()
{
    case "${VER}" in
            12|11|10)               pkgs_fn 'libticonv-dev';;
    esac
}

#
# GET CURRENT OS INFORMATION
#

if [ -f /etc/os-release ]; then
    source /etc/os-release
    OS="${NAME}"
    VER="${VERSION_ID}"
elif "$(type -P lsb_release)" &>/dev/null; then
    OS="$(lsb_release -si)"
    VER="$(lsb_release -sr)"
elif [ -f /etc/lsb-release ]; then
    source /etc/lsb-release
    OS="${DISTRIB_ID}"
    VER="${DISTRIB_RELEASE}"
elif [ -f /etc/debian_version ]; then
    OS=Debian
    VER="$(cat /etc/debian_version)"
else
    OS="$(uname -s)"
    VER="$(uname -r)"
fi

#
# TEST THE OS AND ITS VERSION
#

case "${OS}" in
    Debian*)            os_ver_check_fn;;
    Ubuntu)             echo;;
    *)                  fail_fn 'Could not detect the OS architecture.';;
esac

#
# GET PC TYPE
#

curl -A "${user_agent}" -Lso "${cwd}/config.guess" 'https://raw.githubusercontent.com/gcc-mirror/gcc/master/config.guess'
chmod +x "${cwd}/config.guess"
pc_type="$(source "${cwd}/config.guess")"

#
# DOWNLOAD THE ARCHIVE FILES
#

if [ ! -f "${cwd}/${archive_dir1}.tar.gz" ]; then
    wget -U "${user_agent}" -cO "${cwd}/${archive_dir1}.${archive_ext1}" "${archive_url1}"
fi

if [ ! -f "${cwd}/${archive_dir2}.tar.lz" ]; then
    wget -U "${user_agent}" -cO "${cwd}/${archive_dir2}.${archive_ext2}" "${archive_url2}"
fi

#
# CREATE OUTPUT DIRECTORIES
#

if [ -d "${cwd}/${archive_dir1}" ] || [ -d "${cwd}/${archive_dir2}" ]; then
    sudo rm -fr "${cwd}/${archive_dir1}" "${cwd}/${archive_dir2}"
fi
mkdir -p "${cwd}/${archive_dir1}" "${cwd}/${archive_dir2}"

#
# EXTRACT THE ARCHIVE FILES
#

if ! tar -xf "${cwd}/${archive_dir1}.${archive_ext1}" -C "${cwd}/${archive_dir1}" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: ${cwd}/${archive_dir1}.${archive_ext1}"
fi
if ! tar -xf "${cwd}/${archive_dir2}.${archive_ext2}" -C "${cwd}/${archive_dir2}" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: ${cwd}/${archive_dir2}.${archive_ext2}"
fi

#
# START BUILDING FROM SOURCE
#

printf "\n%s\n%s\n\n" \
    'Building libiconv - v1.17' \
    '==============================================='

cd "${cwd}/${archive_dir1}" || exit 1
mkdir builddir
cd builddir || exit 1
../configure --{build,host}="${pc_type}"  \
             --prefix="${install_prefix}" \
             --disable-nls                \
             --enable-relocatable         \
             --enable-static              \
             --with-pic                   \
             --with-libiconv-prefix=/usr  \
             --with-libintl-prefix=/usr   \
             CC="${CC}"                   \
             CPPFLAGS='-I/usr/local/include -I/usr/include'
make "-j$(nproc --all)"
if ! sudo make install; then
    printf "\n%s\n\n" "Failed to install: ${archive_dir1}."
    exit 1
fi
sudo libtool --finish /usr/local/lib

printf "\n%s\n%s\n\n" \
    'Building gettext - v0.22' \
    '==============================================='

cd "${cwd}/${archive_dir2}" || exit 1
autoupdate
./autogen.sh
mkdir builddir
cd builddir || exit 1
../configure --{build,host}="${pc_type}"  \
             --prefix="${install_prefix}" \
             --disable-shared             \
             --enable-static              \
             --with-libiconv-prefix=/usr  \
             --with-libxml2-prefix=/usr   \
             --with-pic                   \
             CC="${CC}"                   \
             CXX="${CXX}"                 \
             LIBS="$(pkg-config --libs ticonv)"
make "-j$(nproc --all)"
if ! sudo make install; then
    printf "\n%s\n\n" "Failed to install: ${archive_dir2}."
    exit 1
fi
sudo libtool --finish /usr/local/lib

# CLEANUP FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn
