#!/bin/bash

clear

#
# SET PROGRAM NAME + VERSION
#

script_ver=1.0
archive_dir=make-4.4.1
archive_url=https://ftp.gnu.org/gnu/make/make-4.4.1.tar.lz
archive_ext="${archive_url//*.}"
cwd="$PWD"/make-build-script

printf "\n%s\n%s\n\n" \
    "Make Build Script - v$script_ver" \
    '==============================================='

#
# CREATE OUTPUT DIRECTORY
#

mkdir -p "$cwd"

#
# SET THE C+CPP COMPILERS
#

export CC=gcc CXX=g++

#
# EXPORT COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O3 -march=native'

#
# EXPORT PKG_CONFIG_PATH
#

PKG_CONFIG_PATH="\
$workspace/lib64/pkgconfig:\
$workspace/lib/pkgconfig:\
$workspace/lib/x86_64-linux-gnu/pkgconfig:\
$workspace/share/pkgconfig:\
$workspace/usr/lib/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/x86_64-linux-gnu/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/open-coarrays/openmpi/pkgconfig:\
/usr/lib/x86_64-linux-gnu/openmpi/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/share/pkgconfig\
"

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n" 'The script has completed.'
    exit 0
}


fail_fn()
{
    printf "%s\n\n" "$1"
    exit 1
}

cleanup_fn()
{
    local choice

    printf "\n%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "$choice" in
        1)      sudo rm -fr "$cwd";;
        2)      echo;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(autoconf autogen automake binutils build-essential ccache cmake curl git guile-3.0-dev libdmalloc-dev libdmalloc5 libgmp-dev
      libintl-perl libmpfr-dev libreadline-dev libsigsegv-dev libtool libtool-bin lzip m4 nasm ninja-build texinfo zlib1g-dev yasm)

for i in ${pkgs[@]}
do
    missing_pkg="$(dpkg -l | make $i)"

    if [ -z "$missing_pkg" ]; then
        missing_pkgs+=" $i"
    fi
done

if [ -n "$missing_pkgs" ]; then
    sudo apt -y install $missing_pkgs
    clear
fi

#
# GET PC TYPE
#

curl -Lso "$cwd/config.guess" 'https://raw.githubusercontent.com/gcc-mirror/gcc/master/config.guess'
chmod +x "$cwd/config.guess"
pc_type="$(source "$cwd/config.guess")"

#
# DOWNLOAD ARCHIVE FILE
#

archive_name="$archive_dir.tar.$archive_ext"

if [ ! -f "$cwd/$archive_name" ]; then
    curl -Lso "$cwd/$archive_name" "$archive_url"
fi

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "$cwd/$archive_dir" ]; then
    sudo rm -fr "$cwd/$archive_dir"
fi
mkdir -p "$cwd/$archive_dir/build"

#
# EXTRACT ARCHIVE FILES
#

if ! tar -xf "$cwd/$archive_name" -C "$cwd/$archive_dir" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: $cwd/$archive_name"
    exit 1
fi

#
# BUILD PROGRAM FROM SOURCE
#

cd "$cwd/$archive_dir" || exit 1
autoreconf -fi
cd build || exit 1
../configure --prefix=/usr/local                \
             --{build,host}="$pc_type"          \
             --disable-nls                      \
             --enable-year2038                  \
             --with-dmalloc                     \
             --with-guile                       \
             --with-libiconv-prefix=/usr/local  \
             --with-libintl-prefix=/usr         \
             PKG_CONFIG="$(type -P pkg-config)" \
             PKG_CONFIG_PATH="$PKG_CONFIG_PATH"
make "-j$(nproc --all)"
if ! sudo make install; then
    make distclean
    printf "\n%s\n\n" 'Failed to install make.'
    exit 1
fi

# CLEANUP FILES
cleanup_fn
# SHOW EXIT MESSAGE
exit_fn
