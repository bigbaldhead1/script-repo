#!/usr/bin/env bash

########################################################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/edit/main/util-linux/Installer%20Scripts/GNU%20Software/build-util-linux
##
##  Purpose: Build GNU util-linux
##
##  Updated: 08.31.23
##
##  Script version: 1.1
##
########################################################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET VARIABLES
#

script_ver=1.1
archive_dir=util-linux-2.39.2
archive_url=https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.39/util-linux-2.39.2.tar.xz
archive_ext="${archive_url//*.}"
cwd="${PWD}"/util-linux-build-script
install_dir=/usr/local
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36'
repo=https://github.com/slyfox1186/script-repo

printf "%s\n%s\n\n" \
    "Util-Linux Build Script - v${script_ver}" \
    '==============================================='

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}" ]; then
    sudo rm -fr "${cwd}"
fi
mkdir -p "${cwd}"

#
# SET THE C+CPP COMPILERS
#

export CC=gcc CXX=g++

#
# SET COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O2 -ffunction-sections -fdata-sections -pipe -march=native'

#
# SET THE PATH VARIABLE
#

PATH="\
/usr/lib/ccache:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

#
# SET THE PKG_CONFIG_PATH VARIABLE
#

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/x86_64-linux-gnu/pkgconfig:\
/usr/lib/dbus-1.0/debug-build/lib/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n\n" \
        'Make sure to star this repository to show your support!' \
        "${repo}"
    exit 0
}

fail_fn()
{
    printf "\n%s\n\n%s\n\n" \
        "${1}" \
        "To report a bug create an issue at: ${repo}/issues"
    exit 1
}

cleanup_fn()
{
    local choice

    printf "%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "${choice}" in
        1)      sudo rm -fr "${cwd}";;
        2)      echo;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

installed() { return $(dpkg-query -W -f '${Status}\n' "${1}" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}'); }

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(asciidoc autoconf autoconf-archive autogen automake binutils
      bison build-essential bzip2 ccache curl libaudit-dev libc6-dev libintl-perl
      libpth-dev libselinux1-dev libtool libtool-bin lzip lzma-dev m4 nasm po4a texinfo
      yasm zlib1g-dev)

for pkg in ${pkgs[@]}
do
    if ! installed "${pkg}"; then
        missing_pkgs+=" ${pkg}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    echo '$ Installing missing packages'
    echo
    for i in "${missing_pkgs}"
        do
            if ! sudo apt -y install ${i}; then
                fail_fn 'Failed to run APT package manager.'
            fi
        done
else
    echo '$ The packages are already installed.'
    echo
fi

#
# GET PC TYPE
#

curl -A "${user_agent}" -Lso "${cwd}/config.guess" 'https://raw.githubusercontent.com/gcc-mirror/gcc/master/config.guess'
chmod +x "${cwd}/config.guess"
pc_type="$(source "${cwd}/config.guess")"

#
# DOWNLOAD THE ARCHIVE FILE
#

archive_name="${archive_dir}.tar.${archive_ext}"

if [ ! -f "${cwd}/${archive_name}" ]; then
    curl -A "${user_agent}" -Lso "${cwd}/${archive_name}" "${archive_url}"
fi

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}/${archive_dir}" ]; then
    sudo rm -fr "${cwd}/${archive_dir}"
fi
mkdir -p "${cwd}/${archive_dir}/build"

#
# EXTRACT ARCHIVE FILES
#

if ! tar -xf "${cwd}/${archive_name}" -C "${cwd}/${archive_dir}" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: ${cwd}/${archive_name}"
    exit 1
fi

#
# BUILD PROGRAM FROM SOURCE
#

extralists=(blkid,fdisk,losetup,mount,nsenter,sfdisk,umount,unshare)

cd "${cwd}/${archive_dir}" || exit 1
./autogen.sh
cd build || exit 1
../configure --prefix="${install_dir}"                               \
             --{build,host}="${pc_type}"                             \
             --disable-nls                                           \
             --disable-werror                                        \
             --enable-line                                           \
             --enable-newgrp                                         \
             --enable-static-programs="${extralists[@]}"             \
             --enable-ubsan                                          \
             --enable-usrdir-path                                    \
             --enable-write                                          \
             --with-audit                                            \
             --with-libiconv-prefix=/usr                             \
             --with-libintl-prefix=/usr                              \
             --with-pic                                              \
             --with-pkgconfigdir=/usr/lib/x86_64-linux-gnu/pkgconfig \
             --with-selinux                                          \
             --with-systemdsystemunitdir=/usr                        \
             PKG_CONFIG="$(type -P pkg-config)"                      \
             PKG_CONFIG_PATH="${PKG_CONFIG_PATH}"
make "-j$(nproc --all)"
if ! sudo make install; then
    printf "\n%s\n\n" 'Failed to install util-linux.'
    exit 1
fi

# PROMPT USER TO CLEAN UP FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn
