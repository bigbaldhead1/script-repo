PATH="\
/usr/lib/ccache:\
${HOME}/perl5/bin:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/cuda/bin:\
/usr/local/x86_64-linux-gnu/bin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/games:\
/usr/games:\
/snap/bin\
"
export PATH#!/usr/bin/env bash

###########################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/edit/main/Bash/Installer%20Scripts/GNU%20Software/build-nettle
##
##  Purpose: build gnu nettle
##
##  Updated: 08.01.23
##
##  Script version: 1.1
##
###########################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET THE VARIABLES
#

script_ver=1.1
archive_dir=nettle-3.9.1
archive_url=https://ftp.gnu.org/gnu/nettle/nettle-3.9.1.tar.gz
archive_ext="${archive_url//*.}"
archive_name="$archive_dir.tar.${archive_ext}"
cwd="$PWD"/nettle-build-script
install_dir=/usr/local
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo

printf "%s\n%s\n\n" \
    "nettle build script - v${script_ver}" \
    '==============================================='

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "$cwd" ]; then
    sudo rm -fr "$cwd"
fi
mkdir -p "$cwd"

#
# SET THE C + CPP COMPILERS
#

export CC=gcc CXX=g++

#
# SET COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O3 -pipe -march=native'

#
# SET THE PATH VARIABLE
#

PATH="\
/usr/lib/ccache:\
${HOME}/perl5/bin:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/cuda/bin:\
/usr/local/x86_64-linux-gnu/bin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/games:\
/usr/games:\
/snap/bin\
"
export PATH

#
# SET THE PKG_CONFIG_PATH VARIABLE
#

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/x86_64-linux-gnu/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n\n" \
        'Make sure to star this repository to show your support!' \
        "$web_repo"
    exit 0
}

fail_fn()
{
    printf "\n%s\n\n%s\n\n" \
        "$1" \
        "To report a bug create an issue at: $web_repo/issues"
    exit 1
}

cleanup_fn()
{
    local choice

    printf "%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "${choice}" in
        1)      sudo rm -fr "$cwd";;
        2)      echo;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs_fn()
{
    pkgs=("$1" apt-transport-https apt-utils autoconf autoconf-archive autogen automake autopoint autotools-dev build-essential bzip2
          ca-certificates ccache clang cmake curl gfortran git google-perftools graphviz jq lcov libaria2-0 libaria2-0-dev
          libc-ares-dev libcppunit-dev libcunit1-dev libcurl4 libcurl4-openssl-dev libdmalloc-dev libec-dev libedit-dev
          libev-dev libevent-dev libexiv2-27 libexpat1-dev libgcc-12-dev libgcrypt20-dev libgexiv2-2 libgimp2.0 libgmp3-dev
          libgpg-error-dev libgtk-4-doc libgpgme-dev libicu-dev libjemalloc-dev libkrb5-3 libldap2-dev libldap-dev liblttng-ust-dev
          liblzma-dev libmbedtls-dev libnghttp2-dev libntlm0-dev libparted-dev libpng-dev libpsl-dev librtmp-dev librust-bzip2-dev
          librust-openssl-dev libsqlite3-dev libssh2-1-dev libssh-dev libssl-dev libtinfo5 libticonv-dev libtinfo-dev libtool
          libtool-bin libunistring-dev libunwind8 libuv1-dev libxml2-dev libzstd-dev m4 nettle-dev default-jdk-headless
          openssh-server pkg-config python3-dev python3-numpy python3-packaging python3-pip python3-pytest python3-setuptools
          python3-wheel re2c rsync unzip valgrind zip zlib1g-dev)

    for i in ${pkgs[@]}
    do
        missing_pkg="$(sudo dpkg -l | grep -o "${i}")"

        if [ -z "${missing_pkg}" ]; then
            missing_pkgs+=" ${i}"
        fi
    done

    if [ -n "${missing_pkgs}" ]; then
        sudo apt -y install ${missing_pkgs}
        sudo apt -y autoremove
        clear
    fi
}

#
# DOWNLOAD THE ARCHIVE FILE
#

if [ ! -f "$cwd/${archive_name}" ]; then
    curl -A "$user_agent" -Lso "$cwd/${archive_name}" "${archive_url}"
fi

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "$cwd/$archive_dir" ]; then
    sudo rm -fr "$cwd/$archive_dir"
fi
mkdir -p "$cwd/$archive_dir/build"

#
# EXTRACT ARCHIVE FILES
#

if ! tar -xf "$cwd/${archive_name}" -C "$cwd/$archive_dir" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: $cwd/${archive_name}"
    exit 1
fi

#
# BUILD PROGRAM FROM SOURCE
#

include_dirs='/usr/local/include:/usr/include:/usr/lib/jvm/java-17-openjdk-amd64/include:/usr/lib/llvm-14/include'
include_dirs+=':/usr/lib/gcc/x86_64-linux-gnu/12/include:/usr/lib/x86_64-linux-gnu/glib-2.0/include'
include_dirs+=':/usr/lib/x86_64-linux-gnu/dbus-1.0/include:/usr/src/linux-headers-6.1.0-10-common/include'
include_dirs+=':/usr/src/linux-headers-6.1.0-10-amd64/include:/usr/src/linux-headers-6.1.0-10-amd64/arch/x86/include'
include_dirs+=':/usr/lib/python3/dist-packages/numpy/core/include:/usr/local/cuda-12.2/targets/x86_64-linux/include'
include_dirs+=':/usr/local/cuda-12.2/targets/x86_64-linux/include/cuda/std/detail/libcxx/include'
include_dirs+=':/usr/local/cuda-12.2/compute-sanitizer/include:/usr/local/cuda-12.2/nvvm/include'
include_dirs+=':/usr/include/boost/fusion/include'
lib_dirs='/usr/local/lib:/usr/lib64:/usr/lib:/usr/local/cuda-12.2/nvvm/lib64:/usr/local/cuda-12.2/extras/Debugger/lib64'
lib_dirs+=':/usr/i686-w64-mingw32/lib:/usr/lib/xen-4.17/lib:/usr/lib/llvm-14/lib:/usr/x86_64-linux-gnu/lib'
lib_dirs+=':/usr/x86_64-w64-mingw32/lib:/usr/share/lintian/lib:/usr/share/gitk/lib:/usr/share/texinfo/lib:/usr/share/git-gui/lib'

cd "$cwd/$archive_dir" || exit 1
autoreconf -fi
cd build || exit 1
../configure --prefix="$install_dir"             \
             --disable-documentation               \
             --with-lib-path="${lib_dirs}"         \
             --with-include-path="${include_dirs}" \
             CPPFLAGS='-I/usr/local/include -I/usr/include'
make "-j$(nproc --all)"
if ! sudo make install; then
    fail_fn "Failed to execute: sudo make install:Line ${LINENO}"
    exit 1
fi

# PROMPT USER TO CLEAN UP FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn
