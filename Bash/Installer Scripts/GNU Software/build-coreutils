#!/usr/bin/env bash

# ANSI color codes
RED="\033[0;31m"
GREEN="\033[0;32m"
NC="\033[0m"

# Function to log messages
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

# Function to display warnings
warn() {
    echo -e "${RED}[WARN]${NC} $1"
}

# Function to handle failures
fail() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# Check if running as root or with sudo
check_root() {
    if [[ "$EUID" -eq 0 ]]; then
        fail "This script must be run without root or with sudo."
    fi
}

# Function to display help menu
show_help() {
    echo "Usage: $0 [option]"
    echo "Options:"
    echo "  -h, --help            Show this help message."
    echo "  -i, --install         Install GNU Core Utilities."
    echo "  -c, --check-dependencies Check for and install missing dependencies."
    echo "  -l, --link-binaries   Link the installed binaries to /usr/local/bin."
}

# Function to install dependencies
install_dependencies() {
    log "Checking and installing necessary dependencies..."
    local missing_packages=()
    for package in wget build-essential autoconf autoconf-archive; do
        if ! dpkg -l "$package" &>/dev/null; then
            missing_packages+=("$package")
        fi
    done

    if [[ ${#missing_packages[@]} -gt 0 ]]; then
        if command -v apt-get >/dev/null; then
            apt-get update
            apt-get install -y "${missing_packages[@]}"
        else
            fail "Unsupported package manager. Please install dependencies manually."
        fi
    else
        log "All dependencies are already installed."
    fi
}

# Function to dynamically download and extract coreutils
download_coreutils() {
    log "Fetching the latest version of GNU Core Utilities..."
    local latest_version
    latest_version=$(wget -qO- https://ftp.gnu.org/gnu/coreutils/ | grep -oP 'coreutils-\K[0-9.]+(?=\.tar\.xz)' | sort -V | tail -1)
    if [[ -z "$latest_version" ]]; then
        fail "Failed to fetch the latest version of GNU Core Utilities."
    fi
    local tarball="coreutils-${latest_version}.tar.xz"
    local url="https://ftp.gnu.org/gnu/coreutils/$tarball"
    log "Downloading GNU Core Utilities version $latest_version..."
    if wget --show-progress -cqO "$working/$tarball" "$url"; then
        mkdir -p "$working/coreutils-${latest_version}/build"
        tar -xf "$working/$tarball" -C "$working/coreutils-${latest_version}" --strip-components=1
        cd "$working/coreutils-${latest_version}" || fail "Failed to enter the coreutils directory."
    else
        fail "Failed to download GNU Core Utilities."
    fi
}

# Function to configure, compile, and install coreutils
build_and_install() {
    log "Configuring, compiling, and installing GNU Core Utilities..."
    autoreconf -fi
    cd build
    ../configure --prefix=/usr/local/coreutils \
                 --build=x86_64-linux-gnu \
                 --host=x86_64-linux-gnu \
                 --disable-nls \
                 --disable-gcc-warnings \
                 --enable-threads=posix
    make "-j$(nproc --all)"
    sudo make install
    log "GNU Core Utilities installed successfully." || fail "Build or install failed."
}

# Function to link installed binaries
link_coreutils() {
    log "Linking installed binaries to /usr/local/bin..."
    sudo ln -sf /usr/local/coreutils/bin/* /usr/local/bin/ || warn "Failed to link binaries."
}

# Create variables
cwd="$PWD"
working="$cwd/build-coreutils-script"

mkdir -p "$working"; cd "$working" || exit 1

# Main function
main() {
    check_root
    case "$1" in
        -h|--help)
            show_help
            ;;
        -i|--install)
            install_dependencies
            download_coreutils
            build_and_install
            ;;
        -c|--check-dependencies)
            install_dependencies
            ;;
        -l|--link-binaries)
            link_coreutils
            ;;
        *)
            show_help
            ;;
    esac
}

main "$@"
