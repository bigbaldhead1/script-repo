#!/usr/bin/env bash

##################################################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/edit/main/Bash/Installer%20Scripts/GNU%20Software/build-binutils
##
##  Purpose: build gnu binutils from source code
##
##  Updated: 11.26.23
##
##  Script version: 1.1
##
##################################################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

if ! sudo dpkg -l | grep -o &>/dev/null; then
    sudo apt -y install lzip
    clear
fi

#
# SET THE VARIABLES
#

script_ver=1.1
archive_dir=binutils-2.41
archive_url=https://ftp.gnu.org/gnu/binutils/"${archive_dir}".tar.lz
archive_ext="${archive_url//*.}"
archive_name="${archive_dir}.tar.${archive_ext}"
cwd="${PWD}"/binutils-build-script
install_dir=/usr/local
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
pc_type=x86_64-linux-gnu
web_repo=https://github.com/slyfox1186/script-repo

printf "%s\n%s\n\n"                          \
    "Binutils Build Script - v${script_ver}" \
    '==============================================='
sleep 2

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}" ]; then
    sudo rm -fr "${cwd}"
fi
mkdir -p "${cwd}"

#
# SET THE CC/CXX COMPILERS & THE COMPILER OPTIMIZATION FLAGS
#

CC=gcc
CXX=g++
CFLAGS='-g -O3 -pipe -march=native'
CXXFLAGS="${CFLAGS}"
CPPFLAGS='-I/usr/local/include -I/usr/include'
LDFLAGS+='-L/usr/local/lib64 -L/usr/local/lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib64 -L/usr/lib -L/lib64 -L/lib'
export CC CXX CFLAGS CPPFLAGS CXXFLAGS LDFLAGS

#
# SET THE PATH VARIABLE
#

PATH="\
/usr/lib/ccache/bin:\
/usr/lib/ccache:\
${cwd}/autoconf-build-script/workspace/bin:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/cuda/bin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/snap/bin\
"
export PATH

#
# SET THE PKG_CONFIG_PATH VARIABLE
#

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/usr/local/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/usr/local/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/usr/local/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n\n"                                       \
        'Make sure to star this repository to show your support!' \
        "${web_repo}"
    exit 0
}

fail_fn()
{
    printf "\n%s\n\n%s\n\n" \
        "${1}"              \
        "To report a bug create an issue at: ${web_repo}/issues"
    exit 1
}

cleanup_fn()
{
    local choice

    printf "%s\n%s\n%s\n\n%s\n%s\n\n"                  \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "${choice}" in
        1)      sudo rm -fr "${cwd}";;
        2)      echo;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs_fn()
{
    pkgs=("${1}" autoconf autoconf-archive autogen automake binutils build-essential ccache cmake curl
          git libgmp-dev libintl-perl libisl-dev libmpc-dev libmpfr-dev libtool libtool-bin libzstd-dev
          m4 nasm ninja-build texinfo yasm zlib1g-dev zstd gdc-multilib gdc)

    for pkg in ${pkgs[@]}
    do
        missing_pkg="$(sudo dpkg -l | grep -o "${pkg}")"

        if [ -z "${missing_pkg}" ]; then
            missing_pkgs+=" ${pkg}"
        fi
    done

    if [ -n "${missing_pkgs}" ]; then
        sudo apt -y install ${missing_pkgs}
        sudo apt -y autoremove
        clear
    fi
}

#
# TEST THE OS AND ITS VERSION
#

find_lsb_release="$(sudo find /usr/bin/ -type f -name 'lsb_release')"

if [ -f '/etc/os-release' ]; then
    . '/etc/os-release'
    OS_TMP="$NAME"
    OS="$(echo "${OS_TMP}" | awk '{print $1}')"
elif [ -n "${find_lsb_release}" ]; then
    OS="$(lsb_release -d | awk '{print $2}')"
else
    fail_fn "Failed to define the \$OS and/or \$VER variables. Line: ${LINENO}"
fi

case "${OS}" in
    Debian)       pkgs_fn 'libadacgi6-dev';;
    Ubuntu)       pkgs_fn 'libadacgi4-dev';;
    *)            pkgs_fn;;
esac

#
# INSTALL AUTOCONF 2.69 IN A TEMPORARY DIRECTORY OR BINUTILS WILL NOT COMPILE
#

cd "${cwd}" || exit 1

curl -A "${user_agent}" -Lso "${cwd}/build-autoconf" 'https://raw.githubusercontent.com/slyfox1186/script-repo/main/Bash/Installer%20Scripts/GNU%20Software/autoconf-test'
bash "${cwd}/build-autoconf" "${PWD}"

#
# DOWNLOAD THE ARCHIVE FILE
#

if [ ! -f "${cwd}/${archive_name}" ]; then
    curl -A "${user_agent}" -Lso "${cwd}/${archive_name}" "${archive_url}"
fi

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}/${archive_dir}" ]; then
    sudo rm -fr "${cwd}/${archive_dir}"
fi
mkdir -p "${cwd}/${archive_dir}/build"

#
# EXTRACT ARCHIVE FILES
#

if ! tar -xf "${cwd}/${archive_name}" -C "${cwd}/${archive_dir}" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: ${cwd}/${archive_name}"
    exit 1
fi

#
# BUILD PROGRAM FROM SOURCE
#

cd "${cwd}/${archive_dir}" || exit 1
autoreconf -fi -I /usr/share/aclocal
cd build || exit 1
../configure --prefix="${install_dir}"              \
             --{build,host}="${pc_type}"            \
             --enable-compressed-debug-sections=all \
             --enable-gold=yes                      \
             --enable-host-shared                   \
             --enable-ld=yes                        \
             --enable-libssp                        \
             --enable-lto                           \
             --enable-pgo-build=lto                 \
             --enable-year2038                      \
             --with-gcc-major-version-only          \
             --with-gmp=/usr                        \
             --with-isl=/usr                        \
             --with-mpc=/usr                        \
             --with-mpfr=/usr                       \
             --with-system-zlib                     \
             --with-zstd
echo
if ! make "-j$(nproc --all)"; then
    fail_fn "Failed to execute: make -j$(nproc --all). Line: ${LINENO}"
fi
echo
if ! sudo make install; then
    fail_fn "Failed to execute: sudo make install. Line: ${LINENO}"
fi

# PROMPT USER TO CLEAN UP FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn
