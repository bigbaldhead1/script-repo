#!/usr/bin/env bash

if [ "$EUID" -ne 0 ]; then
        printf "%s\n\n" 'You must run this script with root/sudo.'
        exit 1
fi

# Color Codes
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Default Values
PREFIX="/usr/local/binutils"
TARGET="x86_64-elf"
VERSION="2.38"
BUILD_DIR="build-binutils"

# Print Usage Information
usage() {
    echo -e "${GREEN}Usage:${NC} $0 [-v version] [-p prefix] [-t target] [-h]"
    echo "    -v    Specify binutils version to download (default: $VERSION)"
    echo "    -p    Specify installation prefix (default: $PREFIX)"
    echo "    -t    Specify target for binutils (default: $TARGET)"
    echo "    -h    Display this help message and exit"
}

# Print error messages
print_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Print info messages
print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

# Parse Command Line Arguments
parse_arguments() {
    while getopts ":v:p:t:h" opt; do
        case ${opt} in
            v ) VERSION="$OPTARG"
                    ;;
            p ) PREFIX="$OPTARG"
                    ;;
            t ) TARGET="$OPTARG"
                    ;;
            h ) usage
                    exit 0
                    ;;
            \? ) print_error "Invalid option: $OPTARG"
                     exit 1
                    ;;
            : ) print_error "Option -$OPTARG requires an argument."
                    exit 1
                    ;;
        esac
    done
}

# Check for autoconf version
check_autoconf() {
    local ac_ver=$(autoconf --version 2>/dev/null | head -n1 | awk '{print $NF}')
    if [[ "$ac_ver" != "2.69" ]]; then
        print_info "Autoconf version 2.69 is not installed. Attempting to install..."
        wget --show-progress -t 2 -cqO build-autoconf-2.69 "https://raw.githubusercontent.com/slyfox1186/script-repo/main/Bash/Installer%20Scripts/GNU%20Software/build-autoconf-2.69"
        if bash build-autoconf-2.69; then
            rm build-autoconf-2.69
            print_info "Successfully installed autoconf version 2.69."
        else
            print_error "Failed to install autoconf version 2.69."
            exit 1
        fi
    else
        print_info "Autoconf version 2.69 is already installed."
    fi
}

# Cleanup Function
cleanup() {
    read -p "Do you want to remove the build directory $BUILD_DIR? [Y/n] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf "$BUILD_DIR"
        print_info "Build directory removed."
    else
        print_info "Build directory not removed."
    fi
}

# Exit Function
exit_fn() {
    local exit_code=$1
    cleanup
    exit $exit_code
}

# Main Installation Function
install_binutils() {
    check_autoconf
    mkdir -p $BUILD_DIR
    cd $BUILD_DIR || exit_fn 1
    wget "https://ftp.gnu.org/gnu/binutils/binutils-$VERSION.tar.xz"
    tar xf "binutils-$VERSION.tar.xz"
    mkdir build && cd build || exit_fn 1
    ../binutils-$VERSION/configure --target=$TARGET --prefix=$PREFIX --with-sysroot --disable-nls --disable-werror
    make
    make install || exit_fn 1
    print_info "Binutils version $VERSION installed successfully to $PREFIX."
    cd ../..
}

# Link the installed binaries (optional)
link_binutils() {
    sudo ln -sf "$install_dir"/bin/* /usr/local/bin/
}

# Script Execution
parse_arguments "$@"
install_binutils
link_binutils
exit_fn 0
