#!/usr/bin/env bash

###############################################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/edit/main/Bash/Installer%20Scripts/GNU%20Software/build-glibc
##
##  Purpose: Build GNU GlibC
##
##  Updated: 08.05.23
##
##  Script version: 1.0
##
###############################################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET THE VARIABLES
#

script_ver=1.0
archive_dir=glibc-2.38
archive_url=https://ftp.gnu.org/gnu/glibc/"$archive_dir".tar.xz
archive_ext="${archive_url//*.}"
archive_name="$archive_dir.tar.${archive_ext}"
cwd="$PWD"/glibc-build-script
install_dir=/usr
pc_type=x86_64-linux-gnu
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo

printf "%s\n%s\n\n" \
    "GlibC Build Script - v${script_ver}" \
    '==============================================='
sleep 2

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "$cwd" ]; then
    sudo rm -fr "$cwd"
fi
mkdir -p "$cwd"

#
# SET THE CC/CXX COMPILERS & THE COMPILER OPTIMIZATION FLAGS
#

CC=gcc
CXX=g++
CXXFLAGS='-g -O3 -pipe -march=native'
CFLAGS="${CXXFLAGS}"
CPPFLAGS='-I/usr/local/include -I/usr/include'
export CC CXX CFLAGS CPPFLAGS CXXFLAGS GLIBC_TEST_ALLOW_TIME_SETTING

#
# SET THE PATH VARIABLE
#

PATH="\
/usr/lib/ccache:\
${HOME}/perl5/bin:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/cuda/bin:\
/usr/local/x86_64-linux-gnu/bin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/games:\
/usr/games:\
/snap/bin\
"
export PATH

#
# SET THE PKG_CONFIG_PATH VARIABLE
#

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/usr/local/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/$install_dir/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/usr/local/pkgconfig\
"
export PKG_CONFIG_PATH

LD_LIBRARY="\
/usr/local/lib64:\
/usr/local/lib:\
/usr/share/texinfo/lib:\
/usr/local/x86_64-linux-gnu/lib:\
/usr/local/ssl/lib:\
/usr/local/lib/x86_64-linux-gnu:\
/usr/local/lib/gprofng:\
/usr/local/lib64:\
/usr/local/lib:\
/usr/local/cuda/targets/x86_64-linux/lib:\
/usr/local/cuda-12/targets/x86_64-linux/lib:\
/usr/local/cuda-12.3/targets/x86_64-linux/lib:\
/usr/local/cuda-12.3/nvvm/lib64:\
/usr/lib/x86_64-linux-gnu/libfakeroot:\
/usr/lib/x86_64-linux-gnu:\
/usr/libx32:\
/usr/lib64:\
/usr/lib32:\
/usr/lib:\
/usr/local/lib:\
/lib/x86_64-linux-gnu:\
/libx32:\
/lib64:\
/lib32:\
/lib\
"
export LD_LIBRARY

LD_LIBRARY_PATH="\
/usr/local/lib64:\
/usr/local/lib:\
/usr/share/texinfo/lib:\
/usr/local/x86_64-linux-gnu/lib:\
/usr/local/ssl/lib:\
/usr/local/lib/x86_64-linux-gnu:\
/usr/local/lib/gprofng:\
/usr/local/lib64:\
/usr/local/lib:\
/usr/local/cuda/targets/x86_64-linux/lib:\
/usr/local/cuda-12/targets/x86_64-linux/lib:\
/usr/local/cuda-12.3/targets/x86_64-linux/lib:\
/usr/local/cuda-12.3/nvvm/lib64:\
/usr/lib/x86_64-linux-gnu/libfakeroot:\
/usr/lib/x86_64-linux-gnu:\
/usr/libx32:\
/usr/lib64:\
/usr/lib32:\
/usr/lib:\
/usr/local/lib:\
/lib/x86_64-linux-gnu:\
/libx32:\
/lib64:\
/lib32:\
/lib\
"
export LD_LIBRARY_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n\n"                                       \
        'Make sure to star this repository to show your support!' \
        "$web_repo"
    exit 0
}

fail_fn()
{
    printf "\n%s\n\n%s\n\n" \
        "$1"              \
        "To report a bug create an issue at: $web_repo/issues"
    exit 1
}

cleanup_fn()
{
    local choice

    printf "%s\n%s\n%s\n\n%s\n%s\n\n"                  \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes'                                      \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "${choice}" in
        1)      sudo rm -fr "$cwd";;
        2)      echo;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs_fn()
{
    pkgs=("$1" autoconf autoconf-archive autogen automake build-essential ccache cmake curl git libltdl-dev)
    
    for i in ${pkgs[@]}
    do
        missing_pkg="$(sudo dpkg -l | grep -o "${i}")"
    
        if [ -z "${missing_pkg}" ]; then
            missing_pkgs+=" ${i}"
        fi
    done
    
    if [ -n "${missing_pkgs}" ]; then
        sudo apt -y install ${missing_pkgs}
        sudo apt -y autoremove
        clear
    fi
}

#
# DOWNLOAD THE ARCHIVE FILE
#

if [ ! -f "$cwd/${archive_name}" ]; then
    curl -A "$user_agent" -Lso "$cwd/${archive_name}" "${archive_url}"
fi

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "$cwd/$archive_dir" ]; then
    sudo rm -fr "$cwd/$archive_dir"
fi
mkdir -p "$cwd/$archive_dir/build"

#
# EXTRACT ARCHIVE FILES
#

if ! tar -xf "$cwd/${archive_name}" -C "$cwd/$archive_dir" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: $cwd/${archive_name}"
    exit 1
fi

#
# BUILD PROGRAM FROM SOURCE
#

latest_linux_dir="$(sudo find /usr/src -type d -name 'linux-headers-*-amd64' | head -n1)"
latest_linux_short_ver="$(echo "${latest_linux_dir}" | grep -Eo '[0-9\.]+' | head -n1)"

cd "$cwd/$archive_dir" || exit 1
autoreconf -fi
cd build || exit 1
../configure --prefix="$install_dir"
--{build,host}="${pc_type}"
--allow-time-setting
--disable-fortify-source
--disable-profile
--disable-shared
--disable-werror
--enable-kernel="${latest_linux_short_ver}"
--enable-pt_chown
--enable-stack-protector=all
--with-binutils=/usr/bin
--with-headers="${latest_linux_dir}"/include
--with-timeoutfactor=15

echo
if ! make "-j$(nproc --all)"; then
    fail_fn "Failed to execute: make -j$(nproc --all). Line: ${LINENO}"
    exit 1
fi

echo
if ! make "-j$(nproc --all)" check; then
    fail_fn "Failed to execute: make -j$(nproc --all) check. Line: ${LINENO}"
    exit 1
fi

echo
if ! sudo make "-j$(nproc --all)" install; then
    fail_fn "Failed to execute: sudo make -j$(nproc --all) install. Line: ${LINENO}"
    exit 1
fi

echo
if ! sudo make "-j$(nproc --all)" localedata/install-locale-files; then
    fail_fn "Failed to execute: sudo make -j$(nproc --all) localedata/install-locale-files. Line: ${LINENO}"
    exit 1
fi

echo
cd "/usr/src/linux-headers-$(uname -r)/include" || exit 1
if ! sudo make "-j$(nproc --all)" headers_install; then
    fail_fn "Failed to execute: sudo make -j$(nproc --all) headers_install. Line: ${LINENO}"
    exit 1
fi

# UPDATE TIME INFO SO GLIBC CAN UTILIZE PARTS OF THEIR CODE BETTER
ln -sf '/usr/share/zoneinfo/US/Eastern' '/etc/localtime'

# PROMPT USER TO CLEAN UP FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn
