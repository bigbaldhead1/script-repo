#!/usr/bin/env bash
# Build GCC - v5.2 - 03.08.24
# GitHub: https://github.com/slyfox1186/script-repo

version=5.2
install_prefix=/usr/local
build_dir=/tmp/gcc-$version-build
repo_url=https://github.com/slyfox1186/script-repo
verbose=0

usage() {
    printf "%s\n" "Usage: ./build-gcc.sh [OPTIONS]"
    printf "%s\n" "Options:"
    printf "  %-25s %s\n" "-p, --prefix DIR" "Set the installation prefix (default: $install_prefix)"
    printf "  %-25s %s\n" "-v, --verbose" "Enable verbose logging"
    printf "  %-25s %s\n" "-h, --help" "Show this help message"
    exit 0
}

parse_args() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -p|--prefix)
                install_prefix="$2"
                shift 2
                ;;
            -v|--verbose)
                verbose=1
                shift
                ;;
            -h|--help)
                usage
                ;;
            *)
                fail_fn "Unknown option: $1. Use -h or --help for usage information."
                ;;
        esac
    done
}

log_msg() {
    if [[ $verbose -eq 1 ]]; then
        printf "%s\n" "$1"
    fi
}

fail_fn() {
    printf "%s\n" "$1"
    printf "%s\n" "To report a bug, create an issue at: $repo_url/issues"
    exit 1
}

set_env_vars() {
    log_msg "Setting environment variables..."
    export CC="ccache gnatgcc"
    export CXX="ccache g++"
    export CFLAGS="-O3 -pipe -fno-plt -march=native"
    export CXXFLAGS="-O3 -pipe -fno-plt -march=native"
    export CPPFLAGS="-I$install_prefix/include -I/usr/local/include -I/usr/include -D_FORTIFY_SOURCE=2"
    export LDFLAGS="-L$install_prefix/lib64 -L$install_prefix/lib -Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now,-rpath,$install_prefix/lib"
    export PATH="/usr/lib/ccache:$HOME/perl5/bin:$HOME/.cargo/bin:$HOME/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    export PKG_CONFIG_PATH="$install_prefix/lib64/pkgconfig:$install_prefix/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/local/lib/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/pkgconfig"
}

install_deps() {
    log_msg "Installing dependencies..."
    if command -v apt-get >/dev/null 2>&1; then
        apt-get update
        apt-get install -y --no-install-recommends autoconf automake binutils bison build-essential ccache curl flex gawk gcc g++ gnat libc6-dev libgmp-dev libmpc-dev libmpfr-dev libtool make patch texinfo zlib1g-dev
    elif command -v dnf >/dev/null 2>&1; then
        dnf install -y autoconf automake binutils bison ccache curl flex gawk gcc gcc-c++ gmp-devel gnat libtool make mpfr-devel patch texinfo zlib-devel
    elif command -v pacman >/dev/null 2>&1; then
        pacman -Sy --noconfirm --needed autoconf automake binutils bison ccache curl flex gawk gcc gcc-ada gmp-devel libtool make mpfr patch texinfo zlib
    else
        fail_fn "Unsupported package manager. Please install the required dependencies manually."
    fi
}

get_latest_version() {
    local major_version=$1
    curl -s "https://ftp.gnu.org/gnu/gcc/" | grep -oE "gcc-${major_version}\.[0-9]+\.[0-9]+" | sort -V | tail -n1 | cut -d- -f2
}

download() {
    local url=$1
    local filename=$(basename "$url")
    if [[ ! -f "$build_dir/$filename" ]]; then
        log_msg "Downloading $url"
        curl -fsSL "$url" -o "$build_dir/$filename"
    fi
    
    local extract_dir="$build_dir/$(basename "$filename" .tar.xz)"
    if [[ ! -d "$extract_dir" ]]; then
        log_msg "Extracting $filename"
        tar -xf "$build_dir/$filename" -C "$build_dir"
        if [[ $? -ne 0 ]]; then
            fail_fn "Failed to extract $filename"
        fi
    else
        log_msg "Source directory $extract_dir already exists"
    fi
}

build_gcc() {
    local version=$1
    local languages=$2
    local configure_options=$3

    log_msg "Building GCC $version"
    download "https://ftp.gnu.org/gnu/gcc/gcc-$version/gcc-$version.tar.xz"

    local gcc_dir="$build_dir/gcc-$version"
    if [[ ! -d "$gcc_dir" ]]; then
        fail_fn "GCC $version source directory not found: $gcc_dir"
    fi

    cd "$gcc_dir"

    # Run autoreconf and download prerequisites
    autoreconf -fi
    ./contrib/download_prerequisites

    mkdir -p builddir && cd builddir

    ../configure --prefix="$install_prefix/gcc-$version" \
                 --enable-languages="$languages" \
                 --disable-multilib \
                 --with-system-zlib \
                 $configure_options

    make -j"$(nproc)"
    make install-strip

    ln -sfn "$install_prefix/gcc-$version/bin/"* "$install_prefix/bin/"
}

cleanup() {
    log_msg "Cleaning up..."
    read -rp "Remove temporary build directory '$build_dir'? [y/N] " response
    if [[ $response =~ ^[Yy]$ ]]; then
        rm -rf "$build_dir"
    fi
}

select_versions() {
    local versions=("10" "11" "12" "13")
    local selected_versions=()

    printf "\n%s\n\n" "Select the GCC versions to install (comma-separated):"
    printf "%s\n" "0. All versions"
    for ((i=0; i<${#versions[@]}; i++)); do
        printf "%d. GCC %s\n" $((i+1)) "${versions[i]}"
    done
    echo
    read -p "Enter your choice: " choice

    IFS=',' read -ra choices <<< "$choice"
    for c in "${choices[@]}"; do
        case $c in
            0)
                selected_versions=("${versions[@]}")
                break
                ;;
            [1-4])
                selected_versions+=("${versions[$((c-1))]}")
                ;;
            *)
                fail_fn "Invalid choice: $c"
                ;;
        esac
    done

    if [[ ${#selected_versions[@]} -eq 0 ]]; then
        fail_fn "No GCC versions selected."
    fi

    for version in "${selected_versions[@]}"; do
        latest_version=$(get_latest_version "$version")
        case $version in
            10)
                build_gcc "$latest_version" "c,c++,fortran,objc,obj-c++,ada" "--enable-checking=release --with-arch-32=i686"
                ;;
            11|12|13)
                build_gcc "$latest_version" "c,c++,fortran,objc,obj-c++,ada" "--enable-checking=release"
                ;;
        esac
    done
}

main() {
    parse_args "$@"

    if [[ $EUID -ne 0 ]]; then
        fail_fn "This script must be run as root or with sudo."
    fi

    if [[ -d "$build_dir" ]]; then
        rm -rf "$build_dir"
    fi
    mkdir -p "$build_dir"

    set_env_vars
    install_deps

    select_versions

    cleanup

    log_msg "Build completed successfully!"
    log_msg "Make sure to star this repository to show your support!"
    log_msg "$repo_url"
}

main "$@"
