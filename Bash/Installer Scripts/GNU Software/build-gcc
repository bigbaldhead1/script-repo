#!/usr/bin/env bash
# shellcheck disable=SC2034,SC2046,SC2066,SC2068,SC2086,SC2162,SC2317

#####################################################################################################
##
##  GitHub: https://github.com/slyfox1186/script-repo
##
##  Install: GCC 11.4.0 / 12.3.0 / 13.2.0
##
##  Supported OS: Debian 10 / 11 / 12
##                Ubuntu 22.04
##                Windows WSL
##
##  Screenshot of Ubuntu build: https://gcc-screenshot.optimizethis.net
##
##  Last Script Update: 09.07.23
##  Script Version: 4.4
##
##  Updated: GCC-13 to version - 13.2.0
##
##  Added: multiple support libraries using the latest versions available
##  Added: link time optimization support
##  Added: gmp support library for binutils
##  Added: ada language support for all gcc versions
##  Added: code to clean the environment
##  Added: added two default variables back into the script environment to combat
##         any issues with dbus or x-11 display issues.
##
##  Optimized: code by removing redundant loops by passing variables to functions
##
##  Updated: the LIBRARY_PATH variable to include the default paths of the APT "gcc" version
##
##  Updated: Added options to choose what GCC versions to install.
##
##  Fixed: zstdn, zlib, and bison build issues.
##  Fixed: Debian not being able to compile gcc due to the ada language being included
##  Fixed: Debian missing and uninstallable APT package errors
##  Fixed: Ubuntu Jammy zstd not building. Changed from meson to cmake
##
##  Changed: the language support on Ubuntu to "all" for each GCC version which allows them to
##           build every language they are able to.
##  Changed: the default install directory for the GNU libs to "${workspace}" to help avoid
##           future overlaps with APT packages that may be installed.
##
#####################################################################################################
##
##  GCC ( 11 | 12 | 13 )
##
##  BUILD SUCCESS RESULTS
##
##  DEBIAN 12      |  PASS
##  DEBIAN 11      |  UNKNOWN
##  DEBIAN 10      |  UNKNOWN
##
##  UBUNTU LUNAR   |  PASS
##  UBUNTU JAMMY   |  PASS (To anyone with dbus X-11 issues... I could not reproduce this issue myself. Not sure what is going on with your OS)
##  UBUNTU FOCAL   |  UNKNOWN
##  UBUNTU BIONIC  |  UNKNOWN
##
#####################################################################################################
##
##  GCC [ 11 ] NOTES
##
##  Debian Bookworm will not build the "ada" language for gcc-11, so it's disabled.
##
##  To date, I have not tested Debian Buster or Bullseye, so make changes as necessary.
##  Ubuntu seems to have no issue building the "ada" language, so it remains enabled.
##
##  GCC [ 12 | 13 ] NOTES
##
##  Debian and Ubuntu appear to have no issues building "ada"
##  language support on gcc 12 and 13 and it remains enabled for both
##
#####################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET ESSENTIAL OUTPUT DIRECTORY VARIABLES
#

cwd="${PWD}"/gcc-build-script
packages="${cwd}"/packages
workspace="${cwd}"/workspace

#
# CLEAN THE BUILD ENVIRONMENT
#

tmp_home="${HOME}"
tmp_pwd="${PWD}"
tmp_term="${TERM}"
tmp_display="${DISPLAY}"
tmp_dbus="${DBUS_SESSION_BUS_ADDRESS}"

for var in $(env | awk -F'=' '{print $1}')
do
    unset ${var} || true # IGNORE UNSET FAILURES
done

# IMPORT SAVED DEFAULT VARS BACK INTO THE SCRIPT ENVIRONMENT
export DBUS_SESSION_BUS_ADDRESS="${tmp_dbus}"
export DISPLAY="${tmp_display}"
export HOME="${tmp_home}"
export PWD="${tmp_pwd}"
export TERM="${tmp_term}"
unset tmp_dbus tmp_display tmp_home tmp_pwd tmp_term var

#
# SET THE SCRIPT'S PATH VARIABLE
#

PATH="\
/usr/lib/ccache:\
${workspace}/bin:\
${HOME}/.local/bin:\
${HOME}/.cargo/bin:\
/usr/bin/x86_64-linux-gnu-ld:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin:\
${PATH}\
"

#
# REMOVE DUPLICATE LINES FROM THE PATH VARIABLE
#

tmp_dir="$(mktemp -d)"
pre_file="${tmp_dir}"/file1.txt
post_file="${tmp_dir}"/file2.txt

echo "${PATH}" > "${pre_file}"

sed -E 's/(:)/\n/g' "${pre_file}" | tee "${post_file}"
awk '!NF || !seen[$0]++' "${post_file}" > "${pre_file}"

join_str="$(tr '\n' ':' < "${pre_file}")"
PATH="$(echo "${join_str}" | sed 's/..$//g')"
export PATH

sudo rm -fr "${tmp_dir}"
unset join_str post_file pre_file tmp_dir
clear

#
# SET THE GLOBAL SCRIPT VARIABLES
#

script_ver=4.4
install_dir=/usr/local
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36'
latest=false
repo=https://github.com/slyfox1186/script-repo
debug=OFF # CHANGE THE DEBUG VARIABLE BELOW TO "ON" TO HELP TROUBLESHOOT BUGS DURING THE BUILD

#
# SET THE C & C++ COMPILERS
#

export CC=gcc CXX=g++

#
# SET THE COMPILER OPTIMIZATION FLAGS
#

export CXXFLAGS='-g -O2 -ffunction-sections -fdata-sections -pipe -march=native'
export CFLAGS="${CXXFLAGS} -Wl,-s -Wl,-Bsymbolic -Wl,--gc-sections"
export CPPFLAGS='-I/usr/lib/gcc/x86_64-linux-gnu/12/include -I/usr/local/include -I/usr/include/x86_64-linux-gnu -I/usr/include'

#
# SET THE AVAILABLE CPU THREADS AND CORE COUNT FOR PARALLEL PROCESSING (TO SPEED UP THE BUILD PROCESS)
#

if [ -f /proc/cpuinfo ]; then
    cpu_threads="$(grep -c ^processor /proc/cpuinfo)"
else
    cpu_threads="$(nproc --all)"
fi

#
# CREATE OUTPUT DIRECTORIES
#

if [ ! -d "${packages}" ] || [ ! -d "${workspace}"/venv/bin/python ] || [ ! -d "${workspace}"/venv/bin/pip ]; then 
    mkdir -p "${packages}" "${workspace}"/venv/bin/python "${workspace}"/venv/bin/pip 2>/dev/null
fi

#
# EXPORT THE PKG-CONFIG PATHS TO ENABLE SUPPORT DURING THE BUILD
#

PKG_CONFIG_PATH="\
${workspace}/lib64/pkgconfig:\
${workspace}/lib/pkgconfig:\
${workspace}/share/pkgconfig:\
${workspace}/lib/x86_64-linux-gnu/pkgconfig:\
${workspace}/usr/lib/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/x86_64-linux-gnu/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig/mit-krb5:\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/share/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n%s\n\n" \
        'The script has completed' \
        'Make sure to star this repository to show your support!' \
        "${repo}"
    exit 0
}

fail_fn()
{
    printf "\n\n%s\n\n%s\n\n%s\n\n" \
        "${1}" \
        'Please create a support ticket so I can work on a fix.' \
        "${repo}/issues"
    exit 1
}

cleanup_fn()
{
    local answer

    printf "\n%s\n\n%s\n%s\n\n" \
        'Do you want to remove the build files?' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' answer

    case "${answer}" in
        1)      sudo rm -fr "${cwd}";;
        2)      return 0;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Resetting script...'
                sleep 3
                unset answer
                clear
                cleanup_fn
                ;;
    esac
}

show_ver_fn()
{
    clear

    printf "%s\n\n" 'The installed gcc versions are:'

    if [ -f "${install_dir}"/bin/gcc-11 ]; then
        "${install_dir}"/bin/gcc-11 -v
        echo
    fi
    if [ -f "${install_dir}"/bin/gcc-12 ]; then
        "${install_dir}"/bin/gcc-12 -v
        echo
    fi
    if [ -f "${install_dir}"/bin/gcc-13 ]; then
        "${install_dir}"/bin/gcc-13 -v
        echo
    fi
}

create_gcc_links_fn()
{
    local gcc_long_name gcc_short_name

    gcc_long_name="$(sudo find /usr/local/bin -type f -name x86_64-linux-gnu-* | grep -Eo 'x86_64-linux-gnu-[a-z\+\-]+-[123]+$')"
    for i in ${gcc_long_name[@]}
    do
        gcc_short_name="$(echo "${i}" | sed 's/^x86_64-linux-gnu-\(.*\)$/\1/')"
        sudo ln -fs "/usr/local/bin/${i}" "/usr/local/bin/${gcc_short_name}"
        sudo chmod 755 -R "/usr/local/bin/${i}" "/usr/local/bin/${gcc_short_name}"
    done
}

execute()
{
    echo "$ ${*}"

    if [ "${debug}" = 'ON' ]; then
        if ! output=$("${@}"); then
            notify-send -t 5000 "Failed to execute: ${*}"
            fail_fn "Failed to execute: ${*}"
        fi
    else
        if ! output=$("${@}" 2>&1); then
            notify-send -t 5000 "Failed to execute: ${*}"
            fail_fn "Failed to execute: ${*}"
        fi
    fi
}

download()
{
    dl_path="${packages}"
    dl_url="${1}"
    dl_file="${2:-"${1##*/}"}"

    if [[ "${dl_file}" =~ tar. ]]; then
        output_dir="${dl_file%.*}"
        output_dir="${3:-"${output_dir%.*}"}"
    else
        output_dir="${3:-"${dl_file%.*}"}"
    fi

    target_file="${dl_path}/${dl_file}"
    target_dir="${dl_path}/${output_dir}"

    if [ -f "${target_file}" ]; then
        echo "The file \"${dl_file}\" is already downloaded."
    else
        echo "Downloading \"${dl_url}\" saving as \"${dl_file}\""
        if ! curl -A "${user_agent}" -Lso "${target_file}" "${dl_url}"; then
            printf "\n%s\n\n" "The script failed to download \"${dl_file}\" and will try again in 5 seconds..."
            sleep 5
            if ! curl -A "${user_agent}" -Lso "${target_file}" "${dl_url}"; then
                fail_fn "The script failed to download \"${dl_file}\" twice and will now exit."
            fi
        fi
        echo 'Download Completed'
    fi

    if [ -d "${target_dir}" ]; then
        sudo rm -fr "${target_dir}"
    fi

    mkdir -p "${target_dir}"

    if [ -n "${3}" ]; then
        if ! tar -xf "${target_file}" -C "${target_dir}" 2>/dev/null >/dev/null; then
            sudo rm "${target_file}"
            fail_fn "Failed to extract \"${dl_file}\" so it was deleted. Please rerun the script."
        fi
    else
        if ! tar -xf "${target_file}" -C "${target_dir}" --strip-components 1 2>/dev/null >/dev/null; then
            sudo rm "${target_file}"
            fail_fn "Failed to extract \"${dl_file}\" so it was deleted. Please rerun the script."
        fi
    fi

    echo -e "File extracted: ${dl_file}\\n"

    cd "${target_dir}" || fail_fn "Unable to change the working directory to: ${target_dir}"
}

download_git()
{
    local dl_path dl_url dl_file target_dir

    dl_path="${packages}"
    dl_url="${1}"
    dl_file="${2:-"${1##*/}"}"
    dl_file="${dl_file//\./-}"
    target_dir="${dl_path}/${dl_file}"

    if [ -d "${target_dir}" ]; then
        sudo rm -fr "${target_dir}"
    fi

    echo "Downloading ${dl_url} as ${dl_file}"
    if ! git clone -q "${dl_url}" "${target_dir}"; then
        printf "\n%s\n\n" "The script failed to clone the git repository \"${target_dir}\" and will try again in 10 seconds..."
        sleep 10
        if ! git clone -q "${dl_url}" "${target_dir}"; then
            fail_fn "The script failed to clone \"${target_dir}\" twice and will now exit the build."
        fi
    else
        echo -e "Successfully cloned: ${target_dir}\\n"
    fi

    cd "${target_dir}" || fail_fn "Unable to change the working directory to: ${target_dir}"
}

build()
{
    printf "\n%s\n%s\n" \
        "Building ${1} - version ${2}" \
        '======================================'

    if [ -f "${packages}/${1}.done" ]; then
        if grep -Fx "${2}" "${packages}/${1}.done" >/dev/null; then
            echo "${1} version ${2} already built. Remove ${packages}/${1}.done lockfile to rebuild it."
            return 1
        elif ${latest}; then
            echo "${1} is outdated and will be rebuilt using version ${2}"
            return 0
        else
            echo "${1} is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove ${packages}/${1}.done lockfile."
            return 1
        fi
    fi

    return 0
}

build_done() { echo "${2}" >"${packages}/${1}.done"; }

git_1_fn()
{
    local curl_cmd github_repo github_url

    # SCRAPE GITHUB'S API FOR THE LATEST REPO VERSION
    github_repo="${1}"
    github_url="${2}"

    if curl_cmd="$(curl -A "${user_agent}" -m 10 -sSL "https://api.github.com/repos/${github_repo}/${github_url}")"; then
        g_ver1="$(echo "${curl_cmd}" | jq -r '.[0].name' 2>/dev/null)"
        g_ver="${g_ver1#v}"
    fi
}

git_ver_fn()
{
    local t_flag u_flag v_flag v_tag v_url

    v_url="${1}"
    v_tag="${2}"

    if [ -n "${3}" ]; then
        v_flag="${3}"
    fi

    case "${v_flag}" in
            R)      t_flag=releases;;
            T)      t_flag=tags;;
            *)      fail_fn 'Could not detect the variable: v_flag.'
    esac

    git_1_fn "${v_url}" "${t_flag}" 2>/dev/null
}

installed() { return $(dpkg-query -W -f '${Status}\n' "${1}" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}'); }

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs_fn()
{
    pkgs=("${1}" autoconf autoconf-archive autogen automake bison build-essential ccache curl
          dejagnu flex gdc gdc-multilib gfortran gfortran-multilib git gnat gnulib guile-3.0-dev
          help2man jq libacl1-dev libasan8 libdebuginfod-dev libdmalloc5 libdmalloc-dev libeigen3-dev
          libffi-dev libfontconfig1-dev libfreetype6 libgd-dev libgm2-12-dev libgmp-dev libiberty-dev
          libicu-dev libintl-perl libisl-dev libjpeg-dev libltdl-dev libmpc-dev libmpfr-dev
          libphobos2-ldc-shared-dev libpng-dev libquadmath0 libsigsegv-dev libsqlite3-dev libssl-dev
          libstdc++-12-dev libtool libtool-bin libx11-dev libx32gfortran-12-dev libxext-dev
          linux-libc-dev meson m4 ninja-build openjdk-17-jdk-headless perl pipx python3 python3-full
          python3-pip ruby sphinx-common tcl-expect-dev tex-common texi2html texinfo)

    for pkg in ${pkgs[@]}; do
        if ! installed "${pkg}"; then
            missing_pkgs+=" ${pkg}"
        fi
    done

    if [ -n "${missing_pkgs}" ]; then
        for i in "${missing_pkgs}"
        do
            sudo apt -y install ${i}
            sudo apt -y autoremove
            clear
        done
    fi
}

#
# DETECT THE HIGHEST GCC VERSION ALREADY INSTALLED AND INSTALL THE RESPECTIVE APT PACKAGES
#

get_gcc_ver="$(sudo find /usr/bin/ -name gcc-1* | head -n1)"
case "${get_gcc_ver}" in
    /usr/bin/gcc-10)        apt_gcc_ver='gcc-10-base libgcc-10-dev gcc-10-multilib';;
    /usr/bin/gcc-11)        apt_gcc_ver='gcc-11-base libgcc-11-dev gcc-11-multilib';;
    /usr/bin/gcc-12)        apt_gcc_ver='gcc-12-base libgcc-12-dev gcc-12-multilib';;
    *)                      clear;;
esac

if [ -n "${apt_gcc_ver}" ]; then
    pkgs_fn "${apt_gcc_ver}"
fi

#
# INSTALL PYTHON MODULES
#

py_pkgs=(types-gdb os.path2 mbs-sys tempfile2 PrettyGcov json2json pytest
         csv23 time-tools argparse3 pathlib shutil-extra latex Pygments)

for py_pkg in ${py_pkgs[@]}; do
    if ! pip show "${py_pkg}" &>/dev/null; then
        missing_py_pkgs+=" ${py_pkg}"
    fi
done

if [ -n "${missing_py_pkgs}" ]; then
    rm_pip_lock="$(find /usr/lib/python3* -name EXTERNALLY-MANAGED)"
    if [ -n "${rm_pip_lock}" ]; then
        sudo rm "${rm_pip_lock}"
    fi
    pip install --user ${missing_py_pkgs}
fi

#
# DETERMINE WHAT VERSION OF LINUX WE ARE ON
#

os_ver_check_fn()
{
    debian_pkgs='libadacgi6-dev libgm2-12-dev libgm2-17'

    case "${VER}" in
            23.04|22.10|22.04)      pkgs_fn 'linux-libc-dev:i386 libadacgi4-dev libgm2-15';;
            20.04)                  pkgs_fn 'libgm2-10-dev';;
            18.04)                  clear;;
            12)                     pkgs_fn "${debian_pkgs} gnat-12 libiconv-hook-dev";;
            11)                     pkgs_fn "${debian_pkgs} gnat-10 libiconv-hook-dev";;
            10)                     pkgs_fn "${debian_pkgs} gnat-8";;
            *)                      fail_fn 'Could not detect the OS version.';;
    esac
}

#
# GET CURRENT OS INFORMATION
#

if [ -f /etc/os-release ]; then
    source /etc/os-release
    OS="${NAME}"
    VER="${VERSION_ID}"
elif "$(type -P lsb_release)" &>/dev/null; then
    OS="$(lsb_release -si)"
    VER="$(lsb_release -sr)"
elif [ -f /etc/lsb-release ]; then
    source /etc/lsb-release
    OS="${DISTRIB_ID}"
    VER="${DISTRIB_RELEASE}"
elif [ -f /etc/debian_version ]; then
    OS=Debian
    VER="$(cat /etc/debian_version)"
else
    OS="$(uname -s)"
    VER="$(uname -r)"
fi

#
# TEST THE OS AND ITS VERSION
#

case "${OS}" in
    Debian*)        os_ver_check_fn;;
    Ubuntu)         os_ver_check_fn;;
    *)              fail_fn 'Could not detect the OS architecture.';;
esac

#
# CREATE SOFT LINKS TO FIX LINKING BUGS
#

if [ -f /usr/include/asm-generic ]; then
    if [ ! -f /usr/include/asm ]; then
        sudo ln -fs /usr/include/asm-generic /usr/include/asm 2>&1
    fi
fi

#
# IF THE CUDA SDK TOOLKIT IS INSTALLED ENABLE IT WHEN BUILDING GCC
#

iscuda="$(sudo find /usr/local/ -type f -name nvcc)"

if [ -n "${iscuda}" ]; then
    cuda_check=--with-cuda-driver
else
    cuda_check=--without-cuda-driver
fi

#
# PRINT SCRIPT BANNER
#

function box_out_banner()
{
    input_char=$(echo "${@}" | wc -c)
    line=$(for i in $(seq 0 ${input_char}); do printf '-'; done)
    tput bold
    line="$(tput setaf 3)${line}"
    space="${line//-/ }"
    echo " ${line}"
    printf '|' ; echo -n "${space}" ; printf "%s\n" '|';
    printf '| ' ;tput setaf 4; echo -n "${@}"; tput setaf 3 ; printf "%s\n" ' |';
    printf '|' ; echo -n "${space}" ; printf "%s\n" '|';
    echo " ${line}"
    tput sgr 0
}

box_out_banner "GCC Build Script: v${script_ver}"

#
# INSTALL FROM SOURCE CODE
#

if build 'm4' 'latest'; then
    download 'https://ftp.gnu.org/gnu/m4/m4-latest.tar.xz'
    execute ./configure --prefix="${workspace}" \
                        --disable-nls           \
                        --enable-c++            \
                        --enable-threads=posix
    execute make "-j${cpu_threads}"
    execute make install
    build_done 'm4' 'latest'
fi

if build 'automake' '1.16.5'; then
    download 'https://ftp.gnu.org/gnu/automake/automake-1.16.5.tar.xz'
    execute ./bootstrap
    execute autoreconf -fi
    execute ./configure --prefix="${workspace}"
    execute make "-j${cpu_threads}"
    execute make install
    build_done 'automake' '1.16.5'
fi

if build 'libtool' '2.4.7'; then
    download 'https://ftp.gnu.org/gnu/libtool/libtool-2.4.7.tar.xz'
    execute ./configure --prefix="${workspace}"
    execute make "-j${cpu_threads}"
    execute make install
    build_done 'libtool' '2.4.7'
fi

if build 'autoconf' '2.69'; then
    download 'https://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.xz'
    execute ./configure --prefix="${workspace}"
    execute make "-j${cpu_threads}"
    execute make install
    build_done 'autoconf' '2.69'
fi

git_ver_fn 'gperftools/gperftools' '1' 'R'
g_ver="${g_ver//gperftools-/}"
if build 'gperftools' "${g_ver}"; then
    download "https://github.com/gperftools/gperftools/releases/download/gperftools-${g_ver}/gperftools-${g_ver}.tar.gz"
    execute ./configure --prefix="${workspace}" --disable-shared
    execute make "-j${cpu_threads}"
    execute make install
    build_done 'gperftools' "${g_ver}"
fi

git_ver_fn 'facebook/zstd' '1' 'R'
g_ver="${g_ver#Zstandard v}"
if build 'zstd' "${g_ver}"; then
    download "https://github.com/facebook/zstd/releases/download/v${g_ver}/zstd-${g_ver}.tar.gz"
    cd build/cmake || exit 1
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="${workspace}",BUILD_TYPE=Release} \
        -DBUILD_SHARED_LIBS=OFF -G Ninja -Wno-dev
    execute ninja "-j${cpu_threads}" -C build
    execute ninja "-j${cpu_threads}" -C build install
    build_done 'zstd' "${g_ver}"
fi

git_ver_fn 'madler/zlib' '1' 'R'
g_ver="${g_ver#zlib }"
if build 'zlib' "${g_ver}"; then
    download "https://github.com/madler/zlib/releases/download/v${g_ver}/zlib-${g_ver}.tar.gz"
    execute ./configure --prefix="${workspace}"
    execute make "-j${cpu_threads}"
    execute make install
    build_done 'zlib' "${g_ver}"
fi

#
# START GCC BUILD
#

gcc_prompt()
{
    printf "%s\n%s\n\n%s\n%s\n%s\n%s\n%s\n\n" \
        'Choose the GCC version(s) to install' \
        '======================================' \
        '[1] All' \
        '[2] GCC 12+13' \
        '[3] GCC 11' \
        '[4] GCC 12' \
        '[5] GCC 13'
        read -p 'Your choices are (1 to 4): ' answer

    case "${answer}" in
        1)      gcc_choice=1;;
        2)      gcc_choice=2;;
        3)      gcc_choice=3;;
        4)      gcc_choice=4;;
        5)      gcc_choice=5;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Resetting script...'
                sleep 3
                unset answer
                clear
                gcc_prompt
                ;;
    esac
}

echo

build_gcc_11_fn()
{
    if [ -d "${packages}/gcc-11.4.0" ]; then
        sudo rm -fr "${packages}/gcc-11.4.0"
    fi
    if build 'gcc-11' '11.4.0'; then
        download 'https://ftp.gnu.org/gnu/gcc/gcc-11.4.0/gcc-11.4.0.tar.xz'
        execute autoreconf -fi
        execute sudo ./contrib/download_prerequisites
        mkdir builddir
        cd builddir || exit 1
        execute ../configure                        \
            --prefix="${install_dir}"               \
            --{build,host,target}=x86_64-linux-gnu  \
            --disable-assembly                      \
            --disable-nls                           \
            --disable-vtable-verify                 \
            --disable-werror                        \
            --enable-bootstrap                      \
            --enable-checking=yes                   \
            --enable-default-pie                    \
            --enable-gnu-unique-object              \
            --enable-languages=all                  \
            --enable-libphobos-checking             \
            --enable-lto                            \
            --enable-multilib                       \
            --enable-plugin                         \
            --enable-threads=posix                  \
            --program-prefix=x86_64-linux-gnu       \
            --program-suffix=-11                    \
            --with-gcc-major-version-only           \
            --with-isl=/usr                         \
            --with-libiconv-prefix=/usr             \
            --with-link-serialization=2             \
            --with-target-system-zlib=auto          \
            --with-tune=generic                     \
            --with-zstd="${workspace}"              \
            "${cuda_check}"                         \
            --without-included-gettext
        printf "\n%s\n%s\n\n" \
            '$ Compiling gcc-11 with languages=all' \
            '$ This is going to take a while...'
        execute make "-j${cpu_threads}"
        execute sudo make install-strip
        execute sudo libtool --finish "${install_dir}/libexec/gcc/x86_64-linux-gnu/11"
        execute sudo libtool --finish "${install_dir}/lib"
        build_done 'gcc-11' '11.4.0'
    fi
}

build_gcc_12_fn()
{
    if [ -d "${packages}/gcc-12.3.0" ]; then
        sudo rm -fr "${packages}/gcc-12.3.0"
    fi
    if build 'gcc-12' '12.3.0'; then
        download 'https://ftp.gnu.org/gnu/gcc/gcc-12.3.0/gcc-12.3.0.tar.xz'
        execute autoreconf -fi
        execute sudo ./contrib/download_prerequisites
        mkdir builddir
        cd builddir || exit 1
        execute ../configure                        \
            --prefix="${install_dir}"               \
            --{build,host,target}=x86_64-linux-gnu  \
            --disable-assembly                      \
            --disable-nls                           \
            --disable-vtable-verify                 \
            --disable-werror                        \
            --enable-bootstrap                      \
            --enable-checking=yes                   \
            --enable-default-pie                    \
            --enable-gnu-unique-object              \
            --enable-languages=all                  \
            --enable-libphobos-checking             \
            --enable-lto                            \
            --enable-multilib                       \
            --enable-plugin                         \
            --enable-threads=posix                  \
            --program-prefix=x86_64-linux-gnu       \
            --program-suffix=-12                    \
            --with-gcc-major-version-only           \
            --with-isl=/usr                         \
            --with-libiconv-prefix=/usr             \
            --with-link-serialization=2             \
            --with-target-system-zlib=auto          \
            --with-tune=generic                     \
            --with-zstd="${workspace}"              \
            "${cuda_check}"                         \
            --without-included-gettext
        printf "\n%s\n%s\n\n" \
            "$ Compiling gcc-12 with languages=all" \
            '$ This is going to take a while...'
        execute make "-j${cpu_threads}"
        execute sudo make install-strip
        execute sudo libtool --finish "${install_dir}/libexec/gcc/x86_64-linux-gnu/12"
        execute sudo libtool --finish "${install_dir}/lib"
        build_done 'gcc-12' '12.3.0'
    fi
}

build_gcc_13_fn()
{
    if [ -d "${packages}/gcc-13.2.0" ]; then
        sudo rm -fr "${packages}/gcc-13.2.0"
    fi
    if build 'gcc-13' '13.2.0'; then
        download 'https://ftp.gnu.org/gnu/gcc/gcc-13.2.0/gcc-13.2.0.tar.xz'
        execute autoreconf -fi
        execute sudo ./contrib/download_prerequisites
        mkdir builddir
        cd builddir || exit 1
        execute ../configure                        \
            --prefix="${install_dir}"               \
            --{build,host,target}=x86_64-linux-gnu  \
            --disable-assembly                      \
            --disable-nls                           \
            --disable-vtable-verify                 \
            --disable-werror                        \
            --enable-checking=yes                   \
            --enable-default-pie                    \
            --enable-gnu-unique-object              \
            --enable-languages=all                  \
            --enable-libphobos-checking             \
            --enable-lto                            \
            --enable-multilib                       \
            --enable-offload-defaulted              \
            --enable-plugin                         \
            --enable-threads=posix                  \
            --program-prefix=x86_64-linux-gnu       \
            --program-suffix=-13                    \
            --with-gcc-major-version-only           \
            --with-isl=/usr                         \
            --with-libiconv-prefix=/usr             \
            --with-link-serialization=2             \
            --with-target-system-zlib=auto          \
            --with-tune=generic                     \
            --with-zstd="${workspace}"              \
            "${cuda_check}"                         \
            --without-included-gettext
        printf "\n%s\n%s\n\n" \
            '$ Compiling gcc-13 with languages=all' \
            '$ This is going to take a while...'
        execute make "-j${cpu_threads}"
        execute sudo make install-strip
        execute sudo libtool --finish "${install_dir}/libexec/gcc/x86_64-linux-gnu/13"
        execute sudo libtool --finish "${install_dir}/lib"
        build_done 'gcc-13' '13.2.0'
    fi
}

#
# PROMPT THE USER TO SELECT THE GCC VERSION(S) TO INSTALL
#

gcc_prompt

case "${gcc_choice}" in
    1)
            build_gcc_11_fn
            build_gcc_12_fn
            build_gcc_13_fn
            ;;
    2)
            build_gcc_12_fn
            build_gcc_13_fn
            ;;
    3)      build_gcc_11_fn;;
    4)      build_gcc_12_fn;;
    5)      build_gcc_13_fn;;
    *)      fail_fn 'Unable to find the gcc_choice variable.';;
esac

# CREATE SOFT LINKS TO SHORTEN THE BINARY NAMES
create_gcc_links_fn

# LDCONFIG MUST BE RUN NEXT IN ORDER TO UPDATE FILE CHANGES
sudo ldconfig 2>/dev/null

# SHOW THE NEWLY INSTALLED VERSION OF EACH PACKAGE
show_ver_fn

# PROMPT THE USER TO CLEAN UP THE BUILD FILES
cleanup_fn

# SHOW THE EXIT MESSAGE
exit_fn
