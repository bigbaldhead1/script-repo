#!/usr/bin/env bash

#################################################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/edit/main/util-linux/Installer%20Scripts/GNU%20Software/build-wget
##
##  Purpose: Build GNU Wget from source code
##
##  Features: +cares +digest +gpgme +https -ipv6 +iri +large-file +metalink -nls +ntlm +opie +psl +ssl/openssl
##
##  Updated: 11.24.23
##
##  Script version: 1.2
##
##  Added: libmetalink-dev library files
##
#################################################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET THE VARIABLES
#

script_ver=1.2
archive_dir=wget-latest
archive_url=https://ftp.gnu.org/gnu/wget/"${archive_dir}".tar.lz
archive_ext="${archive_url//*.}"
archive_name="${archive_dir}.tar.${archive_ext}"
cwd="${PWD}"/wget-build-script
install_dir=/usr/local
pc_type=x86_64-linux-gnu
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo

printf "%s\n%s\n\n"                      \
    "Wget Build Script - v${script_ver}" \
    '==============================================='
sleep 2

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}" ]; then
    sudo rm -fr "${cwd}"
fi
mkdir -p "${cwd}"

#
# SET THE C/CXX COMPILERS & SET THE COMPILER OPTIMIZATION FLAGS
#

CC=gcc
CXX=g++
CFLAGS='-g -O3 -pipe -march=native'
CXXFLAGS="${CFLAGS}"
CPPFLAGS='-I/usr/local/include -I/usr/include/libxml2 -I/usr/include'
LDFLAGS='-L/usr/local/ssl/lib -L/usr/local/lib64 -L/usr/local/lib'
LDFLAGS+=' -L/usr/lib/x86_64-linux-gnu -L/usr/lib64 -L/usr/lib -L/lib64 -L/lib'
LIBS="$(pkg-config --libs libxml-2.0)"
export CC CXX CFLAGS CPPFLAGS CXXFLAGS LDFLAGS LIBS

#
# SET THE PATH VARIABLE
#

export PATH="/usr/lib/ccache:${PATH}"

#
# SET THE PKG_CONFIG_PATH VARIABLE
#

PKG_CONFIG_PATH="\
/usr/local/ssl/lib/pkgconfig:\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/x86_64-linux-gnu/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n\n"                                       \
        'Make sure to star this repository to show your support!' \
        "${web_repo}"
    exit 0
}

fail_fn()
{
    printf "\n%s\n\n%s\n\n" \
        "${1}"              \
        "To report a bug create an issue at: ${web_repo}/issues"
    exit 1
}

cleanup_fn()
{
    local choice

    printf "%s\n%s\n%s\n\n%s\n%s\n\n"                  \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes'                                      \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice
    clear

    case "${choice}" in
        1)      sudo rm -fr "${cwd}";;
        2)      return 0;;
        *)
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

version_fn()
{
    clear
    printf "%s\n\n" 'The newly installed Wget stats are listed below.'
    wget -V | grep -Ev '^(<|Copy|License|Orig|Please|This|There)' | sed -e 's/GNU //g' -e 's/ built on linux-gnu//g' | sed -E 's/.$//g'
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(apt-transport-https apt-utils autoconf autoconf-archive autogen automake autopoint autotools-dev
      build-essential bzip2 ca-certificates ccache clang cmake curl gfortran git google-perftools graphviz
      jq lcov libaria2-0 libaria2-0-dev libc-ares-dev libcppunit-dev libcunit1-dev libcurl4 libcurl4-openssl-dev
      libdmalloc-dev libec-dev libedit-dev libev-dev libevent-dev libexiv2-27 libexpat1-dev libgcc-12-dev
      libgcrypt20-dev libgexiv2-2 libgimp2.0 libgmp3-dev libgpg-error-dev libgtk-4-doc libgpgme-dev libicu-dev
      libjemalloc-dev libkrb5-3 libldap2-dev libldap-dev liblttng-ust-dev liblzma-dev libmbedtls-dev libnghttp2-dev
      libntlm0-dev libparted-dev libpng-dev libpsl-dev librtmp-dev librust-bzip2-dev librust-openssl-dev libsqlite3-dev
      libssh2-1-dev libssh-dev libssl-dev libtinfo5 libticonv-dev libtinfo-dev libtool libtool-bin libunistring-dev
      libunwind8 libuv1-dev libxml2-dev libzstd-dev lzip m4 nettle-dev default-jdk-headless openssh-server pkg-config
      python3-dev python3-numpy python3-packaging python3-pip python3-pytest python3-setuptools python3-wheel re2c rsync
      unzip valgrind zip zlib1g-dev)

for i in ${pkgs[@]}
do
    missing_pkg="$(sudo dpkg -l | grep -o "${i}")"

    if [ -z "${missing_pkg}" ]; then
        missing_pkgs+=" ${i}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    sudo apt -y install ${missing_pkgs}
    sudo apt -y autoremove
    clear
fi

#
# DOWNLOAD THE ARCHIVE FILE METALINK
#

if [ ! -f "${cwd}"/libmetalink-0.1.3.tar.xz ]; then
    curl -A "${user_agent}" -Lso "${cwd}"/libmetalink-0.1.3.tar.xz 'https://github.com/metalink-dev/libmetalink/releases/download/release-0.1.3/libmetalink-0.1.3.tar.xz'
fi

#
# CREATE OUTPUT DIRECTORY METALINK
#

if [ -d "${cwd}"/libmetalink-0.1.3 ]; then
    sudo rm -fr "${cwd}"/libmetalink-0.1.3
fi
mkdir -p "${cwd}"/libmetalink-0.1.3/build

#
# EXTRACT THE ARCHIVE FILE METALINK
#

if ! tar -xf "${cwd}"/libmetalink-0.1.3.tar.xz -C "${cwd}"/libmetalink-0.1.3 --strip-components 1; then
    fail_fn "Failed to extract: ${cwd}/libmetalink-0.1.3.tar.xz"
fi

#
# BUILD PROGRAM FROM SOURCE METALINK
#

printf "%s\n%s\n\n"                     \
    'Build libmetalink - version 0.1.3' \
    '==============================================='
sleep 2

cd "${cwd}"/libmetalink-0.1.3 || exit 1
autoreconf -fi
cd build || exit 1
../buildconf
../configure --prefix="${install_dir}"          \
             --{build,host,target}="${pc_type}" \
             --enable-silent-rules              \
             --with-pic                         \
             --with-libexpat                    \
             --with-libxml2                     \
             --with-xml-prefix=/usr             \
             PKG_CONFIG="$(type -P pkg-config)"

if ! make "-j$(nproc --all)"; then
    fail_fn "Failed to execute: make -j$(nproc --all). Line: ${LINENO}"
    exit 1
fi

if ! sudo make install; then
    fail_fn "Failed to execute: sudo make install. Line: ${LINENO}"
    exit 1
fi

# FIX MISSING LIBRARY .SO FILE
metalink_lib="$(sudo find /usr/ -type f -name 'libmetalink.so*')"
metalink_trim="$(echo "${metalink_lib}" | sed 's|\(.*\)/.*|\1|')"

if [ -n "${metalink_lib}" ]; then
    if [ ! -f "${metalink_trim}"/libmetalink.so.3 ]; then
        sudo ln -s "${metalink_lib}" "${metalink_trim}"/libmetalink.so.3
    fi
fi

# UPDATE THE METALINK LD LINKER LIBRARY FILES
sudo ldconfig "${metalink_trim}"

#
# CREATE OUTPUT DIRECTORY WGET
#

if [ -d "${cwd}/${archive_dir}" ]; then
    sudo rm -fr "${cwd}/${archive_dir}"
fi
mkdir -p "${cwd}/${archive_dir}/build"

#
# DOWNLOAD THE ARCHIVE FILE WGET
#

if [ ! -f "${cwd}/${archive_name}" ]; then
    curl -A "${user_agent}" -Lso "${cwd}/${archive_name}" "${archive_url}"
fi

#
# EXTRACT THE ARCHIVE FILE WGET
#

if ! tar -xf "${cwd}/${archive_name}" -C "${cwd}/${archive_dir}" --strip-components 1; then
    fail_fn "Failed to extract: ${cwd}/${archive_name}"
fi

if type -P 'update-ca-certificates' &>/dev/null; then
    sudo update-ca-certificates
fi

#
# BUILD PROGRAM FROM SOURCE WGET
#

printf "\n%s\n%s\n\n"             \
    'Build Wget - version latest' \
    '==============================================='
sleep 2

# FIND THE CORRECT OPENSSL DIRECTORIES
openssl_lib_dir="$(pkg-config --libs-only-L openssl | awk '{print $1}' | sed 's/-L//')"
openssl_include_dir="$(pkg-config --cflags-only-I openssl | awk '{print $1}' | sed 's/-I//')"

cd "${cwd}/${archive_dir}/build" || exit 1
../configure --prefix="${install_dir}"               \
             --{build,host}="${pc_type}"             \
             --disable-debug                         \
             --disable-ipv6                          \
             --disable-nls                           \
             --enable-silent-rules                   \
             --enable-threads=posix                  \
             --enable-valgrind-tests                 \
             --enable-year2038                       \
             --with-cares                            \
             --with-gpgme-prefix=/usr                \
             --with-included-libunistring            \
             --with-libiconv-prefix=/usr             \
             --with-libintl-prefix=/usr              \
             --with-libssl-prefix=/usr               \
             --with-libunistring-prefix=/usr         \
             --with-linux-crypto                     \
             --with-metalink                         \
             --with-openssl=yes                      \
             --with-ssl=openssl                      \
             PKG_CONFIG="$(type -P pkg-config)"      \
             OPENSSL_LIBS="${openssl_lib_dir}"       \
             OPENSSL_CFLAGS="${openssl_include_dir}" \
             GPGME_LIBS="$(pkg-config --libs gpgme)" \
             GPGME_CFLAGS='-I/usr/include'

if ! make "-j$(nproc --all)"; then
    fail_fn "Failed to execute: make -j$(nproc --all). Line: ${LINENO}"
    exit 1
fi

if ! sudo make install; then
    fail_fn "Failed to execute: sudo make install. Line: ${LINENO}"
    exit 1
fi

#
# SET THE CERTS DIRECTORY LOCATION FOR WGET
#

openssl_certs_dir="$(sudo find /usr -type d -name certs | sort -r | head -n1)"
if [ -n "${openssl_certs_dir}" ]; then
    echo "ca_directory=${openssl_certs_dir}" | sudo tee '/usr/local/etc/wgetrc' >/dev/null
else
    echo 'ca_directory=/etc/ssl/certs' | sudo tee '/usr/local/etc/wgetrc' >/dev/null
fi

# PROMPT USER TO CLEAN UP FILES
cleanup_fn

# SHOW VERSION
version_fn

# SHOW EXIT MESSAGE
exit_fn
