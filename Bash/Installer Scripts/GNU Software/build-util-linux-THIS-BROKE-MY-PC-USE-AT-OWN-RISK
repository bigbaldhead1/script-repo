#!/Usr/bin/env bash


clear

if [ "$EUID" -eq '0' ]; then
    echo "You must run this script without root or sudo."
    exit 1
fi


script_ver=1.1
archive_dir=util-linux-2.39.2
archive_url=https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.39/$archive_dir.tar.xz
archive_ext="$archive_url//*."
archive_name="$archive_dir.tar.$archive_ext"
cwd="$PWD"/util-linux-build-script
install_dir=/usr
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo

printf "%s\n%s\n\n" \
    "util-linux build script - v$script_ver" \
    '==============================================='


if [ -d "$cwd" ]; then
    sudo rm -fr "$cwd"
fi
mkdir -p "$cwd"


export CC=gcc CXX=g++


export {CFLAGS,CXXFLAGS}='-g -O3 -pipe -fno-plt -march=native'


PATH="\
/usr/lib/ccache:\
$HOME/perl5/bin:\
$HOME/.cargo/bin:\
$HOME/.local/bin:\
/usr/local/sbin:\
/usr/local/cuda/bin:\
/usr/local/x86_64-linux-gnu/bin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/games:\
/usr/games:\
/snap/bin\
"
export PATH


PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/x86_64-linux-gnu/pkgconfig:\
/usr/lib/dbus-1.0/debug-build/lib/pkgconfig\
"
export PKG_CONFIG_PATH


exit_fn() {
    printf "\n%s\n\n%s\n\n" \
        'Make sure to star this repository to show your support!' \
        "$web_repo"
    exit 0
}

fail_fn() {
    printf "\n%s\n\n%s\n\n" \
        "$1" \
        "To report a bug create an issue at: $web_repo/issues"
    exit 1
}

cleanup_fn() {
    local choice

    printf "%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "$choice" in
        1)      sudo rm -fr "$cwd";;
        2)      echo;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

installed() { return $(dpkg-query -W -f '$Status\n' "$1" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}'); }


pkgs=(asciidoc autoconf autoconf-archive autogen automake binutils bison
      build-essential bzip2 ccache curl libaudit-dev libc6-dev libintl-perl
      libpth-dev libselinux1-dev libticonv-dev libtool libtool-bin lzip
      lzma-dev m4 nasm po4a texinfo yasm zlib1g-dev)

for pkg in ${pkgs[@]}
do
    if ! installed "$pkg"; then
        missing_pkgs+=" $pkg"
    fi
done

if [ -n "$missing_pkgs" ]; then
    clear
    echo '$ Installing missing packages'
    echo
    for i in "$missing_pkgs"
        do
            if ! sudo apt install $i; then
                fail_fn "Failed to install the APT packages:Line $LINENO"
            fi
        done
else
    echo '$ The packages are already installed.'
    echo
fi


if [ ! -f "$cwd/$archive_name" ]; then
    curl -A "$user_agent" -Lso "$cwd/$archive_name" "$archive_url"
fi


if [ -d "$cwd/$archive_dir" ]; then
    sudo rm -fr "$cwd/$archive_dir"
fi
mkdir -p "$cwd/$archive_dir/build"


if ! tar -xf "$cwd/$archive_name" -C "$cwd/$archive_dir" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: $cwd/$archive_name"
    exit 1
fi


extralists=(blkid,fdisk,losetup,mount,nsenter,sfdisk,umount,unshare)

cd "$cwd/$archive_dir" || exit 1
export AL_OPTS='-I/usr/share/aclocal'
./autogen.sh
cd build || exit 1
../configure --prefix="$install_dir"                               \
             --{build,host}=x86_64-linux-gnu                         \
             --disable-nls                                           \
             --disable-werror                                        \
             --enable-line                                           \
             --enable-newgrp                                         \
             --enable-static-programs="${extralists[@]}"             \
             --enable-ubsan                                          \
             --enable-usrdir-path                                    \
             --enable-write                                          \
             --with-audit                                            \
             --with-libiconv-prefix=/usr                             \
             --with-libintl-prefix=/usr                              \
             --with-pic                                              \
             --with-pkgconfigdir=/usr/lib/x86_64-linux-gnu/pkgconfig \
             --with-selinux                                          \
             --with-systemdsystemunitdir=/usr                        \
             PKG_CONFIG="$(type -P pkg-config)"                      \
             PKG_CONFIG_PATH="$PKG_CONFIG_PATH"
make "-j$(nproc --all)"
if ! sudo make install; then
    fail_fn "Failed to execute: sudo make install:Line $LINENO"
    exit 1
fi

if [ -f /usr/local/lib/libmount.so.1 ]; then
    sudo ln -sf /usr/local/lib/libmount.so.1 /lib/x86_64-linux-gnu/
fi

cleanup_fn

exit_fn
