#!/usr/bin/env bash
clear

# Purpose: Install the latest 7-zip package across multiple OS types.
# Updated: 01.16.24
# Script version: 1.4

# GitHub Repository
web_repo='https://github.com/slyfox1186/script-repo'

# Set variables
script_ver='1.4'
version='7z2301'
tar_file="$version.tar.xz"
cwd="/home/jman/tmp/7zip-build-script"
output_dir="$cwd/$version"
install_dir='/usr/local/bin'
user_agents=("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3" "User-Agent: curl/7.68.0")

# Function to print 7-Zip version
version_fn() {
    local version_info
    version_info="$("$install_dir/7z" | awk -F ' |\\(' '/7-Zip/{print $4; exit}')"
    printf "\n7-Zip has been updated to version %s\n\n" "$version_info"
}

# Function to print script banner
box_out_banner() {
    input_char=$(echo "$@" | wc -c)
    line=$(for i in $(seq 0 ${input_char}); do printf '-'; done)
    tput bold
    line="$(tput setaf 3)$line"
    space=${line//-/ }
    echo " $line"
    printf '|' ; echo -n "${space}" ; printf "%s\n" '|';
    printf '| ' ;tput setaf 4; echo -n "$@"; tput setaf 3 ; printf "%s\n" ' |';
    printf '|' ; echo -n "${space}" ; printf "%s\n" '|';
    echo " $line"
    tput sgr 0
}
box_out_banner "7-Zip Install Script"

# Function to handle errors
fail_fn() {
    echo -e "\n\n$1\n\nPlease create a support ticket at:\n$web_repo/issues"
    exit 1
}

# Function to download the file with retries
download_with_retry() {
    local url="$1"
    local dest="$2"
    local max_attempts=3
    local attempt=1

    while [ $attempt -le $max_attempts ]; do
        wget -U "${user_agents[$((attempt-1))]}" -cqO "$dest" "$url" && return 0
        ((attempt++))
        sleep 2 # Wait for a few seconds before retrying
    done

    return 1
}

# Check if wget is not installed and install it
if ! command -v wget &>/dev/null; then
    sudo apt -y install wget
    sudo apt -y autoremove
    clear
fi

# Check if the '7zip-build-script' directory exists and delete it
if [ -d "$cwd" ]; then
    echo -e "\nDeleting existing '7zip-build-script' directory..."
    sudo rm -fr "$cwd"
fi

# Create '7zip-build-script' directory
mkdir -p "$cwd"

# Detect PC architecture and set download URL
case "$(uname -m)" in
    x86_64)          url='linux-x64.tar.xz';;
    i386|i686)       url='linux-x86.tar.xz';;
    aarch64*|armv8*) url='linux-arm64.tar.xz';;
    arm|armv7*)      url='linux-arm.tar.xz';;
    *)               fail_fn "Unrecognized architecture '$(uname -m)'";;
esac

# Download the tar file with retries if missing
if [ ! -f "$cwd/$tar_file" ]; then
    download_with_retry "https://www.7-zip.org/a/${version}-${url}" "$cwd/$tar_file" || fail_fn "Failed to download the file"
fi

# Extract files into directory '7z'
mkdir -p "$output_dir"
if [ ! -f "$cwd/$tar_file" ]; then
    fail_fn "The script was unable to find the download file '$cwd/$tar_file'"
fi

if ! tar -xf "$cwd/$tar_file" -C "$output_dir"; then
    fail_fn "The script was unable to extract the archive: '$cwd/$tar_file'"
fi

# Copy the file to its destination or throw an error if the copying of the file fails
if ! sudo cp -f "$cwd/$version/7zzs" "$install_dir/7z"; then
    fail_fn "The script was unable to copy the static file '7zzs' to '$install_dir/7z'"
else
    sudo chmod 755 "$install_dir/7z"
fi

# Show the newly installed 7-Zip version
version_fn

# Clean up the install files
sudo rm -fr "$cwd"
