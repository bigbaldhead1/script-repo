#!/usr/bin/env bash
# shellcheck disable=SC2068,SC2086,SC1003,SC1091,SC2162

####################################################################################
##
##  Purpose:
##          - Install OpenSSL (Short Term Support) from the source code.
##
##  Script:
##          - Updated: 11.24.23
##          - Version: 1.2
##
##  OpenSSL:
##          - Version: 1.1.1w
##
####################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET VARIABLES
#

script_ver=1.2
archive_dir=openssl-1.1.1w
archive_url=https://www.openssl.org/source/"${archive_dir}".tar.gz
archive_ext="${archive_url//*.}"
archive_name="${archive_dir}.tar.${archive_ext}"
cwd="${PWD}"/openssl-lite-build-script
install_dir=/usr/local/ssl
ssl_dir="${install_dir}"
cert_dir="${install_dir}"/certs
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo

printf "%s\n%s\n\n"                              \
    "OpenSSL Lite Build Script - v${script_ver}" \
    '==============================================='
sleep 2

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}" ]; then
    sudo rm -fr "${cwd}"
fi
mkdir -p "${cwd}"

#
# SET THE CC/CXX COMPILERS & THE COMPILER OPTIMIZATION FLAGS
#

CC=clang
CXX=clang++
CFLAGS='-Wall -pthread -g -O2 -pipe -march=native'
CXXFLAGS="${CFLAGS}"
SHARED_CFLAG='-fPIC'
CPPFLAGS='-I/usr/local/include -I/usr/include'
LDFLAGS='-L/usr/local/ssl/lib -L/usr/local/lib64 -L/usr/local/lib'
LDFLAGS+=' -L/usr/lib/x86_64-linux-gnu -L/usr/lib64 -L/usr/lib -L/lib64 -L/lib'
LDLIBS="${LDFLAGS}"
LD_LIBRARY_PATH="${install_dir}/lib64:${LD_LIBRARY_PATH}"
export CC CXX CFLAGS CPPFLAGS CXXFLAGS LDFLAGS LD_LIBRARY_PATH LDLIBS SHARED_CFLAG

#
# SET THE PATH
#

PATH="\
/usr/lib/ccache:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
${install_dir}/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

#
# SET THE PKG_CONFIG_PATH
#

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/usr/local/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/usr/local/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/usr/local/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n\n"                                         \
        'Make sure to star this repository to show your support!' \
        "${web_repo}"
    exit 0
}

fail_fn()
{
    printf "\n\n%s\n\n%s\n\n%s\n\n"                  \
        "${1}"                                       \
        'To report a bug please create an issue at:' \
        "${web_repo}/issues"
    exit 1
}

cleanup_fn()
{
    local choice

    printf "\n%s\n%s\n%s\n\n%s\n%s\n\n"                \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes'                                      \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "${choice}" in
        1)      sudo rm -fr "${cwd}";;
        2)      echo;;
        *)
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

display_stats_fn()
{
    clear
    printf "%s\n\n" 'The newly installed OpenSSL version information is listed below.'
    openssl version -a
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(autoconf autogen automake build-essential ca-certificates ccache checkinstall clang curl
      libc-ares-dev libcurl4-openssl-dev libdmalloc-dev libgcrypt20-dev libgmp-dev libgpg-error-dev
      libjemalloc-dev libmbedtls-dev libsctp-dev libssh2-1-dev libssh-dev libssl-dev libtool libtool-bin
      libxml2-dev m4 zlib1g-dev)

for pkg in ${pkgs[@]}
do
    missing_pkg="$(sudo dpkg -l | grep -o "${pkg}")"

    if [ -z "${missing_pkg}" ]; then
        missing_pkgs+=" ${pkg}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    sudo apt -y install ${missing_pkgs}
    clear
fi

#
# DOWNLOAD THE ARCHIVE FILE
#

if [ ! -f "${cwd}/${archive_name}" ]; then
    wget -U "${user_agent}" -cqO "${cwd}/${archive_name}" "${archive_url}"
fi

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}/${archive_dir}" ]; then
    sudo rm -fr "${cwd}/${archive_dir}"
fi
mkdir -p "${cwd}/${archive_dir}/build"

#
# EXTRACT ARCHIVE FILES
#

if ! tar -zxf "${cwd}/${archive_name}" -C "${cwd}/${archive_dir}" --strip-components 1; then
    fail_fn "Failed to extract: ${cwd}/${archive_name}"
fi

#
# IF UBUNTU IS THE CURRENT OS THEN YOU MUST SOFTLINK FOR OPENSSL TO FUNCTION
#

ubuntu_os_version() { sudo ln -sf '/usr/lib64/libcrypto.so.3' "/lib/${install_dir}/"; }

find_lsb_release="$(sudo find /usr/bin/ -type f -name 'lsb_release')"

if [ -f '/etc/os-release' ]; then
    . '/etc/os-release'
    OS_TMP="$NAME"
    OS="$(echo "${OS_TMP}" | awk '{print $1}')"
elif [ -n "${find_lsb_release}" ]; then
    OS="$(lsb_release -d | awk '{print $2}')"
else
    fail_fn "Failed to define the \$OS and/or \$VER variables. Line: ${LINENO}"
fi

#
# TEST THE OS AND ITS VERSION IF UBUNTU THEN CALL THE pkgs_fn
#

case "${OS}" in
    Ubuntu)     ubuntu_os_version;;
esac

#
# BUILD PROGRAM FROM SOURCE
#

cd "${cwd}/${archive_dir}" || exit 1
sed -i 's/linux-x86_64-clang/linux-x86_64-rpath/g' 'config'
cd build || exit 1
../Configure linux-x86_64-clang                        \
             -DOPENSSL_USE_IPV6=0                      \
             -Wl,-rpath="${install_dir}"/lib           \
             -Wl,--enable-new-dtags                    \
             --prefix="${install_dir}"                 \
             --openssldir="${ssl_dir}"                 \
             --release                                 \
             --with-zlib-include=/usr/include          \
             --with-zlib-lib=/usr/lib/x86_64-linux-gnu \
             enable-ec_nistp_64_gcc_128                \
             enable-egd                                \
             enable-rc5                                \
             enable-sctp                               \
             enable-shared                             \
             enable-threads                            \
             enable-zlib                               \
             no-tests

echo
if ! make "-j$(nproc --all)"; then
    fail_fn "Failed to execute: make -j$(nproc --all). Line: ${LINENO}"
fi

echo
if ! sudo make install_sw; then
    fail_fn "Failed to execute: sudo make install_sw. Line: ${LINENO}"
fi

#
# INSTALL CA CERTS FROM CURL'S OFFICIAL WEBSITE
#

printf "\n%s\n%s\n\n"                                               \
   'Install the latest security certificate from cURL'\''s website' \
   '==================================================================='
sleep 2

# CREATE CERTS DIRECTORY IF MISSING
if [ ! -d "${cert_dir}" ]; then
    sudo mkdir -p "${cert_dir}"
fi

# DOWNLOAD THE LATEST CACERT.PEM FILE FROM THE OFFICIAL CURL WEBSITE
if ! curl -A "${user_agent}" -Lso "${cwd}"/cacert.pem 'https://curl.se/ca/cacert.pem'; then
    fail_fn "Failed to download the latest \"cacert.pem\" file. Line: ${LINENO}"
fi

# MOVE THE PEM FILE TO THE NEWLY CREATED CERTS DIRECTORY
if ! sudo mv "${cwd}"/cacert.pem "${cert_dir}"/cacert.pem; then
    fail_fn "Failed to move file: ${cwd}/cacert.pem >> ${cert_dir}/cacert.pem. Line: ${LINENO}"
else
    # COPY THE PEM FILE AS A CRT FILE IN THE SPECIAL CA-CERTIFICATES FOLDER SO THE COMMAND WILL FIND AND USE IT WHEN IT IS EXECUTED
    sudo cp "${cert_dir}"/cacert.pem '/usr/local/share/ca-certificates/curl-cacert.crt'
fi

# COPY ALL EXISTING CERT FILES LOCATED IN THE DIRECTORY /etc/ssl/certs TO THE NEWLY CREATED CERTS DIRECTORY
sudo cp -fr /etc/ssl/certs/* "${cert_dir}"

# UPDATE THE SECURITY CERTS THAT WERE MOVED FROM THE /etc/ssl/certs FOLDER
cd "${cert_dir}" || exit 1
sudo c_rehash .
sudo update-ca-certificates

# RUN LDCONFIG TO UPDATE THE LINKER LIBRARY SEARCH PATH TO INCLUDE THE OPENSSL LIB64 DIRECTORY
echo "${install_dir}/lib" | sudo tee '/etc/ld.so.conf.d/openssl-compiled.conf' >/dev/null
sudo ldconfig

# ADD THE NEW OPENSSL BIN TO THE USER'S ~/.bashrc FILE IF NOT ALREADY PRESENT
if ! grep -o '/usr/local/ssl/bin' "${HOME}"/.bashrc &>/dev/null; then
    if grep -o '/usr/local/sbin:\\' "${HOME}"/.bashrc &>/dev/null; then
        sed -i '\/usr\/local\/sbin:\\/i \/usr\/local\/ssl\/bin:\\' "${HOME}"/.bashrc
    else
        sed -i 's/\/usr\/local\/sbin/\/usr\/local\/ssl\/bin:\/usr\/local\/sbin/g' "${HOME}"/.bashrc
    fi
fi

# PROMPT USER TO CLEAN UP FILES
cleanup_fn

# DISPLAY THE UPDATE OPENSSL STATS
display_stats_fn

# SHOW EXIT MESSAGE
exit_fn
