#!/usr/bin/env bash
# shellcheck source=/dev/null disable=sc1003,sc2068,sc2086,sc2162

##  Purpose: install OpenSSL (Short Term Support) from the source code.
##  OpenSSL version: 1.1.1w
##  Updated: 11.28.23

if [ "$EUID" -eq 0 ]; then
    echo "You must run this script without root or sudo."
    exit 1
fi

# Set variables
script_ver=1.3
archive_dir=openssl-1.1.1w
archive_url="https://www.openssl.org/source/$archive_dir.tar.gz"
archive_ext="${archive_url//*.}"
archive_name="$archive_dir.tar.${archive_ext}"
cwd="$PWD/openssl-build-script"
install_dir=/usr/local
ssl_dir="$install_dir"
cert_dir="$install_dir/certs"

echo "OpenSSL Lite Build Script - v${script_ver}"
echo "==============================================="
echo

# Test the os and its version
find_lsb_release="$(sudo find /usr/bin/ -type f -name 'lsb_release')"

if [ -f "/etc/os-release" ]; then
    source "/etc/os-release"
    OS_TMP="$NAME"
    OS="$(echo "${OS_TMP}" | awk '{print $1}')"
elif [ -n "${find_lsb_release}" ]; then
    OS="$(lsb_release -d | awk '{print $2}')"
else
    fail_fn "Failed to define the \$OS and/or \$VER variables. Line: ${LINENO}"
fi

# Create output directory
if [ -d "$cwd" ]; then
    sudo rm -fr "$cwd"
fi
mkdir -p "$cwd"

# Set the cc/cxx compilers & the compiler optimization flags
CC=gcc
CXX=g++
CFLAGS="-D_REENTRANT -m64 -DL_ENDIAN -O3 -fPIC -pipe -fno-plt -fno-plt -march=native"
CXXFLAGS="${CFLAGS}"
CPPFLAGS="-I/usr/local/include -I/usr/include"
LDFLAGS="-Wl,-rpath=/usr/local/lib -Wl,--enable-new-dtags -ldl -L/usr/local/lib64"
LDFLAGS+=" -L/usr/local/lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib64 -L/usr/lib -L/lib64 -L/lib"
export CC CXX CFLAGS CPPFLAGS CXXFLAGS LDFLAGS

# Set the path variable
PATH="\
/usr/lib/ccache:\
${HOME}/perl5/bin:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/cuda/bin:\
/usr/local/x86_64-linux-gnu/bin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/games:\
/usr/games:\
/snap/bin\
"
export PATH

# Set the pkg_config_path variable
PKG_CONFIG_PATH="\
/usr/share/pkgconfig:\
/usr/local/ssl/lib/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/lib/usr/local/pkgconfig:\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/lib/usr/local/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/lib/usr/local/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig\
"
export PKG_CONFIG_PATH

# Create functions
exit_fn()
{
    printf "\n%s\n\n%s\n\n" \
        "Make sure to star this repository to show your support!" \
        "https://github.com/slyfox1186/script-repo"
    exit 0
}

fail_fn()
{
    printf "\n\n%s\n\n%s\n\n%s\n\n" \
        "$1" \
        "To report a bug please create an issue at:" \
        "https://github.com/slyfox1186/script-repo/issues"
    exit 1
}

cleanup_fn()
{
    local choice

    printf "\n%s\n%s\n%s\n\n%s\n%s\n\n" \
        "============================================" \
        "  Do you want to clean up the build files?  " \
        "============================================" \
        "[1] Yes" \
        "[2] No"
    read -p "Your choices are (1 or 2): " choice

    case "${choice}" in
        1)      sudo rm -fr "$cwd";;
        2)      echo;;
        *)
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

display_stats_fn()
{
    sudo ldconfig
    clear
    printf "%s\n\n" "OpenSSL's version output is listed below."
    openssl version -a
}

pacman_pkgs_fn()
{
    local arch_pkgs missing_pkg missing_pkgs pkg
    clear

    arch_pkgs=(autoconf autogen automake base-devel c-ares ca-certificates ccache checkinstall clang
               curl gmp gperftools jemalloc libcurl-gnutls libgcrypt libgpg-error libssh libssh2
               libtool libxml2 lksctp-tools m4 mbedtls mimalloc openssl zlib)

    for pkg in ${arch_pkgs[@]}
    do
        missing_pkg="$(sudo pacman -Qk | grep -o "${pkg}")"

        if [[ -z "${missing_pkg}" ]]; then
            missing_pkgs+=" ${pkg}"
        fi
    done

    if [[ -n "$missing_pkgs" ]]; then
        sudo pacman -Sq --needed --noconfirm $missing_pkgs
    fi
}

apt_pkgs_fn()
{
    local arch_pkgs missing_pkg missing_pkgs pkg
    clear

    pkgs=(autoconf autogen automake build-essential ca-certificates ccache checkinstall clang curl
          libc-ares-dev libcurl4-openssl-dev libdmalloc-dev libgcrypt20-dev libgmp-dev libgpg-error-dev
          libjemalloc-dev libmbedtls-dev libsctp-dev libssh2-1-dev libssh-dev libssl-dev libtool libtool-bin
          libxml2-dev m4 zlib1g-dev)

    for pkg in ${pkgs[@]}
    do
        missing_pkg="$(sudo dpkg -l | grep -o "${pkg}")"

        if [[ -z "${missing_pkg}" ]]; then
            missing_pkgs+=" ${pkg}"
        fi
    done

    if [[ -n "$missing_pkgs" ]]; then
        sudo apt install $missing_pkgs
    fi
}

# Install the required package manager packages
case "${OS}" in
    Arch)   pacman_pkgs_fn ;;
    *)      apt_pkgs_fn ;;
esac
clear

# Download the archive file
if [[ ! -f "$cwd/${archive_name}" ]]; then
    wget -cqO "$cwd/${archive_name}" "${archive_url}"
fi

# Create output directory
if [[ -d "$cwd/$archive_dir" ]]; then
    sudo rm -fr "$cwd/$archive_dir"
fi
mkdir -p "$cwd/$archive_dir/build"

# Extract archive files
if ! tar -zxf "$cwd/${archive_name}" -C "$cwd/$archive_dir" --strip-components 1; then
    fail_fn "Failed to extract: $cwd/${archive_name}"
fi

# Build program from source
cd "$cwd/$archive_dir" || exit 1
cd build || exit 1
../config --prefix="$install_dir" \
          --openssldir="${ssl_dir}" \
          --release \
          --with-zlib-include=/usr/include \
          --with-zlib-lib=/usr/lib/x86_64-linux-gnu \
          -DOPENSSL_USE_IPV6=0 \
          enable-buildtest-c++ \
          enable-ec_nistp_64_gcc_128 \
          enable-egd \
          enable-pic \
          enable-rc5 \
          enable-sctp \
          enable-ssl3 \
          enable-shared \
          enable-threads \
          enable-zlib \
          no-deprecated \
          no-ssl2 \
          no-tests
 
# Modify the makefile using sed to activate the rpath feature of openssl
sed -i 's/linux-x86_64/linux-x86_64-rpath/g' "Makefile"

echo
if ! make "-j$(nproc --all)"; then
    fail_fn "Failed to execute: make -j$(nproc --all). Line: ${LINENO}"
fi

echo
if ! sudo make install_sw; then
    fail_fn "Failed to execute: sudo make install_sw. Line: ${LINENO}"
fi

# If ubuntu is the current os then you must create a soft link for openssl to function
    Ubuntu)     sudo ln -sf "/usr/lib64/libcrypto.so.3" "/lib/$install_dir/" ;;
esac

# Install ca certs from curl's official website
printf "\n%s\n%s\n\n" \
   "Install the latest cURL security certificate" \
   "==================================================="

# Create certs directory if missing
if [ ! -d "$cert_dir" ]; then
    sudo mkdir -p "${cert_dir}"
fi

# Download the latest cacert.pem file from the official curl website
if ! curl -Lso "$cwd/cacert.pem" "https://curl.se/ca/cacert.pem"; then
    fail_fn "Failed to download the latest \"cacert.pem\" file. Line: ${LINENO}"
fi

# Move the pem file to the newly created certs directory
if ! sudo mv "$cwd/cacert.pem" "${cert_dir}/cacert.pem"; then
    fail_fn "Failed to move file: $cwd/cacert.pem >> ${cert_dir}/cacert.pem. Line: ${LINENO}"
fi

# Copy the pem file as a crt file in the special ca-certificates folder so the command will find and use it when it is executed
if [[ "${OS}" == "Arch" ]]; then
    if ! sudo pacman -Qk | grep -o ca-certificates-utils &>/dev/null; then
        sudo pacman -Sq --needed --noconfirm ca-certificates-utils
    fi
    if [ ! -d /usr/share/ca-certificates/trust-source/anchors/ ]; then
        if ! sudo mkdir -p /usr/share/ca-certificates/trust-source/anchors/; then
            printf "\n%s\n\n" 'Failed to create the directory: /usr/share/ca-certificates/trust-source/anchors/'
            exit 1
        fi
    fi
    sudo cp -f "${cert_dir}/cacert.pem" /usr/share/ca-certificates/trust-source/anchors/curl-cacert.crt
    sudo ln -sf /etc/ssl/certs/* /usr/share/ca-certificates/trust-source/anchors/
    cd /usr/share/ca-certificates/trust-source/anchors/ || exit 1
    sudo c_rehash .
    sudo update-ca-trust
else
    if ! sudo dpkg -l | grep -ow ca-certificates &>/dev/null; then
        sudo apt install ca-certificates
    fi
    if [ ! -d '/usr/local/share/ca-certificates/trust-source/anchors/' ]; then
        if ! sudo mkdir -p '/usr/local/share/ca-certificates/trust-source/anchors/'; then
            echo 'Failed to create the directory: /usr/local/share/ca-certificates/trust-source/anchors/'
            exit 1
        fi
    fi
    sudo cp -f "${cert_dir}/cacert.pem" /usr/local/share/ca-certificates/trust-source/anchors/curl-cacert.crt
    sudo ln -sf /etc/ssl/certs/* /usr/local/share/ca-certificates/trust-source/anchors/
    cd /usr/local/share/ca-certificates/trust-source/anchors/ || exit 1
    sudo c_rehash .
    sudo dpkg-reconfigure ca-certificates
    sudo update-ca-certificates
fi

# Run ldconfig to update the linker library search path to include the openssl lib64 directory
if ! curl -Lso "$cwd/ld-linker-search-paths.sh" "https://raw.githubusercontent.com/slyfox1186/script-repo/main/Bash/Misc/ld-linker-search-paths.sh"; then
    echo
    echo "Failed to download: $cwd/ld-linker-search-paths.sh. Line: ${LINENO}"
    exit 1
fi
sudo bash "$cwd/ld-linker-search-paths.sh"

# Add the new openssl bin to the user's ~/.bashrc file if not already present
if ! grep -o '/usr/local/ssl/bin' "${HOME}/.bashrc" &>/dev/null; then
    if grep -o '/usr/local/sbin:\\' "${HOME}/.bashrc" &>/dev/null; then
        sed -i '\/usr\/local\/sbin:\\/i \/usr\/local\/ssl\/bin:\\' "${HOME}"/.bashrc
    else
        sed -i 's/\/usr\/local\/sbin/\/usr\/local\/ssl\/bin:\/usr\/local\/sbin/g' "${HOME}"/.bashrc
    fi
fi

# Prompt user to clean up files
cleanup_fn

# Display the update openssl stats
display_stats_fn

# Show exit message
exit_fn
