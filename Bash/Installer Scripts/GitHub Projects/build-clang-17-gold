#!/usr/bin/env bash
# shellcheck disable=SC2162,SC2317

####################################################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/GitHub%20Projects/build-clang-17
##
##  Purpose: Build LLVM Clang-17
##
##  Updated: 01.06.24
##
##  Script version: 1.3
##
####################################################################################################################################

# Ensure the script is not run as root
if [ "${EUID}" -eq 0 ]; then
    echo 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

# SET GLOBAL VARIABLES
script_ver=1.12
progname="${0}"
cwd="${PWD}/clang-17-build-script"
install_prefix=/usr/local
pc_type=x86_64-linux-gnu
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
web_repo='https://raw.githubusercontent.com/slyfox1186/script-repo/main/Bash/Installer%20Scripts/GNU%20Software'
debug=OFF  # Set to "ON" for debugging

# Check if the script is being run in the correct directory
if [ -d "${cwd}" ]; then
    rm -fr "${cwd}"
fi

printf "%s\n\n" "Creating build directory: ${cwd}"
mkdir -p "${cwd}"

# SET THE PATH VARIABLE
PATH="\
/usr/lib/ccache:\
${HOME}/perl5/bin:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/cuda/bin:\
/usr/local/x86_64-linux-gnu/bin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/games:\
/usr/games\
"
export PATH

#
# Function Definitions
#

fail_fn()
{
    printf "\n%s\n\n%s\n\n%s\n\n" \
        "$1"                      \
        'Please report this at:'  \
        "$web_repo/issues"
    exit 1
}

setup_environment()
{
    echo "Setting up the environment for building Clang-17..."

    # Check for required tools: git, cmake, ninja, etc.
    required_tools=("git" "cmake" "ninja" "clang" "clang++")
    for tool in "${required_tools[@]}"
    do
        if ! command -v "$tool" &> /dev/null; then
            fail_fn "Error: $tool is not installed. Please install $tool to proceed."
        fi
    done

    # Check for ld.gold
    if ! command -v ld.gold &>/dev/null; then
        printf "\n%s\n\n" "ld.gold not found. Attempting to install..."
        # Replace this with the actual URL or command to install ld.gold
        if ! curl -sSL "$web_repo/build-binutils" | sudo bash; then
            fail_fn "Failed to install ld.gold. Please install it manually."
        fi
    fi

    # Check and set compiler flags
    CC=clang
    CXX=clang++
    CFLAGS='-g -O3 -pipe -march=native'
    CXXFLAGS="${CFLAGS}"
    CPPFLAGS='-I/usr/local/include -I/usr/include'
    LDFLAGS='-Wl,-rpath -Wl,/usr/local/lib -fuse-ld=gold -L/usr/local/lib'
    export CC CFLAGS CPPFLAGS LDFLAGS CXX CXXFLAGS
    echo "Environment setup complete."
}

build_clang()
{
    # The commands to build clang from source, including fetching the source code, configuring, and compiling
    cd "${cwd}" || exit 1
    git clone --depth=1 'https://github.com/llvm/llvm-project.git'
    cd llvm-project
    project_pkgs='clang;clang-tools-extra'
    cmake -S llvm -B builddir                         \
          -DCMAKE_INSTALL_PREFIX="${install_prefix}"  \
          -DCMAKE_BUILD_TYPE=Release                  \
          -DBUILD_SHARED_LIBS=OFF                     \
          -DBENCHMARK_DOWNLOAD_DEPENDENCIES=ON        \
          -DBENCHMARK_ENABLE_TESTING=ON               \
          -DBENCHMARK_INSTALL_DOCS=OFF                \
          -DCLANG_INCLUDE_DOCS=OFF                    \
          -DCMAKE_C_COMPILER="${CC}"                  \
          -DCMAKE_C_FLAGS="${CFLAGS}"                 \
          -DCMAKE_CXX_FLAGS="${CXXFLAGS}"             \
          -DCMAKE_CXX_COMPILER="${CXX}"               \
          -DCMAKE_CXX_STANDARD=20                     \
          -DGOLD_EXECUTABLE="$(type -P ld.gold)"      \
          -DLLVM_BINUTILS_INCDIR=/usr/local/bin       \
          -DLLVM_BUILD_BENCHMARKS=OFF                 \
          -DLLVM_BUILD_RUNTIME=ON                     \
          -DLLVM_BUILD_RUNTIMES=ON                    \
          -DLLVM_CCACHE_BUILD=ON                      \
          -DLLVM_ENABLE_CURL=ON                       \
          -DLLVM_ENABLE_LTO=OFF                       \
          -DLLVM_ENABLE_OCAMLDOC=OFF                  \
          -DLLVM_ENABLE_PIC=ON                        \
          -DLLVM_ENABLE_PROJECTS="${project_pkgs}"    \
          -DLLVM_ENABLE_WARNINGS=OFF                  \
          -DLLVM_HOST_TRIPLE="${pc_type}"             \
          -DLLVM_INCLUDE_DOCS=OFF                     \
          -DLLVM_INCLUDE_TESTS=OFF                    \
          -DLLVM_TARGET_ARCH=HOST                     \
          -DLLVM_TOOL_CLANG_BUILD=ON                  \
          -DLLVM_USE_LINKER=gold                      \
          -G Ninja -Wno-dev
    echo
    if ! ninja "-j$(nproc --all)" -C builddir; then
        fail_fn "Failed to execute: ninja -j$(nproc --all) -C build. Line: ${LINENO}"
    fi
    echo
    if ! sudo ninja -C builddir install; then
        fail_fn "Failed to execute: sudo ninja -C build install. Line: ${LINENO}"
    fi
}

show_ver_fn() { clang --version; }

cleanup_fn() { rm -rf "${cwd}/build"; }

exit_fn() { echo "Clang-17 build completed successfully."; }

# Script Execution
setup_environment
build_clang
show_ver_fn
cleanup_fn
exit_fn
