#!/usr/bin/env bash

LLVM_VERSION="llvmorg-18.1.0-rc3"
CFLAGS="-g -O3 -pipe -fno-plt -march=native"
CXXFLAGS="-g -O3 -pipe -fno-plt -march=native"

detect_package_manager() {
    if command -v apt >/dev/null; then
        echo "apt"
    elif command -v yum >/dev/null; then
        echo "yum"
    elif command -v zypper >/dev/null; then
        echo "zypper"
    else
        error_exit "No compatible package manager found."
    fi
}

install_dependencies() {
    local PKG_MANAGER=$(detect_package_manager)
    log_message "Using package manager: $PKG_MANAGER"
    log_message "Updating package lists..."
    if [ "$PKG_MANAGER" = "apt" ]; then
        sudo apt update || error_exit "Failed to update package lists."
        sudo apt install -y git cmake ninja-build python3 build-essential clang || error_exit "Failed to install build dependencies."
    elif [ "$PKG_MANAGER" = "yum" ]; then
        sudo yum update || error_exit "Failed to update package lists."
        sudo yum install -y git cmake ninja-build python3 build-essential clang clang++ || error_exit "Failed to install build dependencies."
    elif [ "$PKG_MANAGER" = "zypper" ]; then
        sudo zypper refresh || error_exit "Failed to update package lists."
        sudo zypper install -y git cmake ninja-build python3-devel gcc gcc-c++ clang clang++ || error_exit "Failed to install build dependencies."
    fi
}

log_message() {
    echo "[LOG - DATE:$(date '+%m-%d-%Y') TIME:$(date '+%I:%M:%S %p'): $1]"
}

error_exit() {
    echo "[ERROR - DATE:$(date '+%m-%d-%Y') TIME:$(date '+%I:%M:%S %p'): $1]" >&2
    exit 1
}

clone_llvm_project() {
    if [ ! -d "llvm-project" ]; then
        log_message "Cloning LLVM project repository..."
        git clone --depth 1 https://github.com/llvm/llvm-project.git || error_exit "Failed to clone LLVM project repository."
    else
        log_message "LLVM project already cloned. Skipping..."
    fi
    cd llvm-project || error_exit "Failed to change directory to llvm-project."
    git checkout $LLVM_VERSION || error_exit "Failed to checkout $LLVM_VERSION."
}

build_clang() {
    log_message "Building LLVM and Clang from source..."
    mkdir -p build && cd build || error_exit "Failed to create or change to build directory."
    cmake ../llvm \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
          -DLLVM_TARGETS_TO_BUILD="X86" \
          -G Ninja \
          || error_exit "CMake configuration failed."
    ninja || error_exit "Ninja build failed."
    log_message "LLVM and Clang build completed."
}

main() {
    install_dependencies
    clone_llvm_project
    build_clang
}

main "$@"
