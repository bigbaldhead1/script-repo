#!/usr/bin/env bash

# GitHub Script for Building OpenCL SDK
# Script version: 1.1
# Updated: 03.17.2024 04:30:00 PM
# URL: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/GitHub%20Projects/build-opencl-sdk

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Function to display help
display_help() {
    echo "Usage: $0 [OPTIONS]"
    echo
    echo "Options:"
    echo "  -h, --help    Display this help message"
    echo "  -v, --verbose Enable verbose logging"
    echo "  -c, --clean   Remove build directories after installation"
    echo "  -p, --prefix  Set the installation prefix (default: /usr/local/opencl-sdk-3.0)"
}

# Function to log messages
log() {
    timestamp=$(date +"%m.%d.%Y %r")
    echo -e "${BLUE}[INFO] ${timestamp}:${NC} $1"
}

# Function to log warning messages
warn() {
    timestamp=$(date +"%m.%d.%Y %r")
    echo -e "${YELLOW}[WARN] ${timestamp}:${NC} $1"
}

# Function to log error messages and exit
fail() {
    timestamp=$(date +"%m.%d.%Y %r")
    echo -e "${RED}[ERROR] ${timestamp}:${NC} $1"
    exit 1
}

# Set default values
verbose=false
clean=false
install_prefix="/usr/local/opencl-sdk-3.0"

# Parse command line options
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -h|--help)
            display_help
            exit 0
            ;;
        -v|--verbose)
            verbose=true
            ;;
        -c|--clean)
            clean=true
            ;;
        -p|--prefix)
            install_prefix="$2"
            shift
            ;;
        *)
            echo "Unknown option: $1"
            display_help
            exit 1
            ;;
    esac
    shift
done

# Set the script variables
script_ver=1.1
archive_dir="OpenCL-SDK"
archive_url='https://github.com/KhronosGroup/OpenCL-SDK.git'
cwd="$PWD/opencl-sdk-build-script"

# Set compiler variables
export CC=gcc CXX=g++ CFLAGS='-O3 -pipe -march=native' CXXFLAGS="$CFLAGS"

# Set PATH variable
PATH="\
/usr/lib/ccache:\
$HOME/perl5/bin:\
$HOME/.cargo/bin:\
$HOME/.local/bin:\
/usr/local/sbin:\
/usr/local/cuda/bin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/games:\
/usr/games:\
/snap/bin\
"
export PATH

# Set PKG_CONFIG_PATH variable
PKG_CONFIG_PATH="\
/usr/share/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/lib/pkgconfig:\
/lib/pkgconfig\
"
export PKG_CONFIG_PATH

# Function to install dependencies
install_dependencies() {
    log "Installing dependencies..."

    # Detect package manager
    if command -v apt-get &> /dev/null; then
        pkg_manager="apt-get"
    elif command -v dnf &> /dev/null; then
        pkg_manager="dnf"
    elif command -v yum &> /dev/null; then
        pkg_manager="yum"
    elif command -v zypper &> /dev/null; then
        pkg_manager="zypper"
    elif command -v pacman &> /dev/null; then
        pkg_manager="pacman"
    else
        fail "Unable to detect package manager. Please install dependencies manually."
    fi

    # Install required packages
    pkgs=(
        autoconf autoconf-archive autogen automake binutils bison build-essential bzip2 ccache
        curl install-info libc6-dev libglew-dev libtool libtool-bin libudev-dev libzstd-dev m4
        nasm python3 python3-pip texinfo xz-utils zlib1g-dev zstd yasm
    )

    case $pkg_manager in
        apt-get)
            sudo apt-get update
            sudo apt-get install -y "${pkgs[@]}"
            ;;
        dnf|yum)
            sudo $pkg_manager install -y "${pkgs[@]}"
            ;;
        zypper)
            sudo zypper install -y "${pkgs[@]}"
            ;;
        pacman)
            sudo pacman -Sy --noconfirm "${pkgs[@]}"
            ;;
    esac
}

# Function to build and install OpenCL SDK
build_opencl_sdk() {
    log "Building OpenCL SDK..."

    # Remove any leftover files from previous runs
    sudo rm -fr "$cwd/$archive_dir"

    # Clone the repository
    if ! git clone --recursive "$archive_url" "$cwd/$archive_dir"; then
        fail "Failed to clone repository"
    fi

    # Build the SDK
    cd "$cwd" || fail "Failed to change directory to $cwd"

    cmake -S OpenCL-SDK -B build \
        -DCMAKE_INSTALL_PREFIX="$install_prefix" \
        -DCMAKE_BUILD_TYPE=Release \
        -DBUILD_SHARED_LIBS=ON \
        -DBUILD_TESTING=OFF \
        -DBUILD_DOCS=OFF \
        -DBUILD_EXAMPLES=OFF \
        -DOPENCL_SDK_BUILD_SAMPLES=ON \
        -DCMAKE_C_FLAGS="${CFLAGS}" \
        -DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
        -DOPENCL_HEADERS_BUILD_CXX_TESTS=OFF \
        -DOPENCL_ICD_LOADER_BUILD_SHARED_LIBS=ON \
        -DOPENCL_SDK_BUILD_OPENGL_SAMPLES=OFF \
        -DOPENCL_SDK_BUILD_SAMPLES=OFF \
        -DTHREADS_PREFER_PTHREAD_FLAG=ON \
        -G Ninja -Wno-dev

    if ! ninja "-j$(nproc --all)" -C build; then
        fail "Ninja build failed"
    fi

    if ! sudo ninja -C build install; then
        fail "Ninja install failed"
    fi

    # Create soft links
    log "Creating soft links..."
    for file in "$install_prefix/bin/"*; do
        program_name=$(basename "$file" | cut -d'-' -f1)
        sudo ln -sf "$file" "/usr/local/bin/$program_name"
    done
}

# Function to clean up build directories
cleanup() {
    if $clean; then
        log "Cleaning up build directories..."
        sudo rm -fr "$cwd"
    else
        log "Build directories retained."
    fi
}

# Function to display completion message
completion_message() {
    log "OpenCL SDK installation completed successfully."
}

# Main script execution
clear

# Check for root privileges
if [[ $EUID -eq 0 ]]; then
    fail "You must run this script WITHOUT root/sudo privileges."
fi

# Install dependencies
install_dependencies

# Build and install OpenCL SDK
build_opencl_sdk

# Clean up build directories if specified
cleanup

# Display completion message
completion_message
