#!/usr/bin/env bash

clear

cwd="${PWD}"/git-installers-master
repo=https://github.com/slyfox1186/script-repo
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36'

if [ -d "${cwd}" ]; then
    sudo rm -fr "${cwd}"
fi

if [ ! -d "${cwd}"/completed ]; then
    mkdir -p "${cwd}"/completed
fi

exit_fn()
{
    printf "\n%s\n\n%s\n\n" \
        'Make sure to star this repository to show your support!' \
        "${repo}"
    exit 0
}

fail_fn()
{
    printf "\n%s\n\n%s\n\n" \
        "${1}" \
        "To report a bug create an issue at: ${repo}/issues"
    exit 1
}

cleanup_fn()
{
    local answer

    printf "\n%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' answer

    case "${answer}" in
        1)      sudo rm -fr "${cwd}" "${0}";;
        2)      echo;;
        *)
                printf "\n%s\n\n" 'Bad user input. Re-asking question...'
                sleep 3
                unset answer
                clear
                cleanup_fn
                ;;
    esac
}

pkgs=(asciidoc autogen autoconf automake binutils bison build-essential bzip2 ccache cmake
      curl libc6-dev libintl-perl libpth-dev libtool libtool-bin lzip lzma-dev m4 meson
      nasm ninja-build texinfo xmlto yasm zlib1g-dev)

for i in ${pkgs[@]}
do
    missing_pkg="$(sudo dpkg -l | grep -o "${i}")"

    if [ -z "${missing_pkg}" ]; then
        missing_pkgs+=" ${i}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    sudo apt -y install ${missing_pkgs}
    sudo apt -y autoremove
    clear
fi

install_scripts_fn()
{
    local i scripts
    clear

    mv '010-build-aria2' '10-build-aria2'

    scripts="$(sudo find . -maxdepth 1 -type f | sed 's/^..//g' | sort)"

    for i in ${scripts[@]} 
    do
        if bash "${i}"; then
            sudo find . -maxdepth 1 -type f -name "${i}" -exec mv {} completed \;
            printf "\n%s\n\n" "Script finished: ${i}"
        else
            fail_fn "Failed to install: ${i}"
        fi
        sleep 2
    done
}

#
# DOWNLOAD ALL THE SCRIPTS
#

cd "${cwd}" || exit 1

scripts=(zlib zstd nasm yasm libxml2 openssl tools libpng brotli aria2)
cnt=0

for script in ${scripts[@]}
do
    let cnt=cnt+1
    wget -U "${user_agent}" --show-progress -cq "https://raw.githubusercontent.com/slyfox1186/script-repo/main/Bash/Installer%20Scripts/GitHub%20Projects/build-${script}"
    mv "build-${script}" "0${cnt}-build-${script}"
done

#
# ASK THE USER IF THEY WANT TO INSTALL ALL OF THE SCRIPTS
#

printf "%s\n\n%s\n\n%s\n%s\n\n" \
    'Do you want to install all of the scripts now?' \
    'You must manually remove any scripts you do not want to install before continuing.' \
    '[1] Yes' \
    '[2] No'
read -p 'Your choices are (1 or 2): ' answer

case "${answer}" in
    1)      install_scripts_fn;;
    2)      exit_fn;;
    *)
            printf "%s\n\n" 'Bad user input... Resetting script.'
            sleep 3
            unset answer
            clear
            install_choice_fn
            ;;
esac

#
# CLEANUP THE FILES
#

cleanup_fn

#
# SHOW THE EXIT MESSAGE
#

exit_fn
