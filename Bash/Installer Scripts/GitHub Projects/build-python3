#!/usr/bin/env bash
# shellcheck disable=SC2162,SC2317

#################################################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/GitHub%20Projects/build-python3
##
##  Purpose: Install Python3 v3.12.0rc3 from the source code released by the official website: https://www.python.org/downloads
##
##  Features: Static build, OpenSSL backend
##
##  Updated: 10.02.23
##
##  Upgraded to version: 3.12.0
##
##  Script version: 1.8
##
#################################################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET VARIABLES
#

script_ver=1.8
py_ver=3.12.0
archive_dir=Python-${py_ver}.tar.xz
archive_url=https://www.python.org/ftp/python/3.12.0/${archive_dir}
archive_ext="${archive_url//*.}"
archive_name="${archive_dir}.tar.${archive_ext}"
cwd="${PWD}"/python3-build-script
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo

#
# START PYTHON3 BUILD
#

printf "%s\n%s\n\n" \
    "Python3 Build Script v${py_ver} - v${script_ver}" \
    '==============================================='

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}" ]; then
    sudo rm -fr "${cwd}"
fi
mkdir -p "${cwd}"

#
# SET THE C+CPP COMPILERS
#

export CC=gcc CXX=g++

#
# EXPORT COMPILER OPTIMIZATION FLAGS
#

LDFLAGS='-L/lib/"${install_dir}" -L/usr/lib/"${install_dir}" -L/usr/local/lib'
LDFLAGS+=' -L/usr/local/lib64 -L/usr/lib64 -L/usr/lib -L/lib64 -L/lib'

export CXXFLAGS='-g -O2 -ffunction-sections -fdata-sections -pipe -march=native'
export CFLAGS="-I/usr/include/openssl ${CXXFLAGS}"
export CPPFLAGS='-I/usr/include/openssl -I/usr/local/include -I/usr/include'
export CXXFLAGS CFLAGS LDFLAGS

#
# SET THE PATH VARIABLE
#

PATH="\
/usr/lib/ccache:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

#
# SET THE PKG_CONFIG_PATH VARIABLE
#

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/usr/local/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/usr/local/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/usr/local/pkgconfig\
"
export PKG_CONFIG_PATH

#
# SET LD_LIBRARY_PATH
#

cuda_lib_dir="$(find /usr/local/cuda* -type d -name lib64 | head -n1)"

if [ -n "${cuda_lib_dir}" ]; then
LD_LIBRARY_PATH="\
/usr/local/lib64/:\
/usr/local/lib/:\
/usr/lib64/:\
/usr/lib/:\
lib64/:\
lib/:\
${cuda_lib_dir}/\
"
export LD_LIBRARY_PATH
else
LD_LIBRARY_PATH="\
/usr/local/lib64/:\
/usr/local/lib/:\
/usr/lib64/:\
/usr/lib/:\
lib64/:\
lib/\
"
export LD_LIBRARY_PATH
fi

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n%s\n\n" \
        'The script has completed!' \
        'Make sure to star this repository to show your support!' \
        "${web_repo}"
    exit 0
}

fail_fn()
{
    printf "\n\n%s\n\n%s\n\n%s\n\n" \
        "${1}" \
        'Please create a support ticket so I can work on a fix.' \
        "${web_repo}/issues"
    exit 1
}

show_ver_fn()
{
    save_ver="$(sudo find /usr/local -type f -name python3.12 | grep -Eo '[0-9\.]+$')"
    printf "\n%s\n\n" "The installed Python3 version is: ${save_ver}"
    sleep 3
}

cleanup_fn()
{
    local answer

    printf "\n%s\n\n%s\n%s\n\n" \
        'Do you want to remove the build files?' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' answer

    case "${answer}" in
        1)      sudo rm -fr "${cwd}" "${0}";;
        2)      return 0;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Resetting script...'
                sleep 3
                unset answer
                clear
                cleanup_fn
                ;;
    esac
}

installed() { return $(dpkg-query -W -f '${Status}\n' "${1}" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}'); }

pkgs=(autoconf autoconf-archive autogen automake binutils build-essential ccache cmake
      curl git itstool libb2-dev libexempi-dev libgnome-desktop-3-dev libgnome-desktop-4-dev
      libhandy-1-dev libpeas-dev libpeasd-3-dev libportal-dev libportal-gtk3-dev libportal-gtk4-dev
      libssl-dev libtool libtool-bin m4 meson nasm ninja-build openssl python3 valgrind yasm zlib1g-dev)

for pkg in ${pkgs[@]}
do
    if ! installed "${pkg}"; then
        missing_pkgs+=" ${pkg}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    echo '$ Installing missing packages'
    echo
    for i in "${missing_pkgs}"
        do
            if ! sudo apt -y install $i; then
                fail_fn "Failed to install the apt packages:Line ${LINENO}"
            fi
        done
else
    echo '$ The packages are already installed.'
    echo
fi

#
# DOWNLOAD THE ARCHIVE FILE
#

if [ ! -f "${cwd}/${archive_name}" ]; then
    curl -A "${user_agent}" -Lso "${cwd}/${archive_name}" "${archive_url}"
fi

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}/${archive_dir}" ]; then
    sudo rm -fr "${cwd}/${archive_dir}"
fi
mkdir -p "${cwd}/${archive_dir}/build"

#
# EXTRACT ARCHIVE FILES
#

if ! tar -xf "${cwd}/${archive_name}" -C "${cwd}/${archive_dir}" --strip-components 1; then
    fail_fn "Failed to extract: ${cwd}/${archive_name}:Line ${LINENO}"
    exit 1
fi

#
# GET OPENSSL DIR
#

case "$(type -P openssl)" in
    /usr/local/bin/openssl)     openssl_dir=/usr/local;;
    /usr/bin/openssl)           openssl_dir=/usr;;
    *)                          fail_fn "Failed to locate openssl. Please install it before running the script again. :Line {LINENO}";;
esac

#
# BUILD PROGRAM FROM SOURCE
#

cd "${cwd}/${archive_dir}/build" || exit 1
clear

printf "%s\n%s\n\n" \
    'Running: configure' \
    '========================'
../configure --enable-optimizations               \
             --with-ensurepip=upgrade             \
             --with-lto=yes                       \
             --with-openssl-rpath=auto            \
             --with-openssl="${openssl_dir}"      \
             --with-pkg-config=yes                \
             --with-ssl-default-suites=openssl    \
             --with-valgrind                      \
             PKG_CONFIG="$(type -P pkg-config)"   \
             PKG_CONFIG_PATH="${PKG_CONFIG_PATH}" \
             CFLAGS="${CFLAGS}"                   \
             CPPFLAGS="${CPPFLAGS}"               \
             LDFLAGS="${LDFLAGS}"                 \
             LIBS="$(pkg-config --libs openssl)"
make "-j$(nproc --all)"
if ! sudo make altinstall; then
    fail_fn "Failed to execute: sudo make altinstall:Line ${LINENO}"
    exit 1
fi
# SHOW THE NEW VERSION
show_ver_fn
# PROMPT USER TO CLEAN UP FILES
cleanup_fn
# SHOW EXIT MESSAGE
exit_fn
