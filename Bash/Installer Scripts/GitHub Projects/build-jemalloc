#!/usr/bin/env bash

#################################################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/edit/main/util-linux/Installer%20Scripts/GNU%20Software/build-jemalloc
##
##  Purpose: Build jemalloc
##
##  Updated: 12.03.23
##
##  Script version: 1.0
##
#################################################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET THE VARIABLES
#

script_ver=1.0
jemalloc_ver=5.3.0
archive_dir=jemalloc-${jemalloc_ver}
archive_url=https://github.com/jemalloc/jemalloc/archive/refs/tags/"${jemalloc_ver}".tar.gz
archive_ext="${archive_url//*.}"
archive_name="${archive_dir}.tar.${archive_ext}"
cwd="${PWD}"/jemalloc-build-script
install_dir=/usr/local
pc_type=x86_64-linux-gnu
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo

#
# CREATE OUTPUT DIRECTORY JEMALLOC
#

if [ -d "${cwd}/${archive_dir}" ]; then
    sudo rm -fr "${cwd}/${archive_dir}"
fi
mkdir -p "${cwd}/${archive_dir}/build"

#
# DOWNLOAD THE ARCHIVE FILE JEMALLOC
#

if [ ! -f "${cwd}/${archive_dir}.tar.gz" ]; then
    curl -A "${user_agent}" -Lso "${cwd}/${archive_dir}.tar.gz" "${archive_url}"
fi

#
# EXTRACT THE ARCHIVE FILE JEMALLOC
#

if ! tar -zxf "${cwd}/${archive_dir}.tar.gz" -C "${cwd}/${archive_dir}" --strip-components 1; then
    fail_fn "Failed to extract: ${cwd}/${archive_dir}.tar.gz"
fi

#
# INSTALL JEMALLOC
#

printf "\n%s\n%s\n\n"                        \
    "Installing Jemalloc - v${jemalloc_ver}" \
    '==============================================='

cd "${cwd}/${archive_dir}" || exit 1
./autogen.sh
cd build || exit 1
../configure --prefix="${install_dir}"   \
             --disable-debug             \
             --disable-doc               \
             --disable-fill              \
             --disable-initial-exec-tls  \
             --disable-log               \
             --disable-prof              \
             --disable-stats             \
             --enable-autogen            \
             --enable-static             \
             --enable-xmalloc
echo
if ! make "-j$(nproc --all)"; then
    fail_fn "Failed to execute: make -j$(nproc --all). Line: ${LINENO}"
fi
echo
if ! sudo make install; then
    fail_fn "Failed to execute: sudo make install. Line: ${LINENO}"
fi

# UPDATE THE LIBRARY PATHS THAT THE LD LINKER SEARCHES
sudo bash -c 'bash <(curl -sSL https://ld-linker.optimizethis.net)'
sudo ldconfig -v
