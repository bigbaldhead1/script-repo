#!/usr/bin/env bash

##############################################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/Tilix%20Terminal/build-tilix
##
##  Purpose: Compile the Advanced Linux Terminal Tilix from its official GitHub Repository 
##
##  Updated: 10.07.23
##
##  Script version: 3.1
##
##############################################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET VARIABLES
#

script_ver=3.1
cwd="$PWD"/tilix-build-script
packages="${cwd}"/packages
schemes_dir="${HOME}"/.config/tilix/schemes
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo
debug=OFF

#
# PRINT SCRIPT BANNER
#

box_out_banner()
{
    input_char=$(echo "${@}" | wc -c)
    line=$(for i in $(seq 0 ${input_char}); do printf '-'; done)
    tput bold
    line="$(tput setaf 3)${line}"
    space=${line//-/ }
    echo " ${line}"
    printf '|' ; echo -n "${space}" ; printf "%s\n" '|';
    printf '| ' ;tput setaf 4; echo -n "${@}"; tput setaf 3 ; printf "%s\n" ' |';
    printf '|' ; echo -n "${space}" ; printf "%s\n" '|';
    echo " ${line}"
    tput sgr 0
}
box_out_banner "Tilix Build Script - v${script_ver}"

#
# CREATE OUTPUT DIRECTORIES
#

mkdir -p "${packages}" "${schemes_dir}"


#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n\n" \
        'Make sure to star this repository to show your support!' \
        "${web_repo}"
    exit 0
}

fail_fn()
{
    printf "\n%s\n\n%s\n\n" \
        "${1}" \
        "To report a bug create an issue at: ${web_repo}/issues"
    exit 1
}

cleanup_fn()
{
    local answer

    printf "\n%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' answer

    case "${answer}" in
        1)      sudo rm -fr "${cwd}" "${script_name}";;
        2)      echo;;
        *)
                clear
                printf "\n%s\n\n" 'Bad user input. Re-setting script...'
                sleep 3
                unset answer
                clear
                cleanup_fn
                ;;
    esac
}

execute()
{
    echo "$ ${*}"

    if [ "${debug}" = 'ON' ]; then
        if ! output=$("${@}"); then
            notify-send -t 5000 "Failed to execute: ${*}" 2>/dev/null
            fail_fn "Failed to execute: ${*}"
        fi
    else
        if ! output=$("${@}" 2>&1); then
            notify-send -t 5000 "Failed to execute: ${*}" 2>/dev/null
            fail_fn "Failed to execute: ${*}"
        fi
    fi
}

download()
{
    dl_path="${packages}"
    dl_url="${1}"
    dl_file="${2:-"${1##*/}"}"

    target_file="${dl_path}/${dl_file}"

    if [ -f "${target_file}" ]; then
        echo "The file \"${dl_file}\" is already downloaded."
    else
        echo "Downloading \"${dl_url}\" saving as \"${dl_file}\""
        if ! curl -A "${user_agent}" -Lso "${target_file}" "${dl_url}"; then
            printf "\n%s\n\n" "The script failed to download \"${dl_file}\" and will try again in 10 seconds..."
            sleep 10
            if ! curl -A "${user_agent}" -Lso "${target_file}" "${dl_url}"; then
                fail_fn "The script failed to download \"${dl_file}\" twice and will now exit."
            fi
        fi
        echo 'Download Completed'
    fi

    cd "${packages}" || fail_fn "Unable to change the working directory to: ${packages}"
}

download_git()
{
    local dl_path dl_url dl_file target_dir

    dl_path="${packages}"
    dl_url="${1}"
    dl_file="${2:-"${1##*/}"}"
    dl_file="${dl_file//\./-}"
    target_dir="${dl_path}/${dl_file}"

    if [ -d "${target_dir}" ]; then
        sudo rm -fr "${target_dir}"
    fi

    echo "Downloading ${dl_url} as ${dl_file}"

    if ! git clone -q "${dl_url}" "${target_dir}"; then
        printf "\n%s\n\n" "The script failed to clone the directory \"${target_dir}\" and will try again in 10 seconds..."
        sleep 10
        if ! git clone -q "${dl_url}" "${target_dir}"; then
            fail_fn "The script failed to clone the directory \"${target_dir}\" twice and will now exit the build."
        fi
    else
        printf "%s\n\n" "Successfully cloned: ${target_dir}"
    fi

    cd "${target_dir}" || fail_fn "Unable to change the working directory to: ${target_dir}"
}

build()
{
    printf "\n%s\n%s\n" \
        "Building ${1} - version ${2}" \
        '===================================='

    if [ -f "${packages}/${1}.done" ]; then
        if grep -Fx "${2}" "${packages}/${1}.done" >/dev/null; then
            echo "${1} version ${2} already built. Remove ${packages}/${1}.done lockfile to rebuild it."
            return 1
        elif ${latest}; then
            echo "${1} is outdated and will be rebuilt using version ${2}"
            return 0
        else
            echo "${1} is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove ${packages}/${1}.done lockfile."
            return 1
        fi
    fi
    return 0
}

build_done() { echo "${2}" >"${packages}/${1}.done"; }

installed() { return $(dpkg-query -W -f '${Status}\n' "${1}" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}'); }

#
# INSTALL APT PACKAGES
#

pkgs=(autoconf autogen automake build-essential ccache curl gettext git gtk-doc-tools libgtk-3-dev
      libgtkd-3-dev libtool libtool-bin m4 ninja-build pkg-config python3-nautilus tilix tilix-common)

for pkg in ${pkgs[@]}
do
    if ! installed "${pkg}"; then
        missing_pkgs+=" ${pkg}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    if sudo apt -y install ${missing_pkgs}; then
        echo 'The required APT packages were installed.'
    else
        fail_fn "These required APT packages failed to install: ${missing_pkgs}"
    fi
else
    echo 'The required APT packages are already installed.'
fi

#
# DOWNLOAD D COMPILER
#

if build 'dmd' 'dmd_2.105.3-0'; then
    download 'https://downloads.dlang.org/releases/2.x/2.105.3/dmd_2.105.3-0_amd64.deb' 'dmd_2.105.3-0.deb'
    execute sudo apt -y install ./dmd_2.105.3-0.deb
    build_done 'dmd' 'dmd_2.105.3-0'
fi

#
# INSTALL TILIX
#

if build 'tilix' 'git'; then
    download_git 'https://github.com/gnunn1/tilix.git'
    execute dub build --build=release
    execute sudo sh install.sh
    build_done 'tilix' 'git'
fi

#
# APPLY THEMES
#

if build 'tilix-themes' 'git'; then
    download_git 'https://github.com/storm119/Tilix-Themes.git' 'tilix-themes'
    if [ ! -d "${schemes_dir}" ]; then
        execute mkdir -p "${schemes_dir}"
    fi

    cd 'Themes' || exit 1
    execute cp -f 'argonaut.json' 'dracula.json' "${schemes_dir}"
    cd ../ || exit 1
    cd 'Themes-2' || exit 1
    execute cp -f 'neopolitan.json'  'vibrant-ink.json' "${schemes_dir}"
    build_done 'tilix-themes' 'git'
fi

#
# MAKE TILIX THE DEFAULT TERMINAL
#

sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator /usr/bin/tilix 50

# CLEANUP FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn
