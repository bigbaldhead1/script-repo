#!/usr/bin/env bash

clear

# Check if the script is running as root
if [ "$EUID" -eq 0 ]; then
    echo "This script should not be run as root or with sudo."
    exit 1
fi

log() { echo -e "\e[32m$1\e[0m"; }
log_error() { echo -e "\e[31m$1\e[0m" >&2; }

# Define optimization flags
export OPT_FLAGS="-O3 -pipe -march=native"

# Check for necessary dependencies
for cmd in git curl python3; do
    if ! command -v "$cmd" &> /dev/null; then
        log_error "$cmd could not be found"
        exit 1
    fi
done

# Rust installation variables
RUST_GIT_URL="https://github.com/rust-lang/rust.git"
RUST_SRC_DIR="rust-src"

# Function to install the latest available version of specified clang versions and set CC and CXX
install_clang_and_set_variables() {
    # Update the package list
    sudo apt update

    # Clang versions to search for in order of preference
    versions=("clang-16" "clang-15" "clang-14")

    installed_version=""

    # Install the latest available version
    for version in "${versions[@]}"; do
        if apt search "^${version}$" | grep -q "^${version}/"; then
            echo "Installing ${version}..."
            if ! sudo apt install -y "${version}"; then
                echo "Error: Failed to install the latest clang version using APT."
                exit 1
            fi
            installed_version="$version"
            break
        fi
    done

    if [ -z "$installed_version" ]; then
        echo "Error: No specified version of clang found."
        exit 1
    fi

    # Set CC to the specific version of clang and CXX to the specific version of clang++
    CC="$installed_version"
    MODIFY_CXX="${installed_version/clang-/}"
    CXX="clang++-${MODIFY_CXX}"
    export CC CXX

    echo "CC variable set to $CC"
    echo "CXX variable set to $CXX"
}

# Execute the function
install_specific_clang_and_set_variables

# Check and install rustup
rustup_check() {
    log "Checking rustup installation..."
    if ! command -v rustup &> /dev/null; then
        log "Installing rustup..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
        source "$HOME/.cargo/env"
    fi
    rustup default nightly
}

# Fetch the latest Rust version
fetch_latest_rust_version() {
    latest_version=$(git ls-remote --tags "$RUST_GIT_URL" | \
                     awk -F/ '/tags\/[0-9]+\.[0-9]+\.[0-9]+$/ {print $3}' | \
                     sort -V | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | tail -n1)
    echo "$latest_version"
}

log "Fetching the latest stable Rust version..."
RUST_VERSION=$(fetch_latest_rust_version)
if [ -z "$RUST_VERSION" ]; then
    log_error "Failed to fetch the latest Rust version."
    exit 1
fi

log "Latest stable Rust version: $RUST_VERSION"

clone_rust_source() {
    [ -d "$RUST_SRC_DIR" ] && rm -fr "$RUST_SRC_DIR"
    log "Cloning Rust source code into an empty directory..."
    git clone --branch "$RUST_VERSION" --depth 1 "$RUST_GIT_URL" "$RUST_SRC_DIR" || exit 1
}

# Configure Rust build
configure_rust() {
    log "Configuring and building Rust..."
    rm "config.toml"
    ./configure --enable-docs --enable-ccache --enable-llvm-static-stdcpp --enable-rpath \
                --python="$(type -P python3)" --enable-use-libcxx --enable-optimize-llvm \
                --enable-extended --llvm-cflags="$OPT_FLAGS" --llvm-cxxflags="$OPT_FLAGS" \
                --release-channel=stable
}

build_rust() {
    log "Installing Rust..."
    python3 x.py build || exit 1
}

install_rust() {
    log "Installing Rust..."
    python3 x.py install || exit 1
}

install_clang_and_set_variables
rustup_check
fetch_latest_rust_version
clone_rust_source
cd "$RUST_SRC_DIR" || exit 1
configure_rust
build_rust
install_rust

log "Rust installation completed successfully."
