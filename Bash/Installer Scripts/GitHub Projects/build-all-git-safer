#!/usr/bin/env bash

clear

cwd="${PWD}"/build-all-git-safer-script
web_repo=https://github.com/slyfox1186/script-repo
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36'

if [ -d "${cwd}" ]; then
    sudo rm -fr "${cwd}"
fi
mkdir -p "${cwd}"/completed

exit_fn()
{
    printf "\n%s\n\n%s\n\n" \
        'Make sure to star this repository to show your support!' \
        "${web_repo}"
    exit 0
}

fail_fn()
{
    printf "\n%s\n\n%s\n\n" \
        "${1}" \
        "To report a bug create an issue at: ${web_repo}/issues"
    exit 1
}

cleanup_fn()
{
    local answer

    printf "\n%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' answer

    case "${answer}" in
        1)      sudo rm -fr "${cwd}";;
        2)      echo;;
        *)
                printf "\n%s\n\n" 'Bad user input. Re-asking question...'
                sleep 3
                unset answer
                clear
                cleanup_fn
                ;;
    esac
}

installed() { return $(dpkg-query -W -f '${Status}\n' "${1}" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}'); }

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(asciidoc autoconf autoconf-archive autogen automake binutils bison build-essential
      bzip2 ccache cmake curl libtool libtool-bin lzip m4 meson nasm ninja-build yasm zlib1g-dev)

for pkg in ${pkgs[@]}
do
    if ! installed "${pkg}"; then
        missing_pkgs+=" ${pkg}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    for i in "${missing_pkgs}"
        do
            if ! sudo apt -y install ${i}; then
                fail_fn "$ Failed to install the apt packages:Line ${LINENO}"
            fi
        done
else
    echo '$ The packages apt packages are already installed.'
    echo
fi

install_scripts_fn()
{
    local i scripts
    clear

    scripts="$(sudo find . -maxdepth 1 -type f -iname '*' | sed 's/^..//g' | sort)"

    for i in ${scripts[@]}
    do
        if bash "${i}"; then
            sudo find . -maxdepth 1 -type f -iname "${i}" -exec mv {} completed \;
            printf "\n%s\n\n" "Script finished: ${i}"
        else
            fail_fn "Failed to install: ${i}"
        fi
        sleep 1
    done
}

#
# ASK THE USER IF THEY WANT TO INSTALL ALL OF THE SCRIPTS
#

install_choice_fn()
{
    printf "%s\n\n%s\n\n%s\n%s\n\n" \
        'Do you want to install all of the scripts now?' \
        'You must manually remove any scripts you do not want to install before continuing.' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' answer

    case "${answer}" in
        1)      install_scripts_fn;;
        2)      exit_fn;;
        *)
                printf "%s\n\n" 'Bad user input... Reverting script...'
                sleep 3
                unset answer
                clear
                install_choice_fn
                ;;
    esac
}

cd "${cwd}" || exit 1

# RENAME FILES WITH NUMBERS 10 AND HIGHER SO THEY EXECUTE IN THE INTENDED ORDER
files=(git zlib tools zstd openssl aria2 python3)
cnt=0

for file in ${files[@]}
do
    ((cnt++))
    wget -U "${user_agent}" --show-progress -cq "https://raw.githubusercontent.com/slyfox1186/script-repo/main/Bash/Installer%20Scripts/GitHub%20Projects/build-${file}"
    mv "build-${file}" "0${cnt}-build-${file}"'.sh'
done

clear
find . -maxdepth 1 -type f -iname '*.sh' -exec bash -c "echo '1' | bash '{}'; mv '{}' completed" \;

# CLEANUP THE FILES
cleanup_fn

# SHOW THE EXIT MESSAGE
exit_fn
