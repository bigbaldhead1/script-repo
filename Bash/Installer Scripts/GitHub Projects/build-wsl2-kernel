#!/usr/bin/env bash
# shellcheck disable=SC2162,SC2317

############################################################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/GitHub%20Projects/build-wsl2-kernel
##
##  Purpose: Build WSL2
##
##  Updated: 08.01.23
##
##  Script version: 1.1
##
############################################################################################################################################

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# PROMPT THE USER TO CHOOSE THE KERNEL VERSION
#

prompt_fn()
{
    local answer
    clear

    printf "%s\n\n%s\n%s\n%s\n\n" \
        'Choose the kernel version:' \
        '[1] 5.15.123.1 (08.08.23)' \
        '[2] 6.1.21.2 (07.25.23)' \
        '[3] Exit'
    read -p 'Your choices are (1 to 3): ' answer
    clear

    case "${answer}" in
        1)      archive_url='https://github.com/microsoft/WSL2-Linux-Kernel/archive/refs/tags/linux-msft-wsl-5.15.123.1.tar.gz';;
        2)      archive_url='https://github.com/microsoft/WSL2-Linux-Kernel/archive/refs/tags/linux-msft-wsl-6.1.21.2.tar.gz';;
        3)      exit 0;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset answer
                prompt_fn
                ;;
     esac
}
prompt_fn

#
# SET VARIABLES
#

script_ver=2.1
archive_dir="wsl-kernel-${archive_ver}"
archive_ver="$(echo "${archive_url}" | sed 's/^.*\/.*-wsl-\(.*\)\.tar\.gz$/\1/')"
archive_ext="${archive_url//*.}"
archive_name="${archive_dir}.tar.${archive_ext}"
cwd="${PWD}"/WSL2-build-script
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36'
repo=https://github.com/slyfox1186/script-repo
debug=OFF

printf "\n%s\n%s\n\n" \
    "WSL2 Build Script - v${script_ver}" \
    '==============================================='

#
# CREATE OUTPUT DIRECTORY
#

if [ ! -d "${cwd}" ]; then
    mkdir -p "${cwd}"
fi

#
# SET THE C+CPP COMPILERS
#

export CC=gcc CXX=g++

#
# SET COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O3 -march=native'

#
# SET PATH
#

PATH="\
/usr/lib/ccache:\
$HOME/.cargo/bin:\
$HOME/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n%s\n\n" \
        'The script has completed' \
        'Make sure to star this repository to show your support!' \
        "${repo}"
    exit 0
}

fail_fn()
{
    printf "\n\n%s\n\n%s\n\n%s\n\n" \
        "${1}" \
        'Please create a support ticket so I can work on a fix.' \
        "${repo}/issues"
    exit 1
}

cleanup_fn()
{
    local answer

    printf "\n%s\n\n%s\n%s\n\n" \
        'Do you want to remove the build files?' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' answer

    case "${answer}" in
        1)      sudo rm -fr "${cwd}" "${0}";;
        2)      return 0;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

#
# INSTALL REQUIRED APT cwd
#

if [ -f /usr/local/bin/aria2c ] && [ -f /usr/bin/aria2c ]; then
    sudo apt -y remove aria2c
else
    add_this=aria2
fi


pkgs=("${add_this}" autoconf autogen automake bat bc binutils bison build-essential ccache
      ccdiff checkinstall clang cmake cmake-extras cmake-qt-gui colordiff cpu-checker
      curl dbus-x11 dwarves flex git jq libdmalloc-dev libelf-dev libmimalloc-dev
      libperl-dev libssl-dev libtalloc-dev libtbbmalloc2 libtool libtool-bin lzip m4
      meson nano nasm ninja-build shellcheck sqlite3 synaptic texinfo trash-cli unzip
      uuid-dev wget xclip xsel yasm)

for i in ${pkgs[@]}
do
    missing_pkg="$(dpkg -l | grep -o "${i}")"

    if [ -z "${missing_pkg}" ]; then
        missing_pkgs+=" ${i}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    sudo apt -y install ${missing_pkgs}
    sudo apt -y autoremove
    clear
fi

#
# DOWNLOAD THE ARCHIVE FILE
#

if [ ! -f "$cwd/${archive_ver}" ]; then
    curl -A "${user_agent}" -Lso "${cwd}/${archive_dir}" "${archive_url}"
fi

#
# BUILD PROGRAM FROM SOURCE
#

cd "$cwd" || exit 1
if build 'wsl-kernel' "${archive_ver}"; then
    wget --show-progress -cqO "${archive_name}" "${archive_url}"
    mkdir -p "${archive_dir}"
    tar -zxf "${archive_name}" -C "${archive_dir}" --strip-components 1
    cd "${archive_dir}" || exit 1
    echo 'yes' | make "-j$(nproc --all)" KCONFIG_CONFIG='Microsoft/config-wsl'
    build_done 'wsl-kernel' "${archive_ver}"
fi

# PROMPT USER TO CLEAN UP FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn
