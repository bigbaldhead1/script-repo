#!/Usr/bin/env bash
# Shellcheck disable=sc2162,sc2317

######################################################################################################################################
##
##  Github script: https://github.com/slyfox1186/script-repo/blob/main/bash/installer%20scripts/github%20projects/build-wsl2-kernel
##
##  Purpose: build official wsl2 kernels
##
##  Updated: 12.30.23
##
##  Script version: 2.4
##
######################################################################################################################################

if [ "$EUID" -eq '0' ]; then
    echo "You must run this script without root or sudo."
    exit 1
fi

# Prompt the user to choose the kernel version

prompt_fn() {
    local answer
    clear

    printf "%s\n\n%s\n%s\n%s\n\n"    \
        'Choose the kernel version:' \
        '[1] 5.15.137.3 (12.18.23)'  \
        '[2] 6.1.21.2 (07.25.23)'    \
        '[3] Exit'
    read -p 'Your choices are (1 to 3): ' answer
    clear

    case "$answer" in
        1)      archive_url='https://github.com/microsoft/WSL2-Linux-Kernel/archive/refs/tags/linux-msft-wsl-5.15.137.3.tar.gz';;
        2)      archive_url='https://github.com/microsoft/WSL2-Linux-Kernel/archive/refs/tags/linux-msft-wsl-6.1.21.2.tar.gz';;
        3)      exit 0;;
        *)
                unset answer
                prompt_fn
                ;;
     esac
}
prompt_fn

# Set variables

script_ver=2.4
cwd="$PWD"/wsl-build-script
archive_ver="$(echo "$archive_url" | sed 's/^.*\/.*-wsl-\(.*\)\.tar\.gz$/\1/')"
archive_dir="$cwd/wsl-kernel-$archive_ver"
archive_ext="$archive_url//*."
archive_name="$archive_dir.tar.$archive_ext"
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo

printf "\n%s\n%s\n\n"                    \
    "WSL2 Build Script - v$script_ver" \
    '==============================================='

# Create output directory

if [ ! -d "$cwd" ]; then
    mkdir -p "$cwd"
fi

# Set the c + cxx compilers

export CC=gcc CXX=g++

# Set compiler optimization flags

export {CFLAGS,CXXFLAGS}='-g -O2 -pipe -fno-plt -march=native'

# Set path

PATH="\
/usr/lib/ccache:\
$HOME/.cargo/bin:\
$HOME/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin\
"
export PATH

# Create functions

exit_fn() {
    printf "\n%s\n\n%s\n%s\n\n"                                   \
        'The script has completed'                                \
        'Make sure to star this repository to show your support!' \
        "$web_repo"
    exit 0
}

fail_fn() {
    printf "\n\n%s\n\n%s\n\n%s\n\n"                              \
        "$1"                                                   \
        'Please create a support ticket so I can work on a fix.' \
        "$web_repo/issues"
    exit 1
}

# Install required apt packages

pkgs=(autoconf autogen automake bc binutils bison build-essential ccache
      curl dbus-x11 dwarves flex git jq libelf-dev libperl-dev libssl-dev
      libtalloc-dev libtbbmalloc2 libtool libtool-bin lzip m4 nasm texinfo
      unzip uuid-dev wget xclip xsel yasm)

for i in ${pkgs[@]}
do
    missing_pkg="$(sudo dpkg -l | grep -o "$i")"

    if [ -z "$missing_pkg" ]; then
        missing_pkgs+=" $i"
    fi
done

if [ -n "$missing_pkgs" ]; then
    sudo apt install $missing_pkgs
    clear
fi

# Download the archive file

if [ ! -f "$archive_name" ]; then
    printf "%s\n\n" 'Downloading the source code from GitHub...'
    wget --show-progress -t 2 -cqO "$archive_name" "$archive_url"
fi

# Create the output directory

if [ -d "$archive_dir" ]; then
    sudo rm -fr "$archive_dir"
fi
mkdir -p "$archive_dir"

# Extract the archive files into the output directory

if ! tar -xf "$archive_name" -C "$archive_dir" --strip-components 1; then
    fail_fn "Failed to extract the archive files. Line: $LINENO"
fi

# Build program from source

cd "$archive_dir" || exit 1
echo 'yes' | make "-j$(nproc --all)" KCONFIG_CONFIG='Microsoft/config-wsl'

# Show exit message
exit_fn
