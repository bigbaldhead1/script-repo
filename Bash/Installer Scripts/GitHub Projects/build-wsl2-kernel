#!/bin/bash
# shellcheck disable=SC2016,SC2046,SC2066,SC2068,SC2086,SC2162,SC2317

###########################################################################################################
##
##  GitHub: https://github.com/slyfox1186/Windows-WSL2-Kernel-build-script
##
##  Supported Distros: Debian-based ( Debian, Ubuntu, etc. )
##
##  Supported architecture: x86_x64
##
##  Purpose: Build the latest Microsoft WSL2 kernel release for version 6 (6.1.21.2) to link to your current distros.
##
##  Install info: The new kernel will be located in the root build directory; the filename will be: vmlinux
##
##                Place vmlinux into a folder inside your Windows "%USERPROFILE%" folder.
##                I placed mine into the folder I created called: "%USERPROFILE%\WSL2\vmlinux"
##
##                Create a file called "%USERPROFILE%\.wslconfig" and visit the below website for
##                instructions on how to link the new kernel to your linux distros.
##
##                https://learn.microsoft.com/en-us/windows/wsl/wsl-config
##
##  Updated: 07.31.23
##
##  Version: 2.1
##
###########################################################################################################

clear

#
# define variables
#

script_ver=2.1
cwd="$PWD"/wsl2-kernel-build-script
packages="$cwd"/packages
repo=https://github.com/slyfox1186/Windows-WSL2-Kernel-build-script
debug=OFF # CHANGE THE DEBUG VARIABLE TO "ON" FOR HELP TROUBLESHOOTING ISSUES

#
# FIGURE OUT WHICH COMPILERS TO USE
#

export CC=gcc CXX=g++
export {CFLAGS,CXXFLAGS}='-g -O3 -march=native'

#
# set the available cpu thread and core count for parallel processing (speeds up the build process)
#

if [ -f /proc/cpuinfo ]; then
    cpu_threads="$(grep -c ^processor /proc/cpuinfo)"
else
    cpu_threads="$(nproc --all)"
fi

#
# set the PATH variable
#

PATH="\
/usr/lib/ccache:\
$PATH\
"
export PATH

#
# define functions
#

exit_fn()
{
    printf "\n%s\n\n%s\n\n%s\n\n%s\n\n%s\n%s\n\n%s\n\n%s\n\n" \
        'The new kernel will be located in the root build directory' \
        'The filename will be called: vmlinux' \
        'Place the kernel into a folder inside your "%USERPROFILE%"' \
        'I placed mine into the folder I created called: "%USERPROFILE%\WSL2\vmlinux"' \
        'Create a file called "%USERPROFILE%\.wslconfig" and look up online how to link' \
        'the new kernel you copied so that your WSL2 linux Distro loads it.' \
        'Make sure to star this repository to show your support!' \
        "$repo"
    exit 0
}

fail_fn()
{
    printf "\n%s\n\n%s\n\n%s\n\n" \
        "$1" \
        'Please create a support ticket' \
        'https://github.com/slyfox1186/Windows-WSL2-Kernel-build-script/issues/'
    exit 1
}

cleanup_fn()
{
    local answer
    printf "%s\n%s\n%s\n\n%s\n%s\n\n" \
        '==========================================' \
        ' Do you want to clean up the build files? ' \
        '==========================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' answer

    case "$answer" in
        1)
            sudo rm "$0"
            echo 'cleanup finished.'
            exit_fn
            ;;
        2)  exit_fn;;
        *)
            printf "%s\n\n" 'Bad user input... Resetting script.'
            sleep 3
            unset answer
            clear
            cleanup_fn
            ;;
    esac
}

download()
{
    dl_path="$packages"
    dl_url="$1"
    dl_file="${2:-"${1##*/}"}"

    if [[ "$dl_file" =~ tar. ]]; then
        output_dir="${dl_file%.*}"
        output_dir="${3:-"${output_dir%.*}"}"
    else
        output_dir="${3:-"${dl_file%.*}"}"
    fi

    target_file="$dl_path/$dl_file"
    target_dir="$dl_path/$output_dir"

    if [ -f "$target_file" ]; then
        echo "The file \"$dl_file\" is already downloaded."
    else
        echo "Downloading \"$dl_url\" saving as \"$dl_file\""
        if ! curl -Lso "$target_file" "$dl_url"; then
            printf "\n%s\n\n" "The script failed to download \"$dl_file\" and will try again in 10 seconds..."
            sleep 10
            if ! curl -Lso "$target_file" "$dl_url"; then
                fail_fn "The script failed to download \"$dl_file\" twice and will now exit."
            fi
        fi
        echo 'Download Completed'
    fi

    if [ -d "$target_dir" ]; then
        sudo rm -fr "$target_dir"
    fi

    mkdir -p "$target_dir"

    if [ -n "$3" ]; then
        if ! tar -xf "$target_file" -C "$target_dir" 2>/dev/null >/dev/null; then
            sudo rm "$target_file"
            fail_fn "The script failed to extract \"$dl_file\" so it was deleted. Please re-run the script."
        fi
    else
        if ! tar -xf "$target_file" -C "$target_dir" --strip-components 1 2>/dev/null >/dev/null; then
            sudo rm "$target_file"
            fail_fn "The script failed to extract \"$dl_file\" so it was deleted. Please re-run the script."
        fi
    fi

    printf "%s\n\n" "File extracted: $dl_file"

    cd "$target_dir" || fail_fn "Unable to change the working directory to: $target_dir"
}

execute()
{
    echo "$ $*"

    if [ "$debug" = 'ON' ]; then
        if ! output=$("$@"); then
            notify-send -t 10000 "Failed to execute: $*"
            fail_fn "Failed to execute: $*"
        fi
    else
        if ! output=$("$@" 2>&1); then
            notify-send -t 10000 "Failed to execute: $*"
            fail_fn "Failed to execute: $*"
        fi
    fi
}


build()
{
    echo
    echo "building $1 - version $2"
    echo '===================================='

    if [ -f "$PWD/$1.done" ]; then
        if grep -Fx "$2" "$PWD/$1.done" 2>/dev/null; then
            echo "$1 version $2 already built. Remove $PWD/$1.done lockfile to rebuild it."
            return 1
        else
            echo "$1 is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove $PWD/$1.done lockfile."
            return 1
        fi
    fi

    return 0
}

build_done()
{
    echo "$2" > "$PWD/$1.done"
}

installed()
{
    return $(dpkg-query -W -f '${Status}\n' "$1" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}')
}

clear
printf "%s\n%s\n\n" \
    "WSL2-Custom-Kernel build script v$script_ver" \
    '======================================'

printf "\n%s\n\n" "The script will utilize ($cpu_threads) CPU threads for parallel processing to accelerate the build speed."

#
# REQUIRED APT PACKAGES
#

printf "\n%s\n%s\n\n" \
    'Installing required apt packages' \
    '=================================='

pkgs=(bc build-essential curl flex bison ccache dwarves jq libssl-dev libelf-dev)

for pkg in ${pkgs[@]}
do
    if ! installed "$pkg"; then
        missing_pkgs+=" $pkg"
    fi
done

if [ -n "$missing_pkgs" ]; then
        if sudo apt -y install $missing_pkgs; then
            printf "\n%s\n\n" 'The required apt packages were installed.'
        else
            fail_fn 'The required apt packages failed to install'
        fi
else
    echo 'The required apt packages are already installed.'
fi

if build 'wsl2-linux-kernel' '6.1.21.2'; then
    download 'https://github.com/microsoft/WSL2-Linux-Kernel/archive/refs/tags/linux-msft-wsl-6.1.21.2.tar.gz' 'wsl-6.1.21.2.tar.gz'
    echo 'yes' | make KCONFIG_CONFIG='Microsoft/config-wsl' "-j$cpu_threads"
    build_done 'wsl2-linux-kernel' '6.1.21.2'
fi

# call exit script function
exit_fn
