#!/usr/bin/env bash
# shellcheck disable=SC2068,SC2086,SC2162,SC2317

################################################################################################
##
##  PurposeL: Build the latest stable release of OpenSSL from the official website's source code
##            which will update OpenSSL and the SSL certificate directory to the latest version.
##
##  Updated:
##           - Script: 11.23.23
##           - OpenSSL: v3.2.0
##
##  Script version: 1.9
##
##  Enabled features:
##                    - fips
##                    - rc5
##                    - shared
##                    - tfo
##                    - threads
##                    - zlib
##
################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET VARIABLES
#

script_ver=1.9
archive_dir=openssl-3.2.0
archive_url="https://www.openssl.org/source/${archive_dir}.tar.gz"
archive_ext="${archive_url//*.}"
archive_name="${archive_dir}.tar.${archive_ext}"
cwd="${PWD}"/openssl-build-script
install_dir=/usr/local/ssl
ssl_dir=/usr/local/ssl
#cert_dir="${ssl_dir}"/certs
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo

printf "%s\n%s\n\n"                         \
    "OpenSSL Build Script - v${script_ver}" \
    '==============================================='
sleep 2

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}" ]; then
    sudo rm -fr "${cwd}"
fi
mkdir -p "${cwd}"
#sudo mkdir -p "${cert_dir}"

#
# SET THE CC/CXX COMPILERS & THE COMPILER OPTIMIZATION FLAGS
#

CC=clang
CXX=clang++
CFLAGS='-g -O3 -pipe -fPIC -pthread -march=native'
CXXFLAGS="${CFLAGS}"
CPPFLAGS='-I/usr/local/include -I/usr/include'
export CC CXX CFLAGS CPPFLAGS CXXFLAGS

#
# SET THE PATH
#

PATH="\
/usr/lib/ccache:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

#
# SET THE PKG_CONFIG_PATH
#

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/usr/local/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/usr/local/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/usr/local/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n\n"                                       \
        'Make sure to star this repository to show your support!' \
        "${web_repo}"
    exit 0
}

fail_fn()
{
    printf "\n\n%s\n\n%s\n\n%s\n\n"                  \
        "${1}"                                       \
        'To report a bug please create an issue at:' \
        "${web_repo}/issues"
    exit 1
}

cleanup_fn()
{
    local choice

    printf "\n%s\n%s\n%s\n\n%s\n%s\n\n"                \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes'                                      \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "${choice}" in
        1)      sudo rm -fr "${cwd}";;
        2)      echo;;
        *)
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(autoconf autogen automake build-essential ca-certificates ccache checkinstall clang curl
      libc-ares-dev libcurl4-openssl-dev libdmalloc-dev libgcrypt20-dev libgmp-dev libgpg-error-dev
      libjemalloc-dev libmbedtls-dev libsctp-dev libssh2-1-dev libssh-dev libssl-dev libtool libtool-bin
      libxml2-dev m4 zlib1g-dev)

for pkg in ${pkgs[@]}
do
    missing_pkg="$(sudo dpkg -l | grep -o "${pkg}")"

    if [ -z "${missing_pkg}" ]; then
        missing_pkgs+=" ${pkg}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    sudo apt -y install ${missing_pkgs}
    clear
fi

#
# INSTALL CA CERTS FROM CURL'S OFFICIAL WEBSITE
#

#if [ ! -f "${cert_dir}"/cacert.pem ]; then
#    printf "%s\n%s\n\n"                            \
#       'Download the latest security certificate' \
#        '================================================'
#
#    wget -U "${user_agent}" -cqO "${cwd}"/cacert.pem 'https://curl.se/ca/cacert.pem'
#
#    if ! sudo mv "${cwd}"/cacert.pem "${cert_dir}"/cacert.pem; then
#        fail_fn "Failed to move file: '${cwd}/cacert.pem' to '${cert_dir}/cacert.pem'. Line: ${LINENO}"
#    fi
#fi

#
# DOWNLOAD THE ARCHIVE FILE
#

if [ ! -f "${cwd}/${archive_name}" ]; then
    wget -U "${user_agent}" -cqO "${cwd}/${archive_name}" "${archive_url}"
fi

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}/${archive_dir}" ]; then
    sudo rm -fr "${cwd}/${archive_dir}"
fi
mkdir -p "${cwd}/${archive_dir}/build"

#
# EXTRACT ARCHIVE FILES
#

if ! tar -zxf "${cwd}/${archive_name}" -C "${cwd}/${archive_dir}" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: ${cwd}/${archive_name}"
    exit 1
fi

#
# IF UBUNTU IS THE CURRENT OS THEN YOU MUST SOFTLINK FOR OPENSSL TO FUNCTION
#

ubuntu_os_version() { sudo ln -sf '/usr/lib64/libcrypto.so.3' "/lib/${install_dir}/"; }

find_lsb_release="$(sudo find /usr/bin/ -type f -name 'lsb_release')"

if [ -f '/etc/os-release' ]; then
    . '/etc/os-release'
    OS_TMP="$NAME"
    OS="$(echo "${OS_TMP}" | awk '{print $1}')"
elif [ -n "${find_lsb_release}" ]; then
    OS="$(lsb_release -d | awk '{print $2}')"
else
    fail_fn "Failed to define the \$OS and/or \$VER variables. Line: ${LINENO}"
fi

#
# TEST THE OS AND ITS VERSION IF UBUNTU THEN CALL THE pkgs_fn
#

case "${OS}" in
    Ubuntu)     ubuntu_os_version;;
esac

#
# BUILD PROGRAM FROM SOURCE
#

cd "${cwd}/${archive_dir}/build" || exit 1
clear
../config --prefix="${install_dir}" \
          --openssldir="${ssl_dir}" \
          shared                    \
          zlib
echo
if ! make "-j$(nproc --all)"; then
    fail_fn "Failed to execute: make -j$(nproc --all). Line: ${LINENO}"
fi

echo
if ! sudo make install_sw; then
    fail_fn "Failed to execute: sudo make install_sw. Line: ${LINENO}"
fi

# RUN LDCONFIG TO UPDATE THE LINKER LIBRARY FILES
sudo ldconfig "${install_dir}"/lib64 2>/dev/null

# PROMPT USER TO CLEAN UP FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn
