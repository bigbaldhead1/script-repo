#!/usr/bin/env bash
# shellcheck disable=SC2162,SC2317

#############################################################################
##
##  Install OpenSSL from the source code with multiple optional
##  features enabled.
## 
##  The script also installs SCTP Module Support which allows OpenSSL
##  to enable its own SCTP feature support. 
##  
##  Enabled features: egd, fips, md2, rc5, trace, sctp, threads, and zlib
##
##  Updated: 10.01.23
##
##  Script version: 1.4
##
#############################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET VARIABLES
#

script_ver=1.4
archive_dir=openssl-3.1.3
archive_url="https://www.openssl.org/source/${archive_dir}.tar.gz"
archive_ext="${archive_url//*.}"
archive_name="${archive_dir}.tar.${archive_ext}"
parent_dir="${PWD}"
cwd="${parent_dir}"/openssl-build-script
install_dir=/usr
ssl_dir=/usr/lib/ssl
cert_dir="${ssl_dir}/certs"
pem_file=cacert.pem
pem_in="${cwd}/${pem_file}"
pem_out="${cert_dir}/${pem_file}"
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo

printf "%s\n%s\n\n" \
    "OpenSSL Build Script - v${script_ver}" \
    '==============================================='

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}" ]; then
    sudo rm -fr "${cwd}"
fi
mkdir -p "${cwd}"

#
# SET THE C+CPP COMPILERS
#

export CC=gcc CXX=g++

#
# EXPORT COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O2 -march=native'

#
# SET THE PATH VARIABLE
#

PATH="\
/usr/lib/ccache:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

#
# SET THE PKG_CONFIG_PATH VARIABLE
#

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/usr/local/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/usr/local/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/usr/local/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n\n" \
        'Make sure to star this repository to show your support!' \
        "${web_repo}"
    exit 0
}

fail_fn()
{
    printf "\n\n%s\n\n%s\n\n%s\n\n" \
        "${1}" \
        'To report a bug please create an issue at:' \
        "${web_repo}/issues"
    exit 1
}

cleanup_fn()
{
    local choice

    printf "%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "${choice}" in
        1)
                sudo rm -fr "${cwd}"
                cd "${parent_dir}" || exit 1
                if [ -f "${pem_file}" ]; then
                    sudo rm "${pem_file}"
                fi
                ;;
        2)      clear;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(autoconf autogen automake build-essential ca-certificates ccache curl libc-ares-dev libcurl4-openssl-dev
      libdmalloc-dev libgcrypt20-dev libgmp-dev libgpg-error-dev libjemalloc-dev libmbedtls-dev libsctp-dev
      libssh2-1-dev libssh-dev libssl-dev libtool libtool-bin libxml2-dev m4 zlib1g-dev)

for i in ${pkgs[@]}
do
    missing_pkg="$(sudo dpkg -l | grep -o "${i}")"

    if [ -z "${missing_pkg}" ]; then
        missing_pkgs+=" ${i}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    sudo apt -y install ${missing_pkgs}
    clear
fi
unset i missing_pkgs

#
# INSTALL CA CERTS FROM CURL'S OFFICIAL WEBSITE
#

if [ ! -f "${pem_out}" ]; then
    printf "%s\n%s\n\n" \
        'Download the latest security certificate' \
        '================================================'
    curl -A "${user_agent}" -Lso "${pem_in}" "https://curl.se/ca/${pem_file}"
    if ! sudo mv "${pem_in}" "${pem_out}"; then
        fail_fn "Failed to move \"${pem_in}\" to \"${pem_out}\":Line ${LINENO}"
    fi
fi

#
# DOWNLOAD THE ARCHIVE FILE
#

if [ ! -f "${cwd}/${archive_name}" ]; then
    curl -A "${user_agent}" -Lso "${cwd}/${archive_name}" "${archive_url}"
fi

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}/${archive_dir}" ]; then
    sudo rm -fr "${cwd}/${archive_dir}"
fi
mkdir -p "${cwd}/${archive_dir}/build"

#
# EXTRACT ARCHIVE FILES
#

if ! tar -zxf "${cwd}/${archive_name}" -C "${cwd}/${archive_dir}" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: ${cwd}/${archive_name}"
    exit 1
fi

#
# IF UBUNTU IS THE CURRENT OS THEN YOU MUST SOFTLINK FOR OPENSSL TO FUNCTION
#

ubuntu_os_version() { sudo ln -sf /usr/lib64/libcrypto.so.3 /lib/"${install_dir}"/; }

if [ -f /etc/os-release ]; then
    source /etc/os-release
    OS="${NAME}"
    VER="${VERSION_ID}"
elif type lsb_release >/dev/null 2>&1; then
    OS="$(lsb_release -si)"
    VER="$(lsb_release -sr)"
elif [ -f /etc/lsb-release ]; then
    source /etc/lsb-release
    OS="${DISTRIB_ID}"
    VER="${DISTRIB_RELEASE}"
elif [ -f /etc/debian_version ]; then
    OS=Debian
    VER="$(cat /etc/debian_version)"
else
    OS="$(uname -s)"
    VER="$(uname -r)"
fi

#
# TEST THE OS AND ITS VERSION IF UBUNTU THEN CALL THE pkgs_fn
#

case "${OS}" in
    Debia*)         clear;;
    Ubunt*)         ubuntu_os_version;;
    *)              fail_fn "Could not detect the OS architecture:Line ${LINENO}";;
esac

#
# BUILD PROGRAM FROM SOURCE
#

clear
cd "${cwd}/${archive_dir}/build" || exit 1
../Configure --prefix="${install_dir}"        \
             --openssldir="${ssl_dir}"        \
             --with-rand-seed=os              \
             --with-zlib-include=/usr/include \
             --with-zlib-lib=/usr/lib         \
             enable-egd                       \
             enable-fips                      \
             enable-md2                       \
             enable-rc5                       \
             enable-trace                     \
             threads                          \
             zlib
make "-j$(nproc --all)"
if ! sudo make install_sw; then
    fail_fn "Failed to execute: sudo make install_sw:Line ${LINENO}"
    exit 1
fi

if ! sudo make install_fips; then
    fail_fn "Failed to execute: sudo make install_fips:Line ${LINENO}"
    exit 1
fi

# REQUIRED FOR FIPS FUNCTIONALITY TO WORK
sudo openssl fipsinstall >/dev/null

# ENSURE THE CORRECT PERMISSIONS ARE ATTACHED TO THE CUSTOM PEM FILE THAT WAS ADDED
if [ -f "${pem_out}" ]; then
    sudo chmod 644 "${pem_out}"
fi

# PROMPT USER TO CLEAN UP FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn
