#!/usr/bin/env bash

###########################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/GitHub%20Projects/build-clang-16
##
##  Purpose: Build LLVM-16
##
##  Updated: 09.07.23
##
##  Script version: 1.1
##
###########################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET VARIABLES
#

script_ver=1.1
archive_dir=llvm-project-16.0.6
archive_url=https://github.com/llvm/llvm-project/releases/download/llvmorg-16.0.6/llvm-project-16.0.6.src.tar.xz
archive_ext="${archive_url//*.}"
archive_name="${archive_dir}.tar.${archive_ext}"
cwd="${PWD}"/llvm-16-build-script
install_dir=/usr/local
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36'
repo=https://github.com/slyfox1186/script-repo

list1='clang;clang-tools-extra;openmp'
list2='libcxx;libcxxabi;libunwind;compiler-rt'

printf "%s\n%s\n\n" \
    "LLVM 16 Build Script - v${script_ver}" \
    '==============================================='

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}" ]; then
    sudo rm -fr "${cwd}"
fi
mkdir -p "${cwd}"

#
# SET THE C+CPP COMPILERS
#

export CC=gcc CXX=g++

#
# EXPORT COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O2 -ffunction-sections -fdata-sections -march=native'

#
# SET THE PATH VARIABLE
#

PATH="\
/usr/lib/ccache:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

#
# SET THE PKG_CONFIG_PATH VARIABLE
#

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/x86_64-linux-gnu/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n\n" \
        'Make sure to star this repository to show your support!' \
        "${repo}"
    exit 0
}

fail_fn()
{
    printf "\n%s\n\n%s\n\n" \
        "${1}" \
        "To report a bug create an issue at: ${repo}/issues"
    exit 1
}

cleanup_fn()
{
    local choice

    printf "%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "${choice}" in
        1)      sudo rm -fr "${cwd}";;
        2)      echo;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs_fn()
{
    pkgs=(autoconf autoconf-archive autogen automake build-essential ccache
          cmake curl git jq libtool libtool-bin lzip m4 pkg-config)

    for i in ${pkgs[@]}
    do
        missing_pkg="$(sudo dpkg -l | grep -o "${i}")"

        if [ -z "${missing_pkg}" ]; then
            missing_pkgs+=" ${i}"
        fi
    done

    if [ -n "${missing_pkgs}" ]; then
        sudo apt -y install ${missing_pkgs}
        sudo apt -y autoremove
        clear
    fi
}

#
# DOWNLOAD THE ARCHIVE FILE
#

if [ ! -f "${cwd}/${archive_name}" ]; then
    curl -A "${user_agent}" -Lso "${cwd}/${archive_name}" "${archive_url}"
fi

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}/${archive_dir}" ]; then
    sudo rm -fr "${cwd}/${archive_dir}"
fi
mkdir -p "${cwd}/${archive_dir}/build"

#
# EXTRACT THE ARCHIVE FILE
#

if ! tar -xf "${cwd}/${archive_name}" -C "${cwd}/${archive_dir}" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: ${cwd}/${archive_name}"
    exit 1
fi

#
# BUILD PROGRAM FROM SOURCE
#

cd "${cwd}/${archive_dir}/build" || exit 1
cmake -S ../llvm                        \
-G Ninja -Wno-dev                       \
-DCMAKE_INSTALL_PREFIX="${install_dir}" \
-DCMAKE_BUILD_TYPE=Release              \
-DCMAKE_C_COMPILER="${CC}"              \
-DCMAKE_CXX_COMPILER="${CXX}"           \
-DLLVM_TARGETS_TO_BUILD=host            \
-DLLVM_ENABLE_PROJECTS="${list1}"       \
-DLLVM_ENABLE_RUNTIMES="${list2}"

ninja "-j$(nproc --all)"

if ! sudo ninja "-j$(nproc --all)" install; then
    printf "\n%s\n\n" "Failed to execute: sudo ninja "-j$(nproc --all)" install."
    exit 1
fi

# PROMPT USER TO CLEAN UP FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn
