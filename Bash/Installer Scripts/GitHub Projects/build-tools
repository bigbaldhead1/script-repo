#!/usr/bin/env bash
# shellcheck disable=SC2162,SC2317

########################################################################################################################
##
##  GitHub: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/GitHub%20Projects/build-tools
##
##  Purpose: Install the latest versions of ( CMake, Ninja, Meson, & Golang )
##
##  Updated: 10.06.23
##  Script version: 2.5
##
##  GitHub: https://github.com/slyfox1186/script-repo/edit/main/shell/installers/build-tools
##
##  Supported OS:
##                - Ubuntu 23.04 / 22.04
##                - Debian 10 / 11 / 12
##
##  Added: Go version 1.21.2
##  Added: A new variable named debug to help with troubleshooting issues.
##  Added: cmake GUI
##
########################################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo'
    exit 1
fi

#
# CREATE SCRIPT VARIABLES
#

script_ver=2.5
cwd="${PWD}"/build-tools-script
packages="${cwd}"/packages
install_dir=/usr/local
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo
debug=OFF # CHANGE THE DEBUG VARIABLE TO "ON" FOR HELP TROUBLESHOOTING ISSUES

#
# GET CPU CORE COUNT FOR PARALLEL PROCESSING
#

if [ -f /proc/cpuinfo ]; then
    cpu_threads="$(grep --count ^processor /proc/cpuinfo)"
else
    cpu_threads="$(nproc --all)"
fi

#
# CREATE OUTPUT DIRECTORIES
#

if [ -d "${packages}" ]; then
    sudo rm -fr "${packages}" 
fi
mkdir -p "${packages}"

#
# SET THE C + CPP COMPILERS
#

export CC=gcc CXX=g++

#
# SET COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O2 -march=native'

#
# SET THE PATH VARIABLE
#

PATH="\
/usr/lib/ccache:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

#
# SET THE PKG_CONFIG_PATH VARIABLE
#

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/usr/local/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/usr/local/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/usr/local/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n%s\n\n" \
        'The script has completed' \
        'Make sure to star this repository to show your support!' \
        "${web_repo}"
    exit 0
}

fail_fn()
{
    printf "\n\n%s\n\n%s\n\n%s\n\n" \
        "${1}" \
        'To report a bug please create an issue at:' \
        "${web_repo}/issues"
    exit 1
}

cleanup_fn()
{
    local answer

    printf "\n%s\n\n%s\n%s\n\n" \
        'Do you want to remove the build files?' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' answer

    case "${answer}" in
        1)      sudo rm -fr "${cwd}";;
        2)      return 0;;
        *)
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset answer
                clear
                cleanup_fn
                ;;
    esac
}

show_versions_fn()
{
    local show_cmake_ver show_ninja_ver show_meson_ver
    clear

    show_cmake_ver="$(cmake --version | sed -e 's/cmake version //g' -e 's/CMake suite maintained and supported by Kitware (kitware.com\/cmake).//g' | xargs -n1)"
    show_ninja_ver="$(ninja --version)"
    show_meson_ver="$(meson --version)"
    show_go_ver="$(go version | grep -Eo '[0-9\.]+ | xargs -n1')"

        printf "%s\n\n%s\n%s\n%s\n%s\n" \
            'The updated versions are:' \
            "CMake:  ${show_cmake_ver}" \
            "Ninja:  ${show_ninja_ver}" \
            "Meson:  ${show_meson_ver}" \
            "GoLang: ${show_go_ver}"
}

execute()
{
    echo "$ ${*}"

    if [ "${debug}" = 'ON' ]; then
        if ! output="$("${@}")"; then
            notify-send -t 5000 "Failed to execute: ${*}"
            fail_fn "Failed to execute: ${*}"
        fi
    else
        if ! output="$("${@}" 2>&1)"; then
            notify-send -t 5000 "Failed to execute: ${*}"
            fail_fn "Failed to execute: ${*}"
        fi
    fi
}

download()
{
    dl_path="${packages}"
    dl_url="${1}"
    dl_file="${2:-"${1##*/}"}"

    if [[ "${dl_file}" =~ tar. ]]; then
        output_dir="${dl_file%.*}"
        output_dir="${3:-"${output_dir%.*}"}"
    else
        output_dir="${3:-"${dl_file%.*}"}"
    fi

    target_file="${dl_path}/${dl_file}"
    target_dir="${dl_path}/${output_dir}"

    if [ -f "${target_file}" ]; then
        echo "The file \"${dl_file}\" is already downloaded."
    else
        echo "Downloading \"${dl_url}\" saving as \"${dl_file}\""
        if ! curl -A "${user_agent}" -Lso "${target_file}" "${dl_url}"; then
            printf "\n%s\n\n" "The script failed to download \"${dl_file}\" and will try again in 10 seconds..."
            sleep 10
            if ! curl -A "${user_agent}" -Lso "${target_file}" "${dl_url}"; then
                fail_fn "The script failed to download \"${dl_file}\" twice and will now exit:Line ${LINENO}"
            fi
        fi
        echo 'Download Completed'
    fi

    if [ -d "${target_dir}" ]; then
        sudo rm -fr "${target_dir}"
    fi
    mkdir -p "${target_dir}"

    if [ -n "${3}" ]; then
        if ! tar -xf "${target_file}" -C "${target_dir}" 2>/dev/null >/dev/null; then
            sudo rm "${target_file}"
            fail_fn "The script failed to extract \"${dl_file}\" so it was deleted. Please re-run the script:Line ${LINENO}"
        fi
    else
        if ! tar -xf "${target_file}" -C "${target_dir}" --strip-components 1 2>/dev/null >/dev/null; then
            sudo rm "${target_file}"
            fail_fn "The script failed to extract \"${dl_file}\" so it was deleted. Please re-run the script:Line ${LINENO}"
        fi
    fi

    printf "%s\n\n" "File extracted: ${dl_file}"

    cd "${target_dir}" || fail_fn "Unable to change the working directory to: ${target_dir}:Line ${LINENO}"
}

build()
{
    echo
    echo "Building ${1} - version ${2}"
    echo '===================================='

    if [ -f "${packages}/${1}.done" ]; then
        if grep -Fx "${2}" "${packages}/${1}.done" >/dev/null; then
            echo "${1} version ${2} is already built. Remove ${packages}/${1}.done lockfile to rebuild it."
            return 1
        else
            echo "${1} is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove ${packages}/${1}.done lockfile."
            return 1
        fi
    fi

    return 0
}

curl_timeout=10

git_1_fn()
{
    local curl_cmd github_repo github_url g_sver g_sver1

    # SCRAPE GITHUB'S API FOR THE LATEST REPO VERSION
    github_repo="${1}"
    github_url="${2}"

    if curl_cmd="$(curl -A "${user_agent}" -m "${curl_timeout}" -sSL "https://api.github.com/repos/${github_repo}/${github_url}")"; then
        g_sver="$(echo "${curl_cmd}" | jq -r '.[0].tag_name' 2>/dev/null)"
        g_sver1="$(echo "${curl_cmd}" | jq -r '.[0].name' 2>/dev/null)"
        g_ver="${g_sver#v}"
        g_ver1="${g_sver1#v}"
    fi
}

git_2_fn()
{
    gitlab_repo="${1}"
    github_url="${2}"

    if curl_cmd="$(curl -A "${user_agent}" -m "${curl_timeout}" -sSL "https://gitlab.kitware.com/api/v4/projects/${gitlab_repo}/repository/${github_url}" | jq -r '.[0].name')"; then
        g_ver="${curl_cmd#v}"
    fi
}

git_ver_fn()
{
    local t_flag u_flag v_flag v_tag v_url

    v_url="${1}"
    v_tag="${2}"

    if [ -n "${3}" ]; then
        v_flag="${3}"
    fi

    case "${v_flag}" in
            R)      t_flag=releases;;
            T)      t_flag=tags;;
            *)      fail_fn "Could not detect the variable \"v_flag\":Line ${LINENO}"
    esac

    case "${v_tag}" in
            1)      u_flag=git_1_fn;;
            2)      u_flag=git_2_fn;;
            *)      fail_fn "Could not detect the variable \"v_tag\":Line ${LINENO}"
    esac

    "${u_flag}" "${v_url}" "${t_flag}" 2>/dev/null
}

build_done() { echo "${2}" > "${cwd}/${1}.done"; }

#
# PRINT SCRIPT BANNER
#

printf "%s\n%s\n\n" \
    "Build-tools script: v${script_ver}" \
    '===================================='

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(autoconf automake autogen build-essential ccache cmake curl
      jq git libssl-dev python3 python3-pip qt6-base-dev)

for i in ${pkgs[@]}
do
    missing_pkg="$(sudo dpkg -l | grep -o "${i}")"

    if [ -z "${missing_pkg}" ]; then
        missing_pkgs+=" ${i}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    sudo apt -y install ${missing_pkgs}
    sudo apt -y autoremove
    clear
fi
unset i missing_pkgs

#
# MAKE SURE WE USE THE CORRECT M4 FOLDER
#

export ACLOCAL_PATH=/usr/share/aclocal

#
# INSTALL FROM SOURCE CODE
#

git_ver_fn '541' '2' 'T'
if build 'cmake' "${g_ver}"; then
    download "https://gitlab.kitware.com/cmake/cmake/-/archive/v${g_ver}/cmake-v${g_ver}.tar.bz2" "cmake-${g_ver}.tar.bz2"
    execute ./bootstrap --prefix=/usr/local --enable-ccache --parallel="$(nproc --all)" --qt-gui
    execute make "-j${cpu_threads}"
    execute sudo make install
    build_done 'cmake' "${g_ver}"
fi

git_ver_fn 'ninja-build/ninja' '1' 'T'
if build 'ninja' "${g_ver1}"; then
    download "https://codeload.github.com/ninja-build/ninja/tar.gz/refs/tags/v${g_ver1}" "ninja-${g_ver1}.tar.gz"
    re2c_path="$(type -P re2c)"
    execute cmake -B build -DCMAKE_{install_dir="${install_dir}",BUILD_TYPE=Release} \
        -DRE2C="${re2c_path}" -DBUILD_TESTING=OFF -G 'Unix Makefiles' -Wno-dev
    execute make "-j${cpu_threads}" -C build
    execute sudo make -C build install
    build_done 'ninja' "${g_ver1}"
fi

git_ver_fn 'mesonbuild/meson' '1' 'T'
if build 'meson' "${g_ver1}"; then
    download "https://codeload.github.com/mesonbuild/meson/tar.gz/refs/tags/${g_ver1}" "meson-${g_ver1}.tar.gz"
    execute python3 setup.py build
    execute sudo python3 setup.py install --prefix="${install_dir}"
    build_done 'meson' "${g_ver1}"
fi

if build 'golang' '1.21.2'; then
    download 'https://go.dev/dl/go1.21.2.linux-amd64.tar.gz' 'golang-1.21.2.tar.gz'
    execute sudo cp -f bin/go bin/gofmt "${install_dir}"/bin
    sudo rm -fr "${install_dir}"/go 2>/dev/null
    sudo mkdir -p "${install_dir}"/go
    GOROOT="${install_dir}"/go
    PATH="${PATH}:${GOROOT}/bin"
    export GOROOT PATH
    build_done 'golang' '1.21.2'
fi

# LDCONFIG MUST BE RUN NEXT IN ORDER TO UPDATE FILE CHANGES
sudo ldconfig 2>/dev/null

# SHOW THE NEWLY INSTALLED VERSION OF EACH PACKAGE
show_versions_fn

# PROMPT THE USER TO CLEAN UP THE BUILD FILES
cleanup_fn

# SHOW THE EXIT MESSAGE
exit_fn
