#!/usr/bin/env bash

###########################################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/GitHub%20Projects/build-git
##
##  Purpose: Build Git
##
##  Updated: 09.05.23
##
##  Script version: 1.0
##
###########################################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET VARIABLES
#

script_ver=1.0
archive_dir=2.42.0
archive_url=https://github.com/git/git/archive/refs/tags/v${archive_dir}.tar.gz
archive_ext="${archive_url//*.}"
archive_name="${archive_dir}.tar.${archive_ext}"
cwd="${PWD}"/git-build-script
install_dir=/usr
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo

printf "%s\n%s\n\n" \
    "git build script - v${script_ver}" \
    '==============================================='

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}" ]; then
    sudo rm -fr "${cwd}"
fi
mkdir -p "${cwd}"

#
# SET THE C+CPP COMPILERS
#

export CC=gcc CXX=g++

#
# SET COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O2 -march=native'

#
# SET THE PATH VARIABLE
#

PATH="\
/usr/lib/ccache:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

#
# SET THE PKG_CONFIG_PATH VARIABLE
#

PKG_CONFIG_PATH="\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/${install_dir}/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/${install_dir}/pkgconfig:\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/${install_dir}/pkgconfig:\
/usr/share/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n\n" \
        'Make sure to star this repository to show your support!' \
        "${web_repo}"
    exit 0
}

fail_fn()
{
    printf "\n%s\n\n%s\n\n" \
        "${1}" \
        "To report a bug create an issue at: ${web_repo}/issues"
    exit 1
}

cleanup_fn()
{
    local choice

    printf "%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "${choice}" in
        1)      sudo rm -fr "${cwd}";;
        2)      echo;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(autoconf autoconf-archive autogen automake binutils bison build-essential bzip2 ccache
      curl docbook2x install-info libc6-dev libintl-perl libtool libtool-bin libzstd-dev lzip
      lzma lzma-dev m4 nasm texinfo xz-utils zlib1g-dev zstd yasm)

for i in ${pkgs[@]}
do
	missing_pkg="$(sudo dpkg -l | grep -o "${i}")"

	if [ -z "${missing_pkg}" ]; then
		missing_pkgs+=" ${i}"
	fi
done

if [ -n "${missing_pkgs}" ]; then
	sudo apt -y install ${missing_pkgs}
	sudo apt -y autoremove
	clear
fi

#
# DOWNLOAD THE ARCHIVE FILE
#

if [ ! -f "${cwd}/${archive_name}" ]; then
    curl -A "${user_agent}" -Lso "${cwd}/${archive_name}" "${archive_url}"
fi

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}/${archive_dir}" ]; then
    sudo rm -fr "${cwd}/${archive_dir}"
fi
mkdir -p "${cwd}/${archive_dir}/build"

#
# EXTRACT ARCHIVE FILES
#

if ! tar -zxf "${cwd}/${archive_name}" -C "${cwd}/${archive_dir}" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: ${cwd}/${archive_name}"
    exit 1
fi

#
# BUILD PROGRAM FROM SOURCE
#

cd "${cwd}/${archive_dir}" || exit 1
make configure
./configure --prefix="${install_dir}"
make "-j$(nproc --all)" all doc
if ! sudo make install; then
    fail_fn "Failed to execute: sudo make install install-doc install-html:Line ${LINENO}"
    exit 1
fi

# PROMPT USER TO CLEAN UP FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn
