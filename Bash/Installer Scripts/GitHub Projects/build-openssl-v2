#!/usr/bin/env bash
#shellcheck disable=SC2155

if [[ "$EUID" -ne 0 ]]; then
    printf "%s\n\n" "You must run this script as root/sudo."
    exit 1
fi

# Define OpenSSL version and download URL
openssl_version="$(curl -s https://www.openssl.org/source/ | grep -o 'openssl-3\.2\.[0-9]' | head -n 1)"
openssl_url="https://www.openssl.org/source/$openssl_version.tar.gz"
tar_file="$cwd/$openssl_version.tar.gz"

fail_fn() {
    echo
    echo "$1"
    echo "Please report errors at: https://github.com/slyfox1186/script-repo/issues"
    echo
    exit 1
}

# Function to install required packages
install_required_packages() {
    local pkgs=(
        autoconf autogen automake build-essential ca-certificates ccache
        checkinstall clang curl libc-ares-dev libcurl4-openssl-dev
        libdmalloc-dev libgcrypt20-dev libgmp-dev libgpg-error-dev
        libjemalloc-dev libmbedtls-dev libsctp-dev libssh2-1-dev
        libssh-dev libssl-dev libtool libtool-bin libxml2-dev m4 perl
        zlib1g-dev
    )

    # Initialize arrays for missing, available, and unavailable packages
    missing_packages=()
    available_packages=()
    unavailable_packages=()

    # Loop through the array to find missing packages
    for pkg in "${pkgs[@]}"
    do
        if ! dpkg-query -W -f='${Status}' "$pkg" 2>/dev/null | grep -q "ok installed"; then
            missing_packages+=("$pkg")
        fi
    done

    # Check availability of missing packages and categorize them
    for pkg in "${missing_packages[@]}"
    do
        if apt-cache show "$pkg" > /dev/null 2>&1; then
            available_packages+=("$pkg")
        else
            unavailable_packages+=("$pkg")
        fi
    done

    # Print unavailable packages
    if [[ "${#unavailable_packages[@]}" -gt 0 ]]; then
        echo "Unavailable packages: ${unavailable_packages[*]}"
    fi

    # Install available missing packages
    if [[ "${#available_packages[@]}" -gt 0 ]]; then
        echo "Installing available missing packages: ${available_packages[*]}"
        sudo apt install "${available_packages[@]}"
    else
        printf "%s\n\n" "No missing packages to install or all missing packages are unavailable."
    fi
}

set_compiler_flags() {
    export CC="clang" CXX="clang++"
    # Download the script and capture only the last line of the output
    local march=$(curl -sSL "https://get-gcc.optimizethis.net" | bash | tail -n1)

    # Check if arch has a value
    if [ -n "$march" ]; then
        printf "\n%s\n%s\n" "GCC architechure script sourced" "=========================================="
        echo "Retrieved architecture: $march"
    else
        echo "Failed to source the script or retrieve the architecture."
        exit 1
    fi

    # Define directories
    local include_dirs=("/usr/local/include" "/usr/include/x86_64-linux-gnu" "/usr/include")

    local lib_dirs=("/usr/local/lib64" "/usr/local/lib" "/usr/lib64" "/usr/lib" "/lib64" "/lib")

    # Set compiler optimization flags
    generate_flags() {
        local flag_type="$1"
        shift
        printf " $flag_type%s" "$@"
    }

    # Generate flags
    local common_flags="-g -O3 -pipe -march=$march"
    local include_flags="$(generate_flags -I "${include_dirs[@]}")"
    local lib_flags="$(generate_flags -L "${lib_dirs[@]}")"

    # Declare and set compiler flag variables
    CFLAGS="$common_flags"
    CXXFLAGS="$CFLAGS"
    CPPFLAGS="$include_flags"
    LDFLAGS="$lib_flags"

    # Export the flags
    export CFLAGS CXXFLAGS CPPFLAGS LDFLAGS
}

# Function to update the shared library cache
update_shared_library_cache() {
    echo "Updating shared library cache..."
    ldconfig "$install_dir/lib64"
}

# Create a soft link to a directory that should be in PATH
add_openssl_to_path() {
    echo "Adding OpenSSL to PATH..."
    [[ -f "/usr/local/bin/openssl" ]] && rm "/usr/local/bin/openssl"
    ln -sf "$install_dir/bin/openssl" "/usr/local/bin"
}

# Function to download OpenSSL
download_openssl() {
    echo "Downloading OpenSSL..."
    wget --show-progress -cqO "$tar_file" "$openssl_url" || fail_fn "Failed to download the tar file. Line: $LINENO"
}

# Function to extract the tarball
extract_openssl() {
    echo "Extracting OpenSSL..."
    tar -xzf "$tar_file" -C "$cwd" --strip-components 1 || fail_fn "Failed to extract the tar file. Line: $LINENO"
}

# Function to configure OpenSSL
configure_openssl() {
    echo "Configuring OpenSSL..."
    ../Configure linux-x86_64-clang \
                 -DOPENSSL_USE_IPV6=0 \
                 -Wl,-rpath="$install_dir/lib64" \
                 -Wl,--enable-new-dtags \
                 --prefix="$install_dir" \
                 --openssldir="$install_dir" \
                 --release \
                 --with-zlib-include="/usr/include" \
                 --with-zlib-lib="/usr/lib/x86_64-linux-gnu" \
                 enable-brotli \
                 enable-buildtest-c++ \
                 enable-external-tests \
                 enable-ec_nistp_64_gcc_128 \
                 enable-egd \
                 enable-fips \
                 enable-pic \
                 enable-rc5 \
                 enable-sctp \
                 enable-shared \
                 enable-threads \
                 enable-zlib \
                 enable-zstd \
                 no-tests
}

# Function to compile and install OpenSSL
build_and_install_openssl() {
    echo "Compiling and Installing OpenSSL..."
    make "-j$(nproc --all)" || fail_fn "Failed to execute: make -j$(nproc --all). Line: $LINENO"
    echo "Installing OpenSSL..."
    make install_sw install_fips || fail_fn "Failed to execute: make install_sw install_fips. Line: $LINENO"
    openssl fipsinstall
}

# Main script starts here

# Define global variables
cwd="$PWD/openssl-build-script"
install_dir="/usr/local/ssl"

# Set compiler and optimization flags
set_compiler_flags

# Create the output directory
mkdir -p "$cwd/build"

# Install required packages
install_required_packages

# Download OpenSSL
download_openssl

# Extract the tarball
extract_openssl

# Change to the extracted directory
cd "$cwd/build" || exit 1

# Configure OpenSSL
configure_openssl

# Compile and install OpenSSL
build_and_install_openssl

# Add OpenSSL to PATH
add_openssl_to_path

# Update the shared library cache
update_shared_library_cache

# Remove leftover files
[[ -d "$cwd" ]] && rm -fr "$cwd"

echo -e "\nOpenSSL installation completed."
