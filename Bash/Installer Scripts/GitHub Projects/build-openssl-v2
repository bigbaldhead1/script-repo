#!/usr/bin/env bash

usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Options:"
    echo "  -v, --version <version>    Specify the OpenSSL version to install (default: latest 3.2.x)"
    echo "  -p, --prefix <path>        Set the installation prefix (default: /usr/local/ssl)"
    echo "  -j, --jobs <n>             Set the number of parallel jobs for compilation (default: number of CPU cores)"
    echo "  -k, --keep-build           Keep the build directory after installation"
    echo "  -h, --help                 Display this help message and exit"
    exit 0
}

parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -v|--version)
                openssl_version="$2"
                shift 2
                ;;
            -p|--prefix)
                install_dir="$2"
                shift 2
                ;;
            -j|--jobs)
                jobs="$2"
                shift 2
                ;;
            -k|--keep-build)
                keep_build=true
                shift
                ;;
            -h|--help)
                usage
                ;;
            *)
                echo "Unknown option: $1"
                usage
                ;;
        esac
    done
}

fail_fn() {
    printf "\n%s\nPlease report errors at: https://github.com/slyfox1186/script-repo/issues\n\n" "$1" >&2
    exit 1
}

install_required_packages() {
    local -a pkgs=(
        autoconf autogen automake build-essential ca-certificates ccache
        checkinstall clang curl libc-ares-dev libcurl4-openssl-dev
        libdmalloc-dev libgcrypt20-dev libgmp-dev libgpg-error-dev
        libjemalloc-dev libmbedtls-dev libsctp-dev libssh2-1-dev
        libssh-dev libssl-dev libtool libtool-bin libxml2-dev m4 perl
        zlib1g-dev
    )

    local -a missing_packages=()
    for pkg in "${pkgs[@]}"; do
        if ! dpkg-query -W -f='${Status}' "$pkg" 2>/dev/null | grep -q "ok installed"; then
            missing_packages+=("$pkg")
        fi
    done

    if [[ "${#missing_packages[@]}" -gt 0 ]]; then
        echo "Installing missing packages: ${missing_packages[*]}"
        apt install -y "${missing_packages[@]}"
    else
        echo "No missing packages to install."
    fi
}

set_compiler_flags() {
    export CC="clang" CXX="clang++"
    local march
    march=$(curl -sSL "https://get-gcc.optimizethis.net" | bash | tail -n1)

    if [[ -n "$march" ]]; then
        echo "GCC architecture script sourced"
        echo "Retrieved architecture: $march"
    else
        fail_fn "Failed to source the script or retrieve the architecture."
    fi

    local -a include_dirs=("/usr/local/include" "/usr/include/x86_64-linux-gnu" "/usr/include")
    local -a lib_dirs=("/usr/local/lib64" "/usr/local/lib" "/usr/lib64" "/usr/lib")

    local common_flags="-g -O3 -pipe -march=$march"
    local include_flags="${include_dirs[@]/#/-I}"
    local lib_flags="${lib_dirs[@]/#/-L}"

    export CFLAGS="$common_flags"
    export CXXFLAGS="$CFLAGS"
    export CPPFLAGS="$include_flags"
    export LDFLAGS="$lib_flags"
}

update_shared_library_cache() {
    ldconfig "$install_dir/lib64"
}

add_openssl_to_path() {
    local openssl_bin="/usr/local/bin/openssl"
    if [[ -L "$openssl_bin" ]]; then
        rm "$openssl_bin"
    fi
    ln -sf "$install_dir/bin/openssl" "$openssl_bin"
}

create_pkgconfig_softlinks() {
    local pkgconfig_dir="/usr/local/lib/pkgconfig"
    local openssl_pkgconfig_dir="$install_dir/lib64/pkgconfig"

    mkdir -p "$pkgconfig_dir"

    for pc_file in "$openssl_pkgconfig_dir"/*.pc; do
        local pc_filename=$(basename "$pc_file")
        ln -sf "$pc_file" "$pkgconfig_dir/$pc_filename"
    done
}

download_openssl() {
    local openssl_url="https://www.openssl.org/source/$openssl_version.tar.gz"
    if [[ ! -f "$tar_file" ]]; then
        echo "Downloading OpenSSL $openssl_version..."
        wget --show-progress -q -O "$tar_file" "$openssl_url" || fail_fn "Failed to download the tar file. Line: $LINENO"
    else
        echo "OpenSSL $openssl_version archive already exists, skipping download."
    fi
}

extract_openssl() {
    if [[ -d "$src_dir" ]]; then
        echo "OpenSSL $openssl_version source directory already exists, skipping extraction."
    else
        echo "Extracting OpenSSL $openssl_version..."
        tar -xzf "$tar_file" -C "$cwd" || fail_fn "Failed to extract the tar file. Line: $LINENO"
    fi
}

configure_openssl() {
    echo "Configuring OpenSSL..."
    "$src_dir/Configure" linux-x86_64-clang \
                         -DOPENSSL_USE_IPV6=0 \
                         -Wl,-rpath="$install_dir/lib64" \
                         -Wl,--enable-new-dtags \
                         --prefix="$install_dir" \
                         --openssldir="$install_dir" \
                         --release \
                         --with-zlib-include="/usr/include" \
                         --with-zlib-lib="/usr/lib/x86_64-linux-gnu" \
                         enable-brotli \
                         enable-buildtest-c++ \
                         enable-external-tests \
                         enable-ec_nistp_64_gcc_128 \
                         enable-egd \
                         enable-fips \
                         enable-pic \
                         enable-rc5 \
                         enable-sctp \
                         enable-shared \
                         enable-threads \
                         enable-zlib \
                         enable-zstd \
                         no-tests
}

build_and_install_openssl() {
    echo "Compiling OpenSSL..."
    make -j"${jobs:-$(nproc --all)}" || fail_fn "Failed to execute: make -j${jobs:-$(nproc --all)}. Line: $LINENO"
    echo "Installing OpenSSL..."
    make install_sw install_fips || fail_fn "Failed to execute: make install_sw install_fips. Line: $LINENO"
    openssl fipsinstall
}

main() {
    local cwd="/tmp/openssl-build"
    local install_dir="/usr/local/ssl"
    local openssl_version
    local tar_file="$cwd/openssl.tar.gz"
    local src_dir
    local jobs
    local keep_build=false

    if [[ "$EUID" -ne 0 ]]; then
        printf "%s\n\n" "You must run this script as root/sudo."
        exit 1
    fi

    parse_arguments "$@"

    openssl_version=${openssl_version:-$(curl -s https://www.openssl.org/source/ | grep -Po 'openssl-3\.2\.\d+' | head -n1)}
    install_dir=${install_dir:-/usr/local/ssl}
    src_dir="$cwd/$openssl_version"

    set_compiler_flags
    mkdir -p "$cwd"
    install_required_packages
    download_openssl
    extract_openssl
    cd "$src_dir" || exit 1
    configure_openssl
    build_and_install_openssl
    add_openssl_to_path
    update_shared_library_cache
    create_pkgconfig_softlinks

    if [[ $keep_build == false ]]; then
        rm -fr "$cwd"
    fi

    echo -e "\nOpenSSL installation completed."
}

main "$@"
