#!/usr/bin/env bash
clear

# GitHub Script: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/GitHub%20Projects/build-clang-17-gold
# Purpose: Build LLVM Clang-17 with GOLD enabled
# Updated: 01.26.24
# Script version: 1.6
# Added the ability to pass the version you want to install as the first argument to the script.

fail_fn() {
    printf "\n%s\n\n%s\n\n" "$1" "For help or to report a bug, create an issue at: $web_repo/issues"
    exit 1
}

# Function to check if running as root/sudo
check_root() {
    if [ "$EUID" -ne 0 ]; then
        printf "%s\n\n" "You must run this script with root/sudo privileges."
        exit 1
    fi
}

# Function to check and install missing packages
install_required_packages() {
    local pkgs=(
        autoconf autoconf-archive automake autopoint binutils binutils-dev
        bison build-essential ccache clang cmake curl doxygen jq libc6 libc6-dev
        libedit-dev libtool libtool-bin libxml2-dev libzstd-dev m4 nasm ninja-build
        yasm zlib1g-dev
    )
    local missing_packages=()

    for pkg in "${pkgs[@]}"; do
        if ! dpkg-query -W -f='${Status}' "$pkg" 2>/dev/null | grep -q "ok installed"; then
            missing_packages+=("$pkg")
        fi
    done

    if [ ${#missing_packages[@]} -gt 0 ]; then
        echo "Installing missing packages: ${missing_packages[*]}"
        sudo apt install -y "${missing_packages[@]}"
    else
        printf "%s\n\n" "All required packages are installed."
    fi
}

# Function to fix missing x265 library symlink
fix_missing_x265_lib() {
    local link_in='/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30'
    local link_out='/usr/lib/x86_64-linux-gnu/libstdc++.so'

    if [[ ! -f "$link_out" ]] && [[ -f "$link_in" ]]; then
        sudo ln -s "$link_in" "$link_out"
    fi
}

find_highest_clang_version() {
    for clang_version in 15 14 13 12; do
        if command -v "clang-$clang_version" &>/dev/null; then
            CC="clang-$clang_version"
            CXX="clang++-$clang_version"
            return
        fi
    done

    if command -v clang &>/dev/null; then
        CC="clang"
        CXX="clang++"
    else
        fail_fn "Error: Clang is not installed."
    fi
}

# Function to download and extract a file
download_and_extract() {
    local url=$1
    local target_dir=$2
    local filename=${url##*/}

    if [ ! -f "$target_dir/$filename" ]; then
        echo "Downloading $url"
        wget --show-progress -t 2 -cqO "$target_dir/$filename" "$url" || fail_fn "Failed to download $filename"
    fi

    echo "Extracting $filename"
    tar -zxf "$target_dir/$filename" -C "$target_dir" || fail_fn "Failed to extract $filename"
    echo "Extraction of $filename completed."
}

# Main build function
build_and_install_llvm_clang() {
    local clang_version=${1:-$(curl -s "https://api.github.com/repos/llvm/llvm-project/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")')}
    local llvm_url="https://github.com/llvm/llvm-project/archive/refs/tags/$clang_version.tar.gz"
    local llvm_source_dir="$workspace/llvm-project-$clang_version"

    download_and_extract "$llvm_url" "$source_files_dir"
    cd "$llvm_source_dir" || fail_fn "Failed to change directory to LLVM source."

    mkdir -p build && cd build || fail_fn "Failed to create or change to build directory."

    cmake -S llvm -B build \
          -DBENCHMARK_BUILD_32_BITS=OFF \
          -DBENCHMARK_DOWNLOAD_DEPENDENCIES=OFF \
          -DBENCHMARK_ENABLE_ASSEMBLY_TESTS=OFF \
          -DBENCHMARK_ENABLE_DOXYGEN=OFF \
          -DBENCHMARK_ENABLE_EXCEPTIONS=OFF \
          -DBENCHMARK_ENABLE_GTEST_TESTS=OFF \
          -DBENCHMARK_ENABLE_INSTALL=OFF \
          -DBENCHMARK_ENABLE_LIBPFM=OFF \
          -DBENCHMARK_ENABLE_LTO=OFF \
          -DBENCHMARK_ENABLE_TESTING=OFF \
          -DBENCHMARK_ENABLE_WERROR=OFF \
          -DBENCHMARK_FORCE_WERROR=OFF \
          -DBENCHMARK_INSTALL_DOCS=OFF \
          -DBENCHMARK_USE_BUNDLED_GTEST=OFF \
          -DBENCHMARK_USE_LIBCXX=OFF \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_COMPILER="$CXX" \
          -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
          -DCMAKE_CXX_STANDARD=20 \
          -DCMAKE_C_COMPILER="$CC" \
          -DCMAKE_C_FLAGS="$CFLAGS" \
          -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
          -DCMAKE_INSTALL_PREFIX="$install_dir" \
          -DGOLD_EXECUTABLE="$(type -P ld.gold)" \
          -DHAVE_STD_REGEX=ON \
          -DLLVM_ALLOW_PROBLEMATIC_CONFIGURATIONS=OFF \
          -DLLVM_APPEND_VC_REV=ON \
          -DLLVM_BINUTILS_INCDIR=/usr/include \
          -DLLVM_BUILD_32_BITS=OFF \
          -DLLVM_BUILD_BENCHMARKS=OFF \
          -DLLVM_BUILD_DOCS=OFF \
          -DLLVM_BUILD_EXAMPLES=OFF \
          -DLLVM_BUILD_EXTERNAL_COMPILER_RT=OFF \
          -DLLVM_BUILD_LLVM_DYLIB=OFF \
          -DLLVM_BUILD_RUNTIME=ON \
          -DLLVM_BUILD_RUNTIMES=ON \
          -DLLVM_BUILD_TESTS=OFF \
          -DLLVM_BUILD_TOOLS=ON \
          -DLLVM_BUILD_UTILS=ON \
          -DLLVM_BYE_LINK_INTO_TOOLS=OFF \
          -DLLVM_CCACHE_BUILD=ON \
          -DLLVM_DEFAULT_TARGET_TRIPLE="$pc_type" \
          -DLLVM_DEPENDENCY_DEBUGGING=OFF \
          -DLLVM_DYLIB_COMPONENTS=all \
          -DLLVM_ENABLE_ASSERTIONS=OFF \
          -DLLVM_ENABLE_BACKTRACES=ON \
          -DLLVM_ENABLE_BINDINGS=ON \
          -DLLVM_ENABLE_CRASH_DUMPS=OFF \
          -DLLVM_ENABLE_CRASH_OVERRIDES=ON \
          -DLLVM_ENABLE_CURL=ON \
          -DLLVM_ENABLE_DAGISEL_COV=OFF \
          -DLLVM_ENABLE_DOXYGEN=ON \
          -DLLVM_ENABLE_DUMP=OFF \
          -DLLVM_ENABLE_EH=OFF \
          -DLLVM_ENABLE_EXPENSIVE_CHECKS=OFF \
          -DLLVM_ENABLE_FFI=OFF \
          -DLLVM_ENABLE_GISEL_COV=OFF \
          -DLLVM_ENABLE_HTTPLIB=OFF \
          -DLLVM_ENABLE_IDE=OFF \
          -DLLVM_ENABLE_LIBCXX=ON \
          -DLLVM_ENABLE_LIBEDIT=ON \
          -DLLVM_ENABLE_LIBPFM=ON \
          -DLLVM_ENABLE_LIBXML2=ON \
          -DLLVM_ENABLE_LLD=OFF \
          -DLLVM_ENABLE_LLVM_LIBC=OFF \
          -DLLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY=ON \
          -DLLVM_ENABLE_LTO=OFF \
          -DLLVM_ENABLE_MODULES=OFF \
          -DLLVM_ENABLE_MODULE_DEBUGGING=OFF \
          -DLLVM_ENABLE_NEW_PASS_MANAGER=ON \
          -DLLVM_ENABLE_OCAMLDOC=OFF \
          -DLLVM_ENABLE_PEDANTIC=ON \
          -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
          -DLLVM_ENABLE_PIC=ON \
          -DLLVM_ENABLE_PLUGINS=ON \
          -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
          -DLLVM_ENABLE_RTTI=OFF \
          -DLLVM_ENABLE_SPHINX=OFF \
          -DLLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS=OFF \
          -DLLVM_ENABLE_TERMINFO=ON \
          -DLLVM_ENABLE_THREADS=ON \
          -DLLVM_ENABLE_UNWIND_TABLES=ON \
          -DLLVM_ENABLE_WARNINGS=OFF \
          -DLLVM_ENABLE_WERROR=OFF \
          -DLLVM_ENABLE_Z3_SOLVER=OFF \
          -DLLVM_ENABLE_ZLIB=ON \
          -DLLVM_ENABLE_ZSTD=OFF \
          -DLLVM_EXAMPLEIRTRANSFORMS_LINK_INTO_TOOLS=OFF \
          -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS=OFF \
          -DLLVM_EXTERNALIZE_DEBUGINFO=OFF \
          -DLLVM_FORCE_ENABLE_STATS=OFF \
          -DLLVM_FORCE_USE_OLD_TOOLCHAIN=OFF \
          -DLLVM_HAVE_TFLITE=OFF \
          -DLLVM_HOST_TRIPLE="$pc_type" \
          -DLLVM_INCLUDE_BENCHMARKS=ON \
          -DLLVM_INCLUDE_DOCS=OFF \
          -DLLVM_INCLUDE_EXAMPLES=ON \
          -DLLVM_INCLUDE_RUNTIMES=ON \
          -DLLVM_INCLUDE_TESTS=OFF \
          -DLLVM_INCLUDE_TOOLS=ON \
          -DLLVM_INCLUDE_UTILS=ON \
          -DLLVM_NATIVE_ARCH="$(uname -m)" \
          -DLLVM_OMIT_DAGISEL_COMMENTS=ON \
          -DLLVM_OPTIMIZED_TABLEGEN=ON \
          -DLLVM_OPTIMIZE_SANITIZED_BUILDS=ON \
          -DLLVM_TARGET_ARCH=host \
          -DLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=OFF \
          -DLLVM_TOOL_BOLT_BUILD=OFF \
          -DLLVM_TOOL_CLANG_BUILD=OFF \
          -DLLVM_TOOL_COMPILER_RT_BUILD=OFF \
          -DLLVM_TOOL_CROSS_PROJECT_TESTS_BUILD=OFF \
          -DLLVM_TOOL_DRAGONEGG_BUILD=OFF \
          -DLLVM_TOOL_FLANG_BUILD=OFF \
          -DLLVM_TOOL_LIBCXXABI_BUILD=OFF \
          -DLLVM_TOOL_LIBCXX_BUILD=OFF \
          -DLLVM_TOOL_LIBC_BUILD=OFF \
          -DLLVM_TOOL_LIBUNWIND_BUILD=ON \
          -DLLVM_TOOL_LLDB_BUILD=OFF \
          -DLLVM_TOOL_LLD_BUILD=OFF \
          -DLLVM_TOOL_MLIR_BUILD=OFF \
          -DLLVM_TOOL_OPENMP_BUILD=OFF \
          -DLLVM_TOOL_POLLY_BUILD=OFF \
          -DLLVM_TOOL_PSTL_BUILD=OFF \
          -DLLVM_UBSAN_FLAGS="-fsanitize=undefined -fno -sanitize=vptr,function -fno -sanitize -recover=all" \
          -DLLVM_UNREACHABLE_OPTIMIZE=ON \
          -DLLVM_USE_FOLDERS=ON \
          -DLLVM_USE_LINKER=gold \
          -DLLVM_USE_SYMLINKS=ON \
          -DLLVM_VERSION_PRINTER_SHOW_HOST_TARGET_INFO=ON \
          -DPY_PYGMENTS_FOUND=ON \
          -DPY_PYGMENTS_LEXERS_C_CPP_FOUND=ON \
          -DPY_YAML_FOUND=ON \
          -G Ninja -Wno-dev || fail_fn "CMake configuration failed."
    ninja || fail_fn "Ninja build failed."
    ninja install || fail_fn "Ninja install failed."
    build_done llvm "$clang_version"
}

# Additional functions omitted for brevity...

# Initialization and function calls
check_root
install_required_packages
fix_missing_x265_lib
find_highest_clang_version
build_and_install_llvm_clang "$1"
show_installed_clang_version
cleanup_build_files
display_exit_message
