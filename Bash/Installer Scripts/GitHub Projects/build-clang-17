#!/usr/bin/env bash
# shellcheck disable=SC2162,SC2317

####################################################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/GitHub%20Projects/build-clang-17
##
##  Purpose: Build LLVM Clang-17
##
##  Updated: 11.26.23
##
##  Script version: 1.2
##
####################################################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET GLOBAL VARIABLES
#

script_ver=1.12
progname="${0}"
cwd="${PWD}"/clang-17-build-script
install_prefix=/usr/local
pc_type=x86_64-linux-gnu
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo
debug=OFF # CHANGE THIS VARIABLE TO "ON" FOR HELP WITH TROUBLESHOOTING UNEXPECTED ISSUES DURING THE BUILD

#
# CREATE OUTPUT DIRECTORIES
#

if [ ! -d "${cwd}" ]; then
    mkdir -p "${cwd}"
fi

#
# SET THE CC/CXX COMPILERS & THE COMPILER OPTIMIZATION FLAGS
#

CC=clang
CXX=clang++
CFLAGS='-g -O3 -pipe -march=native'
CXXFLAGS="${CFLAGS}"
CPPFLAGS='-I/usr/local/include -I/usr/include'
LDFLAGS='-L/usr/local/lib64 -L/usr/local/lib -L/usr/lib64 -L/usr/lib -L/lib64 -L/lib -Wl,-rpath -Wl,/usr/local/lib'
export CC CXX CFLAGS CPPFLAGS CXXFLAGS LDFLAGS

#
# SET THE PATH VARIABLE
#

PATH="\
/usr/lib/ccache/bin:\
/usr/lib/ccache:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

#
# SET THE PKG_CONFIG_PATH VARIABLE
#

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/${install_dir}/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/${install_dir}/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/${install_dir}pkgconfig\
"
export PKG_CONFIG_PATH

LD_LIBRARY="\
/ust/local/lib64:\
/usr/share/texinfo/lib/libintl-perl/lib:\
/usr/share/texinfo/lib:\
/usr/share/gitk/lib:\
/usr/share/git-gui/lib:\
/usr/share/ghostscript/lib:\
/usr/local/lib64:\
/usr/local/lib/clang/17/lib:\
/usr/local/lib:\
/usr/lm32-elf/lib:\
/usr/lib64:\
/usr/lib32:\
/usr/lib/llvm15/lib:\
/usr/lib/gcc/x86_64-pc-linux-gnu/lib:\
/usr/lib/clang/16/lib:\
/usr/lib/bfd-plugins:\
/usr/lib:\
/lib64:\
/lib\
"
export LD_LIBRARY

LD_LIBRARY_PATH="\
/ust/local/lib64:\
/usr/share/texinfo/lib/libintl-perl/lib:\
/usr/share/texinfo/lib:\
/usr/share/gitk/lib:\
/usr/share/git-gui/lib:\
/usr/share/ghostscript/lib:\
/usr/local/lib64:\
/usr/local/lib/clang/17/lib:\
/usr/local/lib:\
/usr/lm32-elf/lib:\
/usr/lib64:\
/usr/lib32:\
/usr/lib/llvm15/lib:\
/usr/lib/gcc/x86_64-pc-linux-gnu/lib:\
/usr/lib/clang/16/lib:\
/usr/lib/bfd-plugins:\
/usr/lib:\
/lib64:\
/lib\
"
export LD_LIBRARY_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n%s\n\n"                                    \
        'The script has completed'                                \
        'Make sure to star this repository to show your support!' \
        "${web_repo}"
    exit 0
}

fail_fn()
{
    printf "\n\n%s\n\n%s\n\n%s\n\n"      \
        "${1}"                           \
        'To report a bug please visit: ' \
        "${web_repo}/issues"
    exit 1
}

cleanup_fn()
{
    local choice

    printf "%s\n\n%s\n%s\n\n"                    \
        'Do you want to remove the build files?' \
        '[1] Yes'                                \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "${choice}" in
        1)      sudo rm -fr "${cwd}";;
        2)      clear;;
        *)
                clear
                printf "%s\n\n" 'Error: bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

show_ver_fn()
{
    printf "%s\n\n" 'The installed clang version is:'

    if [ -f "${install_prefix}"/bin/clang-17 ]; then
        printf "%s\n" 'clang-17:'
        "${install_prefix}"/bin/clang-17 --version
        echo
    fi

    if [ -f "${install_prefix}"/bin/clang++-17 ]; then
        printf "%s\n" 'clang++-17:'
        "${install_prefix}"/bin/clang++-17 --version
        echo
    elif [ -f "${install_prefix}"/bin/clang++ ]; then
        printf "%s\n" 'clang-++:'
        "${install_prefix}"/bin/clang++ --version
        echo
    fi
}

execute()
{
    echo "$ ${*}"

    if [ "${debug}" = 'ON' ]; then
        if ! output="$("${@}")"; then
            notify-send -t 5000 "Failed to execute: ${*}" 2>/dev/null
            fail_fn "Failed to execute: ${*}"
        fi
    else
        if ! output="$("${@}" 2>&1)"; then
            notify-send -t 5000 "Failed to execute: ${*}" 2>/dev/null
            fail_fn "Failed to execute: ${*}"
        fi
    fi
}

build()
{
    printf "\n%s\n%s\n" \
        "Building ${1} - version ${2}" \
        '=========================================='

    if [ -f "${cwd}/${1}.done" ]; then
        if grep -Fx "${2}" "${cwd}/${1}.done" >/dev/null; then
            echo "${1} version ${2} already built. Remove ${cwd}/${1}.done lockfile to rebuild it."
            return 1
        fi
    fi
    return 0
}

build_done() { echo "${2}" > "${cwd}/${1}.done"; }

download()
{
    dl_path="${cwd}"
    dl_url="${1}"
    dl_file="${2:-"${1##*/}"}"

    if [[ "${dl_file}" =~ tar. ]]; then
        output_dir="${dl_file%.*}"
        output_dir="${3:-"${output_dir%.*}"}"
    else
        output_dir="${3:-"${dl_file%.*}"}"
    fi

    target_file="${dl_path}/${dl_file}"
    target_dir="${dl_path}/${output_dir}"

    if [ -f "${target_file}" ]; then
        echo "The file \"${dl_file}\" is already downloaded."
    else
        printf "%s\n\n" "Downloading \"${dl_url}\" saving as \"${dl_file}\""
        if ! wget --show-progress -U "${user_agent}" -cqO "${target_file}" "${dl_url}"; then
            printf "\n%s\n\n" "The script failed to download \"${dl_file}\" and will try again in 10 seconds..."
            sleep 10
            if ! wget --show-progress -U "${user_agent}" -cqO "${target_file}" "${dl_url}"; then
                fail_fn "The script failed to download \"${dl_file}\" twice and will now exit. Line: ${LINENO}"
            fi
        fi
        printf "\n%s\n\n" 'Download completed'
    fi

    if [ -d "${target_dir}" ]; then
        sudo rm -fr "${target_dir}"
    fi

    mkdir -p "${target_dir}"

    if [ -n "${3}" ]; then
        if ! tar -zxf "${target_file}" -C "${target_dir}" 2>/dev/null >/dev/null; then
            sudo rm "${target_file}"
            fail_fn "The script failed to extract \"${dl_file}\" so it was deleted. Please re-run the script. Line: ${LINENO}"
        fi
    else
        if ! tar -zxf "${target_file}" -C "${target_dir}" --strip-components 1 2>/dev/null >/dev/null; then
            sudo rm "${target_file}"
            fail_fn "The script failed to extract \"${dl_file}\" so it was deleted. Please re-run the script. Line: ${LINENO}"
        fi
    fi

    printf "%s\n\n" "File extracted: ${dl_file}"

    cd "${target_dir}" || fail_fn "Unable to change the working directory to: ${target_dir}. Line: ${LINENO}"
}

git_1_fn()
{
    local curl_cmd github_repo github_url

    github_repo="${1}"
    github_url="${2}"

    if curl_cmd="$(curl -A "${user_agent}" -m 10 -sSL "https://api.github.com/repos/${github_repo}/${github_url}")"; then
        g_ver="$(echo "${curl_cmd}" | jq -r '.[1].name' 2>/dev/null)"
        g_url="$(echo "${curl_cmd}" | jq -r '.[1].tarball_url' 2>/dev/null)"
        g_ver="${g_ver#llvmorg-}"
    fi
}

git_ver_fn()
{
    local t_flag v_flag v_url

    v_url="${1}"
    v_flag="${2}"

    case "${v_flag}" in
            R)      t_flag=releases;;
            T)      t_flag=tags;;
    esac

    git_1_fn "${v_url}" "${t_flag}" 2>/dev/null
}

#
# PRINT THE OPTIONS AVAILABLE WHEN MANUALLY RUNNING THE SCRIPT
#

# GET THE HIGHEST VERSION AVAILABLE ON APT FOR THE PACKAGE libstdc++
get_libstdc="$(sudo apt list 'libstdc++-*-dev' 2>/dev/null | grep -Eo '^libstdc\+\+-[0-9]{2}-dev' | sort -r | head -n1)"

pkgs=(autoconf autoconf-archive automake autopoint binutils binutils-dev bison
      build-essential ccache clang cmake curl doxygen jq libc6 libc6-dev libedit-dev
      libtool libtool-bin libxml2-dev m4 nasm ninja-build yasm zlib1g-dev wget
      ${get_libstdc})

for  pkg in ${pkgs[@]}
do
    missing_pkg="$(sudo dpkg -l | grep -o "${pkg}")"

    if [ -z "${missing_pkg}" ]; then
        missing_pkgs+=" ${pkg}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    sudo apt -y install ${missing_pkgs}
    clear
else
    printf "%s\n" 'The APT packages are already installed'
fi

#
# REFRESH THE LD LINKER LIBRARY SHARED LIBRARY FILES USING THE FILE PATHS IT SEARCHES FOR THEM IN 
#

sudo ldconfig -v

#
# BEGIN BUILDING CLANG
#

clear
box_out_banner()
{
    input_char=$(echo "${@}" | wc -c)
    line=$(for i in $(seq 0 ${input_char}); do printf '-'; done)
    tput bold
    line="$(tput setaf 3)${line}"
    space=${line//-/ }
    echo " ${line}"
    printf '|' ; echo -n "${space}" ; printf "%s\n" '|';
    printf '| ' ;tput setaf 4; echo -n "${@}"; tput setaf 3 ; printf "%s\n" ' |';
    printf '|' ; echo -n "${space}" ; printf "%s\n" '|';
    echo " ${line}"
    tput sgr 0
}
box_out_banner "Clang-17 Build Script - version ${script_ver}"

git_ver_fn 'llvm/llvm-project' 'T'
if build 'llvm' "${g_ver}"; then
    download "${g_url}" "llvm-${g_ver}.tar.gz"
    project_pkgs='clang;clang-tools-extra'
    runtime_pkgs='libcxx;libcxxabi;libunwind;compiler-rt'
    cmake -S llvm -B build                           \
          -DCMAKE_INSTALL_PREFIX="${install_prefix}" \
          -DCMAKE_BUILD_TYPE=Release                 \
          -DBUILD_SHARED_LIBS=OFF                    \
          -DBENCHMARK_DOWNLOAD_DEPENDENCIES=ON       \
          -DBENCHMARK_ENABLE_TESTING=ON              \
          -DBENCHMARK_INSTALL_DOCS=OFF               \
          -DCLANG_INCLUDE_DOCS=OFF                   \
          -DCMAKE_C_COMPILER="${CC}"                 \
          -DCMAKE_C_FLAGS="${CFLAGS}"                \
          -DCMAKE_CXX_COMPILER="${CXX}"              \
          -DCMAKE_CXX_STANDARD=20                    \
          -DLLVM_BUILD_BENCHMARKS=OFF                \
          -DLLVM_BUILD_RUNTIME=ON                    \
          -DLLVM_BUILD_RUNTIMES=ON                   \
          -DLLVM_CCACHE_BUILD=ON                     \
          -DLLVM_ENABLE_CURL=ON                      \
          -DLLVM_ENABLE_LTO=OFF                      \
          -DLLVM_ENABLE_OCAMLDOC=OFF                 \
          -DLLVM_ENABLE_PIC=ON                       \
          -DLLVM_ENABLE_PROJECTS="${project_pkgs}"   \
          -DLLVM_ENABLE_RUNTIMES="${runtime_pkgs}"   \
          -DLLVM_ENABLE_WARNINGS=OFF                 \
          -DLLVM_HOST_TRIPLE="${pc_type}"            \
          -DLLVM_INCLUDE_DOCS=OFF                    \
          -DLLVM_INCLUDE_TESTS=OFF                   \
          -DLLVM_TARGET_ARCH=HOST                    \
          -DLLVM_TOOL_CLANG_BUILD=ON                 \
          -G Ninja -Wno-dev
    echo
    ninja "-j$(nproc --all)" -C build
    echo
    sudo ninja -C build install
fi

# SHOW THE NEWLY INSTALLED MAGICK VERSION
show_ver_fn

# PROMPT THE USER TO CLEAN UP THE BUILD FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn
