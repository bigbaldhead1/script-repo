#!/usr/bin/env bash

##  GitHub Script: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/GitHub%20Projects/build-aria2
##  Purpose: Build aria2 from source code
##  Updated: 12.03.23
##  Script version: 1.8
##  Features:
##            - Static build
##            - OpenSSL backend
##            - Increased the max connections from 16 to 128
##  Added:
##         - Updated Aria2 to the latest version - 1.37.0
##         - If OpenSSL is manually installed using the build-openssl script then use its certs directory instead of the default.
##         - Build jemalloc from the latest source code
##         - RUNPATH to LDFLAGS
##  Fixed: Soft linking error

# Exit on an error and uninitialized variables
set -euo pipefail
clear

# Script and Aria2 version
script_ver="1.8"
aria2_ver="1.37.0"

# Check for non-root execution
if [ "$EUID" -eq 0 ]; then
    echo 'This script must be run without root/sudo privileges.'
    exit 1
fi

pkgs_fn() {
    local missing_pkg missing_packages pkg pkgs available_packages unavailable_packages

    # Install Required APT packages
    pkgs=(autoconf autoconf-archive autogen automake build-essential ca-certificates ccache
          curl gettext libaria2-0 libaria2-0-dev libc-ares-dev libdmalloc-dev libexpat1-dev libgmp-dev
          libintl-perl liblzma-dev libmbedtls-dev libnghttp2-dev librust-openssl-dev libsqlite3-dev
          libssh2-1-dev libssh-dev libssl-dev libticonv-dev libtool libtool-bin libuv1-dev libxml2-dev
          m4 pkg-config zlib1g-dev)

    # Initialize arrays for missing, available, and unavailable packages
    missing_packages=()
    available_packages=()
    unavailable_packages=()

    # Loop through the array to find missing packages
    for pkg in "${pkgs[@]}"
    do
        if ! dpkg-query -W -f='${Status}' "$pkg" 2>/dev/null | grep -q "ok installed"; then
            missing_packages+=("$pkg")
        fi
    done

    # Check availability of missing packages and categorize them
    for pkg in "${missing_packages[@]}"
    do
        if apt-cache show "$pkg" > /dev/null 2>&1; then
            available_packages+=("$pkg")
        else
            unavailable_packages+=("$pkg")
        fi
    done

    # Print unavailable packages
    if [ "${#unavailable_packages[@]}" -gt 0 ]; then
        echo "Unavailable packages: ${unavailable_packages[*]}"
    fi

    # Install available missing packages
    if [ "${#available_packages[@]}" -gt 0 ]; then
        echo "Installing available missing packages: ${available_packages[*]}"
        sudo apt -y install "${available_packages[@]}"
    else
        printf "%s\n\n" "No missing packages to install or all missing packages are unavailable."
    fi
}

# Determine OS
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=${NAME%% *}
    echo "Detected OS: $OS"
elif command -v lsb_release >/dev/null; then
    OS=$(lsb_release -si)
    echo "Detected OS: $OS"
else
    handle_error 'Unable to determine operating system.'
fi

# Directories and URLs
build_dir="$HOME/aria2-build"
install_dir="/usr/local"
archive_url="https://github.com/aria2/aria2/releases/download/release-$aria2_ver/aria2-$aria2_ver.tar.xz"
certs_dir="$(pkg-config --variable=libdir openssl)"

# Prepare build directory
echo "Creating build directory: $build_dir"
mkdir -p "$build_dir" && cd "$build_dir"

# Download and extract Aria2
echo "Downloading and extracting Aria2..."
curl -sL "$archive_url" | tar -xJ || handle_error "Failed to download and extract Aria2"

# Build jemalloc
printf '\n%s\n%s\n\n' 'Compiling jemalloc...' '================================'
jemalloc_ver="5.3.0"
jemalloc_url="https://github.com/jemalloc/jemalloc/releases/download/$jemalloc_ver/jemalloc-$jemalloc_ver.tar.bz2"
curl -sL "$jemalloc_url" | tar -xj || handle_error "Failed to download jemalloc"
cd "jemalloc-$jemalloc_ver"
./configure --prefix="$install_dir" || handle_error "Failed to configure jemalloc"
make -j"$(nproc)" && sudo make install || handle_error "Failed to build and install jemalloc"
cd ..

# Build gcrypt-error
printf '\n%s\n%s\n\n' 'Compiling gcrypt-error...' '================================'
gcrypt_error_ver="1.47"
gcrypt_error_url="https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-$gcrypt_error_ver.tar.bz2"
curl -sL "$gcrypt_error_url" | tar -xj || handle_error "Failed to download gcrypt-error"
cd "libgpg-error-$gcrypt_error_ver"
./configure --prefix="$install_dir" || handle_error "Failed to configure gcrypt-error"
make -j"$(nproc)" && sudo make install || handle_error "Failed to build and install gcrypt-error"
cd ..

# Compile Aria2
printf '\n%s\n%s\n\n' 'Compiling Aria2...' '================================'
cd "aria2-$aria2_ver"
sed -i 's/1, 16/1, 128/g' 'src/OptionHandlerFactory.cc'
./configure --prefix="$install_dir" --without-gnutls --with-openssl \
            --with-ca-bundle="$certs_dir/cacert.pem" \
            CFLAGS='-O3 -march=native' CXXFLAGS='-O3 -march=native' || handle_error "Failed to configure Aria2"
make -j"$(nproc)" || handle_error "Failed to build Aria2"
sudo make install || handle_error "Failed to install Aria2"

# Cleanup
printf '\n%s' 'Cleaning up...'
rm -rf "$build_dir"

printf '\n%s\n\n' "Aria2 version $aria2_ver installed successfully."
