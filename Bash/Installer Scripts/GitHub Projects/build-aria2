#!/usr/bin/env bash

###########################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/GitHub%20Projects/build-aria2
##
##  Purpose: Build aria2c with max connections changed from 16 to 128
##
##  Features: Static build, OpenSSL backend
##
##  Updated: 09.05.23
##
##  Updated: cacert.pem security file
##
##  Script version: 1.5
##
###########################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET THE VARIABLES
#

script_ver=1.5
archive_dir=aria2-1.36.0
archive_url="https://github.com/aria2/aria2/releases/download/release-1.36.0/${archive_dir}.tar.gz"
archive_ext="${archive_url//*.}"
parent_dir="${PWD}"
cwd="${parent_dir
}"/aria2-build-script
cert_dir=/usr/lib/ssl/certs
pem_file=cacert.pem
pem_in="${cwd}/${pem_file}"
pem_out="${cert_dir}/${pem_file}"
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36'
repo=https://github.com/slyfox1186/script-repo

#
# SET OPTIMIZATION AND EXTRA COMMANDS TO MODIFY THE BUILD
#

CFLAGS='-g -O2 -ffunction-sections -fdata-sections -pipe -march=native'
CPPFLAGS='-I/usr/local/include -I/usr/include'
CXXFLAGS="${CFLAGS}"
LDFLAGS="-L/usr/local/lib64 -L/usr/local/lib -L/usr/local/cuda/nvvm/lib64 -L/usr/local/cuda/targets/x86_64-linux/lib"
LDFLAGS+=' -L/usr/lib -L/usr/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -L/lib'
LIBS="$(pkg-config --libs libuv) $(pkg-config --libs libgcrypt)"

#
# PRINT THE SCRIPT BANNER
#

printf "%s\n%s\n\n" \
    "Aria2 Build Script - v${script_ver}" \
    '==============================================='

#
# SET THE SOURCE CODE COMPILERS
#

export CC=gcc CXX=g++

#
# CREATE THE OUTPUT DIRECTORY
#

if [ -d "${cwd}" ]; then
    sudo rm -fr "${cwd}"
fi
mkdir -p "${cwd}"

#
# SET THE PATH VARIABLE
#

PATH="\
/usr/lib/ccache:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

#
# SET THE PKG_CONFIG_PATH VARIABLE
#

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/x86_64-linux-gnu/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n%s\n\n" \
        'The script has completed' \
        'Make sure to star this repository to show your support!' \
        "${repo}"
    exit 0
}

fail_fn()
{
    printf "\n\n%s\n\n%s\n\n%s\n\n" \
        "${1}" \
        'Please create a support ticket so I can work on a fix.' \
        "${repo}/issues"
    exit 1
}

show_ver_fn()
{
    save_ver="$(aria2c --version | grep -Eo '[0-9\.]+$' | head -n1 2>/dev/null | xargs -I{} echo {})"
    clear
    printf "%s\n\n" "The updated Aria2c version is: ${save_ver}"
    sleep 3
}

cleanup_fn()
{
    local choice

    unset archive_dir archive_ext archive_name archive_url CC CXX i missing_pkg missing_pkgs pc_type pem_out pkgs script_ver

    printf "%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "${choice}" in
        1)
                sudo rm -fr "${cwd}"
                cd "${parent_dir}" || exit 1
                if [ -f "${pem_file}" ]; then
                    sudo rm "${pem_file}"
                fi
                if [ -f /usr/bin/aria2c ]; then
                    sudo apt -y remove aria2
                    sudo apt -y autoremove
                    clear
                fi
                ;;
        2)
                if [ -f /usr/bin/aria2c ]; then
                    sudo apt -y remove aria2
                    sudo apt -y autoremove
                    clear
                fi
                ;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

#
# INSTALL THE LATEST CA CERTS FROM CURL'S OFFICIAL WEBSITE
#

curl -A "${user_agent}" -Lso "${pem_in}" "https://curl.se/ca/${pem_file}"
if ! sudo mv "${pem_in}" "${pem_out}"; then
    fail_fn 'Failed to move cacert.pem'
fi

#
# GET THE PC TYPE
#

curl -A "${user_agent}" -Lso "${cwd}/config.guess" 'https://raw.githubusercontent.com/gcc-mirror/gcc/master/config.guess'
chmod +x "${cwd}/config.guess"
pc_type="$(source "${cwd}/config.guess")"

#
# INSTALL THE REQUIRED APT PACKAGES
#

pkgs=(autoconf autogen automake build-essential ca-certificates ccache clang curl libaria2-0 libaria2-0-dev
      libc-ares-dev libdmalloc-dev libgcrypt20-dev libgmp-dev libgnutls28-dev libgpg-error-dev libjemalloc-dev
      libmbedtls-dev libnghttp2-dev librust-openssl-dev libsqlite3-dev libssh2-1-dev libssh-dev libssl-dev
      libuv1-dev libxml2-dev pkg-config zlib1g-dev)

for i in ${pkgs[@]}
do
    missing_pkg="$(sudo dpkg -l | grep -o "${i}")"

    if [ -z "${missing_pkg}" ]; then
        missing_pkgs+=" ${i}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    sudo apt -y install ${missing_pkgs}
    sudo apt -y autoremove
    clear
fi

#
# DOWNLOAD THE ARCHIVE FILE
#

archive_name="${archive_dir}.tar.${archive_ext}"

if [ ! -f "${cwd}/${archive_name}" ]; then
    curl -A "${user_agent}" -Lso "${cwd}/${archive_name}" "${archive_url}"
fi

#
# CREATE THE OUTPUT DIRECTORY
#

if [ -d "${cwd}/${archive_dir}" ]; then
    sudo rm -fr "${cwd}/${archive_dir}"
fi
mkdir -p "${cwd}/${archive_dir}/build"

#
# EXTRACT THE ARCHIVE FILE
#

if ! tar -zxf "${cwd}/${archive_name}" -C "${cwd}/${archive_dir}" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: ${cwd}/${archive_name}"
    exit 1
fi

#
# REMOVE THE APT VERSION OF ARIA2 IF FOUND
#

if [ -f /usr/bin/aria2c ]; then
    sudo apt -y remove aria2
    sudo apt -y autoremove
    clear
fi

#
# BUILD ARIA2 FROM SOURCE CODE
#

cd "${cwd}/${archive_dir}" || exit 1
# INCREASE THE MAX NUMBER OF CONNECTIONS FROM 16 TO 128
sed -i 's/1, 16/1, 128/g' 'src/OptionHandlerFactory.cc'
cd build || exit 1
../configure --prefix=/usr/local                            \
             --{build,host,target}="${pc_type}"             \
             --disable-nls                                  \
             --disable-shared                               \
             --disable-werror                               \
             --enable-libaria2                              \
             --enable-static                                \
             --with-ca-bundle="${pem_out}"                  \
             --with-libgcrypt=/usr                          \
             --with-libiconv-prefix=/usr                    \
             --with-libintl-prefix=/usr                     \
             --with-libuv                                   \
             --with-jemalloc                                \
             --with-openssl                                 \
             --with-pic                                     \
             --without-gnutls                               \
             ARIA2_STATIC=yes                               \
             CFLAGS="${CFLAGS}"                             \
             CPPFLAGS="${CPPFLAGS}"                         \
             CXXFLAGS="${CXXFLAGS}"                         \
             EXPAT_LIBS="$(pkg-config --libs expat)"        \
             LDFLAGS="${LDFLAGS}"                           \
             LIBS="${LIBS}"                                 \
             PKG_CONFIG="$(type -P pkg-config)"             \
             PKG_CONFIG_PATH="${PKG_CONFIG_PATH}"

make "-j$(nproc --all)"

if ! sudo make install; then
    printf "\n%s\n\n" 'Failed to install aria2c.'
    exit 1
fi

#
# CREATE SOFT LINKS
#

if [ -f "/usr/local/bin/${pc_type}-aria2c" ]; then
    sudo ln -sf "/usr/local/bin/${pc_type}-aria2c" '/usr/local/bin/aria2c'
    sudo chmod 755 '/usr/local/bin/aria2c'
else
    fail_fn 'Failed to create a soft link to: /usr/local/bin/aria2c'
fi

# SHOW THE NEW VERSION
show_ver_fn

# PROMPT USER TO CLEAN UP FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn
