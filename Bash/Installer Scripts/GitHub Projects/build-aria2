#!/usr/bin/env bash

####################################################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/GitHub%20Projects/build-aria2
##
##  Purpose: Build aria2 from source code
##
##  Updated: 11.21.23
##
##  Script version: 1.7
##
##  Features:
##            - Static build
##            - OpenSSL backend
##            - Increased the max connections from 16 >> 128
##
##  Added:
##         - Updated aria2 to the latest version - 1.37.0
##         - If openssl is manually installed using the build-openssl script then use its certs directory instead of the default.
##         - Build jemalloc from the latest source code
##
##  Fixed: Soft linking error
##
####################################################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET THE VARIABLES
#

script_ver='1.7'
archive_dir='aria2-1.37.0'
archive_url="https://github.com/aria2/aria2/releases/download/release-1.37.0/${archive_dir}.tar.gz"
archive_ext="${archive_url//*.}"
archive_name="${archive_dir}.tar.${archive_ext}"
cwd="${PWD}"/aria2-build-script
install_dir='/usr/local'
if [ -d '/usr/local/ssl/certs' ]; then
    cert_dir='/usr/local/ssl/certs'
else
    cert_dir='/etc/ssl/certs'
fi
pem_file='cacert.pem'
pem_in="${cwd}/${pem_file}"
pem_out="${cert_dir}/${pem_file}"
user_agent='Mozilla/5.0 (X11; Linux x86_64) Applpc_typeeWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
web_repo='https://github.com/slyfox1186/script-repo'

#
# CREATE THE OUTPUT DIRECTORY
#

if [ -d "${cwd}" ]; then
    sudo rm -fr "${cwd}"
fi
mkdir -p "${cwd}"

#
# PRINT THE SCRIPT BANNER
#

printf "%s\n%s\n\n"                              \
    "Aria2 Build Script - version ${script_ver}" \
    '==============================================='
sleep 2

#
# SET THE SOURCE CODE COMPILERS
#

export CC='clang' CXX='clang++'

#
# SET COMPILER OPTIMIZATION FLAGS
#

CFLAGS='-g -O3 -pipe -march=native'
CXXFLAGS="${CFLAGS}"
CPPFLAGS="-I${install_dir}/include -I${install_dir}/include/x86_64-linux-gnu -I/usr/include"
LDFLAGS="-L${install_dir}/lib64 -L${install_dir}/lib -L${install_dir}/lib/x86_64-linux-gnu"
LDFLAGS+=' -L/usr/lib/x86_64-linux-gnu -L/usr/lib64 -L/usr/lib -L/lib64 -L/lib'
export CFLAGS CPPFLAGS CXXFLAGS LDFLAGS

#
# ADD EXTRA LIBRARYS TO THE ARIA2 CONFIGURE SCRIPT
#

explibs="$(pkg-config --libs expat)"
extralibs="$(pkg-config --libs libuv) $(pkg-config --libs libgcrypt)"
jmflags="-I${install_dir}/include/jemalloc"
jmlibs="-L${install_dir}/lib -ljemalloc"

#
# SET THE PATH VARIABLE
#

PATH="\
/usr/lib/ccache:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

#
# SET THE PKG_CONFIG_PATH VARIABLE
#

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/open-coarrays/openmpi/pkgconfig:\
/usr/lib/x86_64-linux-gnu/openmpi/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/x86_64-linux-gnu/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "%s\n\n%s\n%s\n\n"                                     \
        'The script has completed'                                \
        'Make sure to star this repository to show your support!' \
        "${web_repo}"
    exit 0
}

fail_fn()
{
    printf "\n\n%s\n\n%s\n\n%s\n\n"                              \
        "${1}"                                                   \
        'Please create a support ticket so I can work on a fix.' \
        "${web_repo}/issues"
    exit 1
}

show_ver_fn()
{
    local save_ver
    clear
    save_ver="$(aria2c --version | grep -Eo '[0-9\.]+$' | head -n1 2>/dev/null | xargs -I{} echo {})"
    printf "%s\n\n" "The installed aria2 version is: ${save_ver}"
    sleep 2
}

cleanup_fn()
{
    local choice

    printf "%s\n%s\n%s\n\n%s\n%s\n\n"                  \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes'                                      \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice
    clear

    case "${choice}" in
        1)      sudo rm -fr "${cwd}";;
        2)      clear;;
        *)
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

remove_apt_ver_fn()
{
    if [ -f '/usr/bin/aria2c' ]; then
        sudo apt -y remove aria2
        sudo apt -y autoremove
    fi
    clear
}

#
# INSTALL THE LATEST CA CERTS FROM CURL'S OFFICIAL WEBSITE
#

curl -A "${user_agent}" -Lso "${pem_in}" "https://curl.se/ca/${pem_file}"
if ! sudo mv "${pem_in}" "${pem_out}"; then
    fail_fn "Failed to move cacert.pem. Line: ${LINENO}"
fi

#
# INSTALL THE REQUIRED APT PACKAGES
#

pkgs=(autoconf autogen automake build-essential ca-certificates ccache clang curl
      libaria2-0 libaria2-0-dev libc-ares-dev libdmalloc-dev libexpat1-dev libgcrypt20-dev
      libgmp-dev libgnutls28-dev libgpg-error-dev liblzma-dev libmbedtls-dev libnghttp2-dev
      librust-openssl-dev libsqlite3-dev libssh2-1-dev libssh-dev libssl-dev libuv1-dev
      libxml2-dev pkg-config zlib1g-dev)

for i in ${pkgs[@]}
do
    missing_pkg="$(sudo dpkg -l | grep -o "${i}")"

    if [ -z "${missing_pkg}" ]; then
        missing_pkgs+=" ${i}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    sudo apt -y install ${missing_pkgs}
    sudo apt -y autoremove
fi
clear

#
# BUILD JEMALLOC FROM SOURCE CODE
#

printf "%s\n%s\n\n"                  \
    'Build Jemalloc - version 5.3.0' \
    '==============================================='
sleep 1

#
# CREATE JEMALLOC OUTPUT DIRECTORY
#

mkdir -p "${cwd}/jemalloc-5.3.0/build"

#
# DOWNLOAD JEMALLOC SOURCE CODE
#

if [ ! -f "${cwd}/jemalloc-5.3.0.tar.gz" ]; then
    if ! curl -A "${user_agent}" -m 10 -Lso "${cwd}/jemalloc-5.3.0.tar.gz" 'https://github.com/jemalloc/jemalloc/archive/refs/tags/5.3.0.tar.gz'; then
        fail_fn "Failed to download the file: ${cwd}/jemalloc-5.3.0.tar.gz. Line: ${LINENO}"
    fi
fi

#
# EXTRACT JEMALLOC INTO OUTPUT DIRECTORY
#

tar -zxf "${cwd}/jemalloc-5.3.0.tar.gz" -C "${cwd}/jemalloc-5.3.0" --strip-components 1

#
# CD INTO OUTPUT DIRECTORY AND CONFIGURE JEMALLOC
#

cd "${cwd}/jemalloc-5.3.0" || exit 1
extracmds1=('--disable-'{debug,doc,fill,log,shared,prof,stats})
extracmds2=('--enable-'{autogen,static,xmalloc})
autoreconf -fi
cd build || exit 1
../configure --prefix='/usr/local' \
             "${extracmds1[@]}"    \
             "${extracmds2[@]}"

# MAKE JEMALLOC
if ! make "-j$(nproc --all)"; then
    fail_fn "Failed to execute the jemalloc command: make -j$(nproc --all). Line: ${LINENO}"
    exit 1
fi

# INSTALL JEMALLOC
if ! sudo make install; then
    fail_fn "Failed to execute the jemalloc command: sudo make install. Line: ${LINENO}"
    exit 1
fi

#
# CREATE THE ARIA2 OUTPUT DIRECTORY
#

mkdir -p "${cwd}/${archive_dir}/build"

#
# DOWNLOAD THE ARIA2 SOURCE CODE
#

if [ ! -f "${cwd}/${archive_name}" ]; then
    curl -A "${user_agent}" -m 10 -Lso "${cwd}/${archive_name}" "${archive_url}"
fi

#
# EXTRACT THE ARIA2 SOURCE CODE INTO THE OUTPUT DIRECTORY
#

if ! tar -xf "${cwd}/${archive_name}" -C "${cwd}/${archive_dir}" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: ${cwd}/${archive_name}"
    exit 1
fi

#
# BUILD ARIA2 FROM SOURCE CODE
#

printf "\n%s\n%s\n\n"              \
    "Build Aria2 - version 1.36.0" \
    '==============================================='
sleep 1

cd "${cwd}/${archive_dir}" || exit 1
# INCREASE THE MAX NUMBER OF CONNECTIONS FROM 16 TO 128
sed -i 's/1, 16/1, 128/g' 'src/OptionHandlerFactory.cc'
cd build || exit 1
../configure --prefix="${install_dir}"     \
             --disable-nls                 \
             --disable-shared              \
             --disable-werror              \
             --enable-libaria2             \
             --enable-static               \
             --with-ca-bundle="${pem_out}" \
             --with-libgcrypt='/usr'       \
             --with-libiconv-prefix='/usr' \
             --with-libintl-prefix='/usr'  \
             --with-libuv                  \
             --with-jemalloc               \
             --with-openssl                \
             --without-gnutls              \
             ARIA2_STATIC='yes'            \
             EXPAT_LIBS="${explibs}"       \
             JEMALLOC_CFLAGS="${jmflags}"  \
             JEMALLOC_LIBS="${jmlibs}"     \
             LIBS="${extralibs}"

if ! make "-j$(nproc --all)"; then
    fail_fn "Failed to execute the aria2 command: make -j$(nproc --all). Line: ${LINENO}"
    exit 1
fi

if ! sudo make install; then
    fail_fn "Failed to execute the aria2 command: sudo make install. Line: ${LINENO}"
    exit 1
fi

# REMOVE ANY APT INSTALLED VERSION OF ARIA2
remove_apt_ver_fn

# SHOW THE NEW VERSION
show_ver_fn

# PROMPT USER TO CLEAN UP FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn
