#!/usr/bin/env bash

set -euo pipefail

##  GitHub Script: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/GitHub%20Projects/build-aria2
##  Purpose: Build aria2 from source code
##  Updated: 01.30.24
##  Script version: 1.9
##  Features:
##            - Static build
##            - OpenSSL backend
##            - Increased the max connections from 16 to 128
##  Added:
##         - Updated Aria2 to the latest version - 1.37.0
##         - If OpenSSL is manually installed using the build-openssl script then use its certs directory instead of the default.
##         - Build jemalloc from the latest source code
##         - RUNPATH to LDFLAGS
##  Fixed: Soft linking error

# Ensure the script is run with superuser privileges
if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root or with sudo."
    exit 1
fi

# Script information
script_ver="1.9"
echo "GitHub Script for building aria2 from source. Version: $script_ver"

# Define color codes
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Logging function for standardized messages
log() {
    echo -e "${GREEN}[LOG]${NC} $(date +'%Y-%m-%d %H:%M:%S') - $*"
}

# Error handling function
handle_error() {
    echo -e "${RED}[ERROR]${NC} $(date +'%Y-%m-%d %H:%M:%S') - $*"
    exit 1
}

# Install required packages
install_packages() {
    local pkgs=(
        autoconf autoconf-archive autogen automake build-essential ca-certificates
        ccache curl libssl-dev libtool libtool-bin m4 pkg-config zlib1g-dev
    )
    log "Attempting to install required packages..."
    sudo apt install -y "${pkgs[@]}"
    
    for pkg in "${pkgs[@]}"; do
        if ! dpkg-query -W -f='${Status}' "$pkg" 2>/dev/null | grep -q "ok installed"; then
            handle_error "Failed to install: $pkg"
        fi
    done
    
    log "Installation of required packages completed."
}

# Retrieve the latest release version of a GitHub repository
github_latest_release_version() {
    github_version=$(
                      curl -sLH "Content-Type: text/plain" "https://gitver.optimizethis.net" |
                      bash -s "$1"
                  )
    echo "$github_version"
}

libgpg_latest_release_version() {
    local url="$1"
    local latest_version=$(
                            curl -s "$url" |
                            grep -Eo 'href="libgpg-error-[0-9]+\.[0-9]+\.tar\.bz2"' |
                            head -n1 |
                            grep -Eo '[0-9]+\.[0-9]+'
                        )

    if [[ -z "$latest_version" ]]; then
        echo "Failed to find the latest version of libgpg-error."
        exit 1
    else
        echo "$latest_version"
    fi
}

# Prepare the build environment
prepare_build_environment() {
    build_dir="$PWD/aria2-build"
    log "Creating build directory: $build_dir"
    mkdir -p "$build_dir"
    cd "$build_dir" || handle_error "Failed to create or navigate to build directory."
}

# Build and install jemalloc
build_jemalloc() {
    log "Compiling jemalloc..."
    local jemalloc_version=$(github_latest_release_version "https://github.com/jemalloc/jemalloc.git")
    local jemalloc_url="https://github.com/jemalloc/jemalloc/releases/download/$jemalloc_version/jemalloc-$jemalloc_version.tar.bz2"
    curl -Ls "$jemalloc_url" | tar -xj
    cd "jemalloc-$jemalloc_version"
    ./configure --prefix=/usr/local
    make "-j$(nproc)" && sudo make install
    cd ../
}

# Build and install libgpg-error
build_libgpg_error() {
    log "Compiling libgpg-error..."
    local libgpg_error_version=$(libgpg_latest_release_version "https://gnupg.org/ftp/gcrypt/libgpg-error/")
    local libgpg_error_url="https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-$libgpg_error_version.tar.bz2"
    curl -Ls "$libgpg_error_url" | tar -xj
    cd "libgpg-error-${libgpg_error_version}"
    ./configure --prefix=/usr/local
    make "-j$(nproc)" && sudo make install
    cd ../
}

# Compile and install Aria2
compile_aria2() {
    log "Compiling Aria2..."
    local aria2_version=$(github_latest_release_version "https://github.com/aria2/aria2.git")
    local aria2_url="https://github.com/aria2/aria2/releases/download/release-$aria2_version/aria2-$aria2_version.tar.xz"
    curl -Ls "$aria2_url" | tar -xJ
    cd "aria2-$aria2_version"
    sed -i "s/1, 16/1, 128/g" "src/OptionHandlerFactory.cc"
    ./configure --prefix=/usr/local --without-gnutls --with-openssl --with-ca-bundle=/etc/ssl/certs/ca-certificates.crt
    make "-j$(nproc)"
    sudo make install
    cd ../
}

# Cleanup the build environment
cleanup() {
    log "Cleaning up..."
    rm -fr "$build_dir"
    log "Cleanup completed."
}

main() {
    log "Starting aria2 build process..."
    install_packages
    prepare_build_environment
    build_jemalloc
    build_libgpg_error
    compile_aria2
    cleanup
    log "Aria2 build process completed successfully."
}

main "$@"
