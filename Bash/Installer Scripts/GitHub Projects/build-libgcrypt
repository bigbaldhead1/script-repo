#!/usr/bin/env bash
# shellcheck disable=SC2016,SC2034,SC2046,SC2066,SC2068,SC2086,SC2162,SC2317

########################################################################
##
##  Install libgcrypt LTS + libgcrypt-error
##
##  Supported OS:
##  - Debian
##  - Ubuntu
##
##  Updated: 10.14.23
##
##  Script version: 1.0
##
########################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET THE VARIABLES
#

script_ver=1.0
install_prefix=/usr/local
cwd="$PWD"/gcrypt-build-script
packages="$cwd"/packages
workspace="$cwd"/workspace
pc_type=x86_64-linux-gnu
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo
debug=OFF

#
# CREATE OUTPUT DIRECTORIES
#

mkdir -p "$packages" "$workspace"

#
# GET CPU CORE COUNT FOR PARALLEL PROCESSING
#

if [ -f /proc/cpuinfo ]; then
    cpu_threads="$(grep --count ^processor /proc/cpuinfo)"
else
    cpu_threads="$(nproc --all)"
fi

#
# SET THE C & C++ COMPILERS
#

export CC=gcc CXX=g++

#
# SET COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O3 -pipe -march=native'
CPPFLAGS="-I$workspace/include -I/usr/local/include -I/usr/include"
LDFLAGS="-L$workspace/lib64 -L$workspace/lib -L$workspace/lib/x86_64-linux-gnu -L/usr/local/lib64"
LDFLAGS+=' -L/usr/local/lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib64 -L/usr/lib -L/lib64 -L/lib'
export CPPFLAGS LDFLAGS

#
# PRINT BANNER
#

printf "%s\n%s\n%s\n" \
    "libgcrypt build script - v${script_ver}" \
    '=========================================' \
    "This script will utilize (${cpu_threads}) CPU threads for parallel processing to accelerate the build process."

#
# CREATE GLOBAL VARIABLES
#

PATH="\
/usr/lib/ccache:\
${HOME}/perl5/bin:\
${HOME}/.cargo/bin:\
${HOME}/.local/bin:\
/usr/local/sbin:\
/usr/local/cuda/bin:\
/usr/local/x86_64-linux-gnu/bin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/games:\
/usr/games:\
/snap/bin\
"
export PATH

PKG_CONFIG_PATH="\
$workspace/usr/lib/pkgconfig:\
$workspace/lib64/pkgconfig:\
$workspace/lib/pkgconfig:\
$workspace/lib/x86_64-linux-gnu/pkgconfig:\
$workspace/share/pkgconfig:\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/open-coarrays/openmpi/pkgconfig:\
/usr/lib/x86_64-linux-gnu/openmpi/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/x86_64-linux-gnu/pkgconfig\
"
export PKG_CONFIG_PATH

#
# DEFINE FUNCTIONS
#

fail_fn()
{
    printf "\n%s\n%s\n%s\n\n" \
        "$1" \
        'You can enable the script'\''s debugging feature by changing the variable "debug" to "ON"' \
        "To report a bug visit: $web_repo/issues"
    exit 1
}

exit_fn()
{
    printf "\n%s\n\n%s\n\n" \
        'Make sure to star this repository to show your support!' \
        "$web_repo"
    exit 0
}

cleanup_fn()
{
    local choice
 
    printf "\n%s\n\n%s\n%s\n\n" \
        'Do you want to cleanup the build files?' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice
    clear

    case "${choice}" in
        1)      sudo rm -fr "$cwd";;
        2)      clear;;
        *)
                unset choice
                cleanup_fn
                ;;
    esac
}

#
# SCRAPE GITHUB WEBSITE FOR THE LATEST REPO VERSION
#

git_1_fn()
{
    local curl_cmd github_repo github_url

    github_repo="$1"
    github_url="$2"

    if curl_cmd="$(curl -A "$user_agent" -m 10 -sSL "https://api.github.com/repos/${github_repo}/${github_url}")"; then
        g_ver="$(echo "$curl_cmd" | jq -r '.[0].name' 2>/dev/null)"
        g_url="$(echo "$curl_cmd" | jq -r '.[0].tarball_url' 2>/dev/null)"
        g_ver="${g_ver#cares-}"
        g_ver="${g_ver#aria2 }"
        g_ver="${g_ver#nghttp2 v}"
        g_ver="${g_ver#nghttp3 v}"
        g_ver="${g_ver#OpenSSL }"
        g_ver="${g_ver#release-}"
        g_ver="${g_ver#v}"
    fi

}

git_ver_fn()
{
    local v_flag v_url v_tag url_tag t_url

    v_url="$1"
    v_tag="$2"

    if [ -n "$3" ]; then
        v_flag="$3"
        case "${v_flag}" in
            T)      t_url=tags;;
            R)      t_url=releases;;
            *)      fail_fn 'Failed to pass "tags" and "releases" to the command: curl_cmd.';;
        esac
    fi

    git_1_fn "${v_url}" "${t_url}" 2>/dev/null
}

execute()
{
    echo "$ ${*}"

    if [ "${debug}" = 'ON' ]; then
        if ! output=$("$@"); then
            notify-send -t 5000 "Failed to execute: ${*}" 2>/dev/null
            fail_fn "Failed to execute: ${*}"
        fi
    else
        if ! output=$("$@" 2>&1); then
            notify-send -t 5000 "Failed to execute: ${*}" 2>/dev/null
            fail_fn "Failed to execute: ${*}"
        fi
    fi
}

download()
{
    dl_path="$packages"
    dl_url="$1"
    dl_file="${2:-"${1##*/}"}"

    if [[ "$dl_file" =~ tar. ]]; then
        output_dir="${dl_file%.*}"
        output_dir="${3:-"${output_dir%.*}"}"
    else
        output_dir="${3:-"${dl_file%.*}"}"
    fi

    target_file="$dl_path/$dl_file"
    target_dir="$dl_path/$output_dir"

    if [ -f "${target_file}" ]; then
        echo "The file \"$dl_file\" is already downloaded."
    else
        echo "Downloading \"${dl_url}\" saving as \"$dl_file\""
        if ! wget -U "$user_agent" -cqO "${target_file}" "${dl_url}"; then
            printf "\n%s\n\n" "The script failed to download \"$dl_file\" and will try again in 10 seconds..."
            sleep 10
            if ! wget -U "$user_agent" -cqO "${target_file}" "${dl_url}"; then
                fail_fn "The script failed to download \"$dl_file\" twice and will now exit. Line: ${LINENO}"
            fi
        fi
        echo 'Download Completed'
    fi

    if [ -d "$target_dir" ]; then
        sudo rm -fr "$target_dir"
    fi
    mkdir -p "$target_dir"

    if [ -n "$3" ]; then
        if ! tar -xf "${target_file}" -C "$target_dir" 2>/dev/null >/dev/null; then
            sudo rm "${target_file}"
            fail_fn "The script failed to extract \"$dl_file\" so it was deleted. Please re-run the script. Line: ${LINENO}"
        fi
    else
        if ! tar -xf "${target_file}" -C "$target_dir" --strip-components 1 2>/dev/null >/dev/null; then
            sudo rm "${target_file}"
            fail_fn "The script failed to extract \"$dl_file\" so it was deleted. Please re-run the script. Line: ${LINENO}"
        fi
    fi

    printf "%s\n\n" "File extracted: $dl_file"

    cd "$target_dir" || fail_fn "Unable to change the working directory to: $target_dir. Line: ${LINENO}"
}

build()
{
    printf "\n%s\n%s\n" \
        "building $1 - version $2" \
        '===================================='

    if [ -f "$packages/$1.done" ]; then
        if grep -Fx "$2" "$packages/$1.done" > /dev/null; then
            echo "$1 version $2 already built. Remove $packages/$1.done lockfile to rebuild it."
            return 1
        else
            echo "$1 is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove $packages/$1.done lockfile."
            return 1
        fi
    fi

    return 0
}

build_done()
{
    echo "$2" > "$packages/$1.done"
}

installed()
{
    return $(dpkg-query -W -f '${Status}\n' "$1" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}')
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(autoconf autoconf-archive autogen automake autotools-dev
      build-essential ccache curl libtool libtool-bin m4 pkg-config)

for pkg in ${pkgs[@]}
do
    if ! installed "${pkg}"; then
        missing_pkgs+=" ${pkg}"
    fi
done

printf "\n%s\n%s\n" \
    'Installing required apt packages' \
    '================================================'

if [ -n "${missing_pkgs}" ]; then
    sudo apt -y install ${missing_pkgs}
    sudo apt -y autoremove
    printf "%s\n" 'The required APT packages were installed.'
else
    printf "%s\n" 'The required APT packages are already installed.'
fi

#
# BUILD LIBRARIES FROM SOURCE
#

if build 'libgpg-error' '1.47'; then
    download 'https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.47.tar.bz2' 'libgpg-error-1.47.tar.bz2'
    execute ./autogen.sh
    execute ./configure --prefix="$install_prefix" \
                        --{build,host}="${pc_type}"  \
                        --disable-doc                \
                        --disable-nls                \
                        --disable-tests              \
                        --disable-werror             \
                        --enable-maintainer-mode     \
                        --enable-static              \
                        --enable-threads=posix       \
                        --with-libiconv-prefix=/usr  \
                        --with-libintl-prefix=/usr   \
                        --with-pic
    execute make "-j${cpu_threads}"
    execute sudo make install
    execute sudo cp -f 'src/gpg-error-config' "$install_prefix"/bin
    build_done 'libgpg-error' '1.47'
fi

if build 'libgcrypt' '1.8.10-LTS'; then
    download 'https://gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.8.10.tar.bz2' 'libgcrypt-1.8.10-LTS.tar.bz2'
    execute ./autogen.sh
    ./configure --prefix="$install_prefix"                   \
                --{build,host}="${pc_type}"                    \
                --enable-static                                \
                --with-libgpg-error-prefix="$install_prefix" \
                --with-pic
    execute make "-j${cpu_threads}"
    execute sudo make install
    build_done 'libgcrypt' '1.8.10-LTS'
fi

# LDCONFIG MUST BE RUN NEXT IN ORDER TO UPDATE FILE CHANGES OR THE VERSION COMMANDS MIGHT NOT WORK
sudo ldconfig 2>/dev/null

# CLEANUP LEFTOVER FILES
cleanup_fn

# DISPLAY EXIT MESSAGE
exit_fn
