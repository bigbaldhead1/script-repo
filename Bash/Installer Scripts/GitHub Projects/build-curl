#!/usr/bin/env bash

#################################################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/edit/main/util-linux/Installer%20Scripts/GNU%20Software/build-curl
##
##  Purpose: Build cURL
##
##  Updated: 12.02.23
##
##  Script version: 1.1
##
#################################################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET THE VARIABLES
#

script_ver=1.1
curl_ver=8.4.0
archive_dir=${curl_ver}
archive_dir1=${curl_ver//./_}
archive_url=https://github.com/curl/curl/releases/download/curl-${archive_dir1}/curl-${archive_dir}.tar.xz
archive_ext="${archive_url//*.}"
archive_name="${archive_dir}.tar.${archive_ext}"
cwd="${PWD}"/curl-build-script
install_dir=/usr/local
pem_file=cacert.pem
certs_dir='/etc/ssl/certs'
pem_out="${certs_dir}/${pem_file}"
pc_type=x86_64-linux-gnu
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
web_repo=https://github.com/slyfox1186/script-repo

printf "%s\n%s\n\n"                      \
    "cURL Build Script - v${script_ver}" \
    '==============================================='
sleep 2

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "${cwd}" ]; then
    sudo rm -fr "${cwd}"
fi
mkdir -p "${cwd}"

#
# SET THE C/CXX COMPILERS & SET THE COMPILER OPTIMIZATION FLAGS
#

CC=gcc
CXX=g++
CFLAGS='-g -O3 -pipe -march=native'
CXXFLAGS="${CFLAGS}"
CPPFLAGS='-I/usr/local/include -I/usr/include/libxml2 -I/usr/include'
export CC CXX CFLAGS CPPFLAGS CXXFLAGSf

#
# SET THE PATH VARIABLE
#

export PATH="/usr/lib/ccache:${PATH}"

#
# SET THE PKG_CONFIG_PATH VARIABLE
#

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/x86_64-linux-gnu/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n\n"                                       \
        'Make sure to star this repository to show your support!' \
        "${web_repo}"
    exit 0
}

fail_fn()
{
    printf "\n%s\n\n%s\n\n" \
        "${1}"              \
        "To report a bug create an issue at: ${web_repo}/issues"
    exit 1
}

cleanup_fn()
{
    local choice

    printf "%s\n%s\n%s\n\n%s\n%s\n\n"                  \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes'                                      \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice
    clear

    case "${choice}" in
        1)      sudo rm -fr "${cwd}";;
        2)      return 0;;
        *)
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

#
# INSTALL REQUIRED APT PACKAGES
#

libgcc_ver="$(sudo apt list libgcc-* 2>/dev/null | grep -Eo 'libgcc-[0-9]*-dev' | uniq | head -n1)"
libgtk_ver="$(sudo apt list libgtk-* 2>/dev/null | grep -Eo 'libgtk-[0-9]+-doc' | head -n1)"

pkgs=(apt-transport-https apt-utils autoconf autoconf-archive autogen automake autopoint autotools-dev
      build-essential bzip2 ca-certificates ccache clang cmake curl gfortran git google-perftools graphviz
      jq lcov libaria2-0 libaria2-0-dev libc-ares-dev libcppunit-dev libcunit1-dev libcurl4 libcurl4-openssl-dev
      libdmalloc-dev libec-dev libedit-dev libev-dev libevent-dev libexiv2-27 libexpat1-dev "${libgcc_ver}"
      libgcrypt20-dev libgexiv2-2 libgimp2.0 libgmp3-dev libgpg-error-dev "${libgtk_ver}" libgpgme-dev libicu-dev
      libjemalloc-dev libkrb5-3 libldap2-dev libldap-dev liblttng-ust-dev liblzma-dev libmbedtls-dev libnghttp2-dev
      libntlm0-dev libparted-dev libpng-dev libpsl-dev librtmp-dev librust-bzip2-dev librust-openssl-dev libsqlite3-dev
      libssh2-1-dev libssh-dev libssl-dev libtinfo5 libticonv-dev libtinfo-dev libtool libtool-bin libunistring-dev
      libunwind8 libuv1-dev libxml2-dev libzstd-dev lzip m4 nettle-dev default-jdk-headless openssh-server pkg-config
      python3-dev python3-numpy python3-packaging python3-pip python3-pytest python3-setuptools python3-wheel re2c rsync
      unzip valgrind zip zlib1g-dev)

for pkg in ${pkgs[@]}
do
    missing_pkg="$(sudo dpkg -l | grep -o "${pkg}")"

    if [ -z "${missing_pkg}" ]; then
        missing_pkgs+=" ${pkg}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    sudo apt -y install ${missing_pkgs}
    sudo apt -y autoremove
    clear
fi

#
# INSTALL CA CERTS FROM CURL'S OFFICIAL WEBSITE
#

if [ ! -f "${pem_out}" ]; then
    printf "%s\n%s\n\n" \
        'Download the latest security certificate' \
        '================================================'
    curl -A "${user_agent}" -Lso "${cwd}/${pem_file}" "https://curl.se/ca/${pem_file}"
    sudo cp -f "${cwd}/${pem_file}" "${pem_out}"
fi

#
# CREATE OUTPUT DIRECTORY CURL
#

if [ -d "${cwd}/${archive_dir}" ]; then
    sudo rm -fr "${cwd}/${archive_dir}"
fi
mkdir -p "${cwd}/${archive_dir}/build"

#
# DOWNLOAD THE ARCHIVE FILE CURL
#

if [ ! -f "${cwd}/${archive_name}" ]; then
    curl -A "${user_agent}" -Lso "${cwd}/${archive_name}" "${archive_url}"
fi

#
# EXTRACT THE ARCHIVE FILE CURL
#

if ! tar -xf "${cwd}/${archive_name}" -C "${cwd}/${archive_dir}" --strip-components 1; then
    fail_fn "Failed to extract: ${cwd}/${archive_name}"
fi

# UPDATE THE SYSTEM SECURITY CERTIFICATES BEFORE INSTALLING CURL
if type -P 'update-ca-certificates' &>/dev/null; then
    sudo update-ca-certificates
fi

#
# DETERMINE IF HTTP3 SUPPORT IS ENABLED
#

cd "${cwd}/${archive_dir}" || exit 1
dopts=('--disable-'{get-easy-options,shared,verbose,versioned-symbols})
eopts=('--enable-'{alt-svc,ares="${workspace}",cookies})
eopts+=('--enable-'{dict,dnsshuffle,doh,file,ftp,gopher})
eopts+=('--enable-'{headers-api,hsts,http,http-auth,imap})
eopts+=('--enable-'{ipv6,ldap,ldaps,libcurl-option,libgcc,manual})
eopts+=('--enable-'{mime,mqtt,netrc,ntlm,ntlm-wb='/usr/bin/ntlm_auth'})
eopts+=('--enable-'{openssl-auto-load-config,optimize,pop3,progress-meter})
eopts+=('--enable-'{proxy,pthreads,rtsp,smb,smtp,socketpair,sspi,static,telnet})
eopts+=('--enable-'{tftp,threaded-resolver,tls-srp,unix-sockets,websockets})
wopts=('--with-'{gnutls='/usr/include',libssh2,nghttp2='/usr/include',nghttp3='/usr/include'})
wopts+=('--with-'{ca-bundle="${pem_out}",ca-fallback,ca-path="${certs_dir}",secure-transport})
autoreconf -fi
cd build || exit 1
../configure --prefix="${install_prefix}" \
            "${dopts[@]}"                 \
            "${eopts[@]}"                 \
            "${wopts[@]}"                 \
            "${csuffix}"                  \
             LIBS="$(pkg-config --libs libnghttp3)"
make "-j${cpu_threads}"
sudo make install

if ! make "-j$(nproc --all)"; then
    fail_fn "Failed to execute: make -j$(nproc --all). Line: ${LINENO}"
    exit 1
fi

if ! sudo make install; then
    fail_fn "Failed to execute: sudo make install. Line: ${LINENO}"
    exit 1
fi

# PROMPT USER TO CLEAN UP FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn
