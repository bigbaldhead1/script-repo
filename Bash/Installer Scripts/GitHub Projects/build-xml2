#!/usr/bin/env bash

###########################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/GitHub%20Projects/build-yasm
##
##  Purpose: Build GNU libtool
##
##  Updated: 08.04.23
##
##  Script version: 1.0
##
###########################################################################################################

clear

if [ "$EUID" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET VARIABLES
#

script_ver=1.0
cwd="$PWD"/xml2-build-script
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36'
repo=https://github.com/slyfox1186/script-repo
debug=OFF

printf "\n%s\n%s\n\n" \
    "xml2 build script - v$script_ver" \
    '==============================================='

#
# CREATE OUTPUT DIRECTORY
#

if [ ! -d "$cwd" ]; then
    mkdir -p "$cwd"
fi

#
# SET THE C+CPP COMPILERS
#

export CC='ccache gcc'
export CXX='ccache g++'

#
# SET COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O3 -march=native'

#
# SET PATH
#

PATH="\
/usr/lib/ccache:\
$HOME/.cargo/bin:\
$HOME/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n\n" \
        'Make sure to star this repository to show your support!' \
        "$repo"
    exit 0
}

fail_fn()
{
    printf "\n%s\n\n%s\n\n" \
        "$1" \
        "To report a bug create an issue at: $repo/issues"
    exit 1
}

cleanup_fn()
{
    local choice dpkg_list

    printf "%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "$choice" in
        1)      sudo rm -fr "$cwd";;
        2)      echo;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

build()
{
    printf "\n%s\n%s\n" \
        "building $1 - version $2" \
        '===================================='

    if [ -f "$cwd/$1.done" ]; then
        if grep -Fx "$2" "$cwd/$1.done" >/dev/null; then
            echo "$1 version $2 already built. Remove $cwd/$1.done lockfile to rebuild it."
            return 1
        elif $latest; then
            echo "$1 is oudebugtdated and will be rebuilt using version $2"
            return 0
        else
            echo "$1 is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove $cwd/$1.done lockfile."
            return 1
        fi
    fi
    return 0
}

execute()
{
    echo "$ $*"

    if [ "$debug" = 'ON' ]; then
        if ! output=$("$@"); then
            notify-send 5000 "Failed to execute: $*"
            fail_fn "Failed to execute: $*"
        fi
    else
        if ! output=$("$@" 2>&1); then
            notify-send 5000 "Failed to execute: $*"
            fail_fn "Failed to execute: $*"
        fi
    fi
}

download()
{
    dl_path="$cwd"
    dl_url="$1"
    dl_file="${2:-"${1##*/}"}"

    if [[ "$dl_file" =~ tar. ]]; then
        output_dir="${dl_file%.*}"
        output_dir="${3:-"${output_dir%.*}"}"
    else
        output_dir="${3:-"${dl_file%.*}"}"
    fi

    target_file="$dl_path/$dl_file"
    target_dir="$dl_path/$output_dir"

    if [ -f "$target_file" ]; then
        echo "The file \"$dl_file\" is already downloaded."
    else
        echo "Downloading \"$dl_url\" saving as \"$dl_file\""
        if ! curl -A "$user_agent" -Lso "$target_file" "$dl_url"; then
            printf "\n%s\n\n" "The script failed to download \"$dl_file\" and will try again in 10 seconds..."
            sleep 10
            if ! curl -A "$user_agent" -Lso "$target_file" "$dl_url"; then
                fail_fn "The script failed to download \"$dl_file\" twice and will now exit."
            fi
        fi
        echo 'Download Completed'
    fi

    if [ -d "$target_dir" ]; then
        sudo rm -fr "$target_dir"
    fi

    mkdir -p "$target_dir"

    if [ -n "$3" ]; then
        if ! tar -xf "$target_file" -C "$target_dir" 2>/dev/null >/dev/null; then
            sudo rm "$target_file"
            fail_fn "The script failed to extract \"$dl_file\" so it was deleted. Please re-run the script."
        fi
    else
        if ! tar -xf "$target_file" -C "$target_dir" --strip-components 1 2>/dev/null >/dev/null; then
            sudo rm "$target_file"
            fail_fn "The script failed to extract \"$dl_file\" so it was deleted. Please re-run the script."
        fi
    fi

    printf "%s\n\n" "File extracted: $dl_file"

    cd "$target_dir" || fail_fn "Unable to change the working directory to: $target_dir"
}

git_1_fn()
{
    gitlab_repo="$1"
    if curl_cmd="$(curl -A "$user_agent" -m 10 -sSL "https://gitlab.gnome.org/api/v4/projects/$gitlab_repo/repository/tags")"; then
        g_ver="$(echo "$curl_cmd" | jq -r '.[0].name')"
        g_ver="${g_ver#v}"
    fi
}

git_ver_fn()
{
    local t_flag u_flag v_flag v_tag v_url

    v_url="$1"
    v_tag="$2"

    if [ -n "$3" ]; then
        v_flag="$3"
    fi

    case "$v_flag" in
            B)      t_flag=branches;;
            R)      t_flag=releases;;
            T)      t_flag=tags;;
    esac

    git_1_fn "$v_url" "$t_flag" 2>/dev/null
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs_fn()
{
    pkgs=(asciidoc autogen automake binutils bison build-essential bzip2 ccache cmake
          curl libc6-dev libintl-perl libpth-dev libtool libtool-bin lzip lzma-dev
          nasm ninja-build texinfo xmlto yasm zlib1g-dev)

    for i in ${pkgs[@]}
    do
        missing_pkg="$(dpkg -l | grep "$i")"
    
        if [ -z "$missing_pkg" ]; then
            missing_pkgs+=" $i"
        fi
    done
    
    if [ -n "$missing_pkgs" ]; then
        sudo apt -y install $missing_pkgs
        sudo apt -y autoremove
        clear
    fi
}

build_done()
{
    echo "$2" > "$cwd/$1.done"
}

#
# GET PC TYPE
#

curl -Lso "$cwd/config.guess" 'https://raw.githubusercontent.com/gcc-mirror/gcc/master/config.guess'
chmod +x "$cwd/config.guess"
pc_type="$(source "$cwd/config.guess")"

#
# INSTALL APT PACKAGES
#

pkgs_fn

#build-xml2
# BUILD PROGRAM FROM SOURCE
#

git_ver_fn '1665' '1' 'T'
if build 'xml2' "$g_ver"; then
    download "https://gitlab.gnome.org/GNOME/libxml2/-/archive/v$g_ver/libxml2-v$g_ver.tar.bz2" "xml2-$g_ver.tar.bz2"
    CFLAGS+=' -DNOLIBTOOL'
    execute sh autogen.sh
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX=/usr/local,EXPORT_COMPILE_COMMANDS=OFF,VERBOSE_MAKEFILE=OFF} \
        -DCPACK_{BINARY_DEB,BINARY_FREEBSD,BINARY_IFW,BINARY_NSIS,BINARY_RPM,BINARY_TBZ2,BINARY_TXZ,SOURCE_{RPM,ZIP}}=ON \
        -DBUILD_SHARED_LIBS=OFF -G Ninja -Wno-dev
    execute ninja "-j$(nproc --all)" -C build
    execute sudo ninja "-j$(nproc --all)" -C build install
    build_done 'xml2' "$g_ver"
fi

# PROMPT USER TO CLEAN UP FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn
