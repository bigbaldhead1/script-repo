#!/usr/bin/env bash
# shellcheck disable=SC2068,SC2086

clear

#
# SET PROGRAM NAME + VERSION
#

script_ver=1.0
archive_dir=eog
archive_url=https://download.gnome.org/sources/eog/44/eog-44.3.tar.xz
archive_ext="${archive_url//*.}"
cwd="$PWD"/eog-build-script
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36'

printf "\n%s\n%s\n\n" \
    "Eye of Gnome Build Script - v$script_ver" \
    '==============================================='

#
# CREATE OUTPUT DIRECTORY
#

if [ ! -d "$cwd" ]; then
    mkdir -p "$cwd"
fi

#
# SET THE C+CPP COMPILERS
#

export CC='ccache gcc'
export CXX='ccache g++'

#
# EXPORT COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O3 -march=native'

PKG_CONFIG_PATH="\
$workspace/lib/pkgconfig:\
$workspace/lib64/pkgconfig:\
$workspace/share/pkgconfig:\
$workspace/lib/x86_64-linux-gnu/pkgconfig:\
$workspace/usr/lib/pkgconfig:\
/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/share/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/lib/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n" 'The script has completed.'
    exit 0
}

cleanup_fn()
{
    local choice
PKG_CONFIG_PATH
    printf "\n%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "$choice" in
        1)      sudo rm -fr "$cwd";;
        2)      echo;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

fail_fn()
{
    printf "%s\n\n" "$1"
    exit 1
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(autoconf autogen automake binutils build-essential ccache clang cmake curl git libgnome-desktop-3-dev libexempi-dev libportal-dev libportal-gtk3-dev
      libportal-gtk4-dev libgnome-desktop-4-dev libhandy-1-dev libpeas-dev libpeasd-3-dev libtool libtool-bin m4 meson nasm ninja-build python3 yasm itstool)

for i in ${pkgs[@]}
do
    missing_pkg="$(dpkg -l | grep $i)"

    if [ -z "$missing_pkg" ]; then
        missing_pkgs+=" $i"
    fi
done
unset i

if [ -n "$missing_pkgs" ]; then
    sudo apt -y install $missing_pkgs
    clear
fi

#
# GET PC TYPE
#

curl -A "$user_agent" -Lso "$cwd/config.guess" 'https://raw.githubusercontent.com/gcc-mirror/gcc/master/config.guess'
chmod +x "$cwd/config.guess"
pc_type="$(source "$cwd/config.guess")"

#
# DOWNLOAD THE ARCHIVE FILE
#

archive_name="$archive_dir.tar.$archive_ext"

if [ ! -f "$cwd/$archive_name" ]; then
    curl -A "$user_agent" -Lso "$cwd/$archive_name" "$archive_url"
fi

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "$cwd/$archive_dir" ]; then
    sudo rm -fr "$cwd/$archive_dir"
fi
mkdir -p "$cwd/$archive_dir/build"

#
# EXTRACT ARCHIVE FILES
#

if ! tar -xf "$cwd/$archive_name" -C "$cwd/$archive_dir" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: $cwd/$archive_name"
    exit 1
fi

#
# BUILD PROGRAM FROM SOURCE
#

clear

cd "$cwd/$archive_dir" || exit 1
meson setup build --buildtype=release      \
                  --default-library=static \
                  --strip
ninja "-j$(nproc --all)" -C build
if ! sudo ninja "-j$(nproc --all)" -C build install; then
    ninja clean
    printf "\n%s\n\n" 'Failed to install systemd.'
    exit 1
fi

sudo rm -fr "$cwd"
unset archive_dir archive_ext archive_name archive_url CC CXX i missing_pkg missing_pkgs pc_type pem_target pkgs script_ver
