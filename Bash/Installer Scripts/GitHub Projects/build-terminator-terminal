#!/Usr/bin/env bash
# Shellcheck disable=sc2162,sc2317

#############################################################################################################
##
##  Install: terminator terminal
##
##  Github: https://github.com/slyfox1186/script-repo/edit/main/shell/installers/build-terminator-terminal
##
##  Updated: 08.09.23
##
##  Script version: 1.0
##
#############################################################################################################

clear

if [ "$EUID" -eq 0 ]; then
    echo "You must run this script without root or sudo."
    exit 1
fi

# Create script variables

script_ver=1.0
cwd="$PWD/terminator-build-script"
install_dir=/usr/local
archive_dir=terminator-2.1.3
archive_url=https://salsa.debian.org/python-team/packages/terminator/-/archive/debian/2.1.3-1/terminator-debian-2.1.3-1.tar.bz2
archive_ext="$archive_url//*."
archive_name="$archive_dir.tar.$archive_ext"

printf "\n%s\n%s\n\n" \
    "Terminator Build Script - v$script_ver" \
    '==============================================='

# Create output directory

mkdir -p "$cwd"

# Set the c+cpp compilers

export CC=gcc CXX=g++

# Export compiler optimization flags

export {CFLAGS,CXXFLAGS}='-g -O3 -pipe -fno-plt -march=native'

# Set the path variable

PATH="\
/usr/lib/ccache:\
$HOME/perl5/bin:\
$HOME/.cargo/bin:\
$HOME/.local/bin:\
/usr/local/sbin:\
/usr/local/cuda/bin:\
/usr/local/x86_64-linux-gnu/bin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/games:\
/usr/games:\
/snap/bin\
"
export PATH

# Set the pkg_config_path variable

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/usr/local/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/usr/local/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/usr/local/pkgconfig\
"
export PKG_CONFIG_PATH

# Create functions

exit_fn() {
    printf "\n%s\n\n%s\n%s\n\n" \
        'The script has completed' \
        'Make sure to star this repository to show your support!' \
        "https://github.com/slyfox1186/script-repo"
    exit 0
}

fail_fn() {
    printf "\n\n%s\n\n%s\n\n%s\n\n" \
        "$1" \
        'To report a bug please create an issue at:' \
        "https://github.com/slyfox1186/script-repo/issues"
    exit 1
}

cleanup_fn() {
    local choice

    printf "\n%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "$choice" in
        1)      sudo rm -fr "$cwd";;
        2)      echo;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

# Install required apt packages

pkgs=(autoconf autogen automake build-essential ca-certificates ccache clang curl libaria2-0 libaria2-0-dev
      libc-ares-dev libdmalloc-dev libgcrypt20-dev libgmp-dev libgnutls28-dev libgpg-error-dev libjemalloc-dev
      libmbedtls-dev libnghttp2-dev librust-openssl-dev libsqlite3-dev libssh2-1-dev libssh-dev libssl-dev
      libxml2-dev pkg-config zlib1g-dev python3-gi python3-gi-cairo python3-psutil python3-configobj 
      gir1.2-keybinder-3.0 gir1.2-vte-2.91 gettext intltool dbus-x11 libpurelibc-dev)

for i in ${pkgs[@]}
do
    missing_pkg="$(sudo dpkg -l | grep -o "$i")"

    if [ -z "$missing_pkg" ]; then
        missing_pkgs+=" $i"
    fi
done
unset i

if [ -n "$missing_pkgs" ]; then
    sudo apt install $missing_pkgs
    sudo apt -y autoremove
    clear
fi

# Download the archive file
if [ ! -f "$cwd/$archive_name" ]; then
    curl -Lso "$cwd/$archive_name" "$archive_url"
fi

# Create output directory

if [ -d "$cwd/$archive_dir" ]; then
    sudo rm -fr "$cwd/$archive_dir"
fi
mkdir -p "$cwd/$archive_dir"

# Extract archive files

if ! tar -xf "$cwd/$archive_name" -C "$cwd/$archive_dir" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: $cwd/$archive_name"
    exit 1
fi

# Build program from source

cd "$cwd/$archive_dir" || exit 1
python3 setup.py build
if ! sudo python3 setup.py install --prefix="$install_dir" \
                                   --install-lib=/usr/local/lib \
                                   --home="$HOME" \
                                   --single-version-externally-managed \
                                   --record=install-files.txt \
                                   --install-headers \
                                   --install-scripts \
                                   --install-data \
                                   --compile -optimize -O2 \
                                   --force \
                                   --record "$cwd"/terminator-installed-files.txt \
                                   --user \
                                   --install-layout=unix; then
    fail_fn "Failed to execute: sudo python3 setup.py install:Line $LINENO"
    exit 1
fi

# Cleanup files

cleanup_fn

# Show exit message

exit_fn
