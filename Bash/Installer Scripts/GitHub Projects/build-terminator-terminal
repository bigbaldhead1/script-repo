#!/usr/bin/env bash

clear

#
# SET PROGRAM NAME + VERSION
#

script_ver=1.0
archive_dir=terminator-2.1.3
archive_url=https://salsa.debian.org/python-team/packages/terminator/-/archive/debian/2.1.3-1/terminator-debian-2.1.3-1.tar.bz2
archive_ext="${archive_url//*.}"
cwd="$PWD"/terminator-config-build-script
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36'

printf "\n%s\n%s\n\n" \
    "Terminator Build Script - v$script_ver" \
    '==============================================='

#
# CREATE OUTPUT DIRECTORY
#

mkdir -p "$cwd"

#
# SET THE C+CPP COMPILERS
#

export CC=gcc CXX=g++

#
# EXPORT COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O2 -flto -ffunction-sections -fdata-sections -march=native'

#
# SET THE PATH VARIABLE
#

PATH="\
/usr/lib/ccache:\
$HOME/.cargo/bin:\
$HOME/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

#
# SET THE PKG_CONFIG_PATH VARIABLE
#

PKG_CONFIG_PATH="\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib64/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/share/pkgconfig:\
/lib64/pkgconfig:\
/lib/pkgconfig:\
/lib/x86_64-linux-gnu/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n" 'The script has completed.'
    exit 0
}


fail_fn()
{
    printf "%s\n\n" "$1"
    exit 1
}

cleanup_fn()
{
    local choice

    printf "\n%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "$choice" in
        1)      sudo rm -fr "$cwd";;
        2)      echo;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(autoconf autogen automake build-essential ca-certificates ccache clang curl libaria2-0 libaria2-0-dev
      libc-ares-dev libdmalloc-dev libgcrypt20-dev libgmp-dev libgnutls28-dev libgpg-error-dev libjemalloc-dev
      libmbedtls-dev libnghttp2-dev librust-openssl-dev libsqlite3-dev libssh2-1-dev libssh-dev libssl-dev
      libxml2-dev pkg-config zlib1g-dev python3-gi python3-gi-cairo python3-psutil python3-configobj 
      gir1.2-keybinder-3.0 gir1.2-vte-2.91 gettext intltool dbus-x11 libpurelibc-dev)

for i in ${pkgs[@]}
do
    missing_pkg="$(sudo dpkg -l | grep -o "${i}")"

    if [ -z "$missing_pkg" ]; then
        missing_pkgs+=" $i"
    fi
done
unset i

if [ -n "$missing_pkgs" ]; then
    sudo apt -y install $missing_pkgs
    clear
fi

#
# GET PC TYPE
#

curl -A "$user_agent" -Lso "$cwd/config.guess" 'https://raw.githubusercontent.com/gcc-mirror/gcc/master/config.guess'
chmod +x "$cwd/config.guess"
pc_type="$(source "$cwd/config.guess")"

#
# DOWNLOAD THE ARCHIVE FILE
#

archive_name="$archive_dir.tar.$archive_ext"

if [ ! -f "$cwd/$archive_name" ]; then
    curl -A "$user_agent" -Lso "$cwd/$archive_name" "$archive_url"
fi

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "$cwd/$archive_dir" ]; then
    sudo rm -fr "$cwd/$archive_dir"
fi
mkdir -p "$cwd/$archive_dir"

#
# EXTRACT ARCHIVE FILES
#

if ! tar -xf "$cwd/$archive_name" -C "$cwd/$archive_dir" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: $cwd/$archive_name"
    exit 1
fi

#
# BUILD PROGRAM FROM SOURCE
#

cd "$cwd/$archive_dir" || exit 1
python3 setup.py build
if ! sudo python3 setup.py install --prefix=/usr/local --install-lib=/usr/local/lib --home="$HOME" \
        --single-version-externally-managed --record=install-files.txt --install-headers --install-scripts \
        --install-data --compile -optimize -O2 --force --record "$cwd"/terminator-installed-files.txt --user \
        --install-layout=unix; then
    python3 build clean
    printf "\n%s\n\n" 'Failed to install Terminator.'
    exit 1
fi

# CLEANUP FILES
cleanup_fn
# SHOW EXIT MESSAGE
exit_fn
