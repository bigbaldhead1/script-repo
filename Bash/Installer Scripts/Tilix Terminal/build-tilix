#!/usr/bin/env bash

##############################################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/script-repo/blob/main/Bash/Installer%20Scripts/Tilix%20Terminal/build-tilix
##
##  Purpose: Build the Advanced Linux Terminal Tilix from its official GitHub Repository 
##
##  Updated: 09.03.23
##
##  Script version: 2.0
##
##############################################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

#
# SET VARIABLES
#

script_ver=2.0
archive_dir=tilix-1.9.5
archive_url=https://github.com/gnunn1/tilix/archive/refs/tags/1.9.5.tar.gz
archive_ext="${archive_url//*.}"
cwd="${PWD}/tilix-build-script"
themes_dir="${packages}/tilix-themes"
packages="${cwd}/packages"
schemes_dir="${HOME}/.config/tilix/schemes"
dracula_file="${packages}/tilix-themes/dracula.json"

printf "\n%s\n%s\n\n" \
    "Tilix Terminal Build Script - v${script_ver}" \
    '==============================================='

#
# CREATE OUTPUT DIRECTORY
#

mkdir -p "${packages}" "${schemes_dir}"

#
# SET THE C+CPP COMPILERS
#

export CC=gcc CXX=g++

#
# EXPORT COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O2 -march=native'

#
# SET PATH
#

PKG_CONFIG_PATH="\
/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\ss
/usr/local/share/pkgconfig:\
/usr/share/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/lib/pkgconfig\
"
export PKG_CONFIG_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n" 'The script has completed.'
    exit 0
}


fail_fn()
{
    printf "%s\n\n" "${1}"
    exit 1
}

cleanup_fn()
{
    local choice

    printf "\n%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "${choice}" in
        1)      sudo rm -fr "${cwd}";;
        2)      echo;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(autoconf autogen automake build-essential ccache curl gettext git
      gtk-doc-tools libgtk-4-dev libgtkd-3-dev libtool libtool-bin m4
      ninja-build pkg-config python3-nautilus)

for i in ${pkgs[@]}
do
    missing_pkg="$(sudo dpkg -l | grep -o "${i}")"

    if [ -z "${missing_pkg}" ]; then
        missing_pkgs+=" ${i}"
    fi
done

if [ -n "${missing_pkgs}" ]; then
    sudo apt -y install ${missing_pkgs}
    sudo apt -y autoremove
    clear
fi

#
# DOWNLOAD AND INSTALL DUB 
#

if [ ! -f "${packages}/dmd-2.105.1-0.deb" ]; then
    if ! wget --show-progress -cqO "${packages}/dmd-2.105.1-0.deb" 'https://downloads.dlang.org/releases/2023/dmd_2.105.1-0_amd64.deb'; then
        fail_fn 'Failed to download the DMD Debian installer.'
    fi
fi
sudo dpkg -i "${packages}/dmd-2.105.1-0.deb"

if [ -d "${packages}/dub" ]; then
    sudo rm -fr "${packages}/dub"
fi
mkdir -p "${packages}/dub"

if [ -f /usr/bin/dub ]; then
    sudo apt -y remove autoremove dub
fi

if ! git clone 'https://github.com/dlang/dub.git' "${packages}/dub"; then
    fail_fn 'Could not clone dlang'\''s dub file.'
else
    clear
    cd "${packages}/dub" || exit 1
    bash build.sh
    sudo ln -sf "${PWD}/tilix-build-script/packages/dub/bin/dub" '/usr/local/bin'
    if ! sudo cp -f bin/dub /usr/bin; then
        fail_fn 'Failed to move the dub binary to: /usr/bin'
    fi
fi

if ! which dub &>/dev/null; then
    fail_fn 'The binary file "dub" failed to install.'
fi

#
# DOWNLOAD, EXTRACT, AND INSTALL THE TILIX THEMES
#

if [ -d "${themes_dir}" ]; then
    sudo rm -fr "${themes_dir}"
fi
mkdir -p "${themes_dir}"

if ! wget --show-progress -qO "${themes_dir}/dracula.json" 'https://raw.githubusercontent.com/slyfox1186/script-repo/main/Bash/Installer%20Scripts/Tilix%20Terminal/dracula.json'; then
    fail_fn 'Failed to down download the theme file: dracula.json'
fi

if [ -f "${themes_dir}/dracula.json" ]; then
    cp -f "${themes_dir}/dracula.json" "${schemes_dir}"
else
    fail_fn "Could not locate the theme file: ${packages}/tilix-themes/dracula.json"
fi

#
# MAKE TILIX THE DEFAULT TERMINAL
#

sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator /usr/bin/tilix 75
sudo update-alternatives --config x-terminal-emulator

# CLEANUP FILES
cleanup_fn

# SHOW EXIT MESSAGE
exit_fn 
