#!/usr/bin/env bash

clear

#
# SET PROGRAM NAME + VERSION
#

script_ver=1.0
archive_dir=aria2-1.36.0
archive_url=https://github.com/aria2/aria2/releases/download/release-1.36.0/aria2-1.36.0.tar.gz
archive_ext="${archive_url//*.}"
cwd="$PWD"/aria2-build-script
user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36'

printf "\n%s\n%s\n\n" \
    "Aria2 Build Script - v$script_ver" \
    '==============================================='

#
# CREATE OUTPUT DIRECTORY
#

if [ ! -d "$cwd" ]; then
    mkdir -p "$cwd"
fi

#
# SET THE C+CPP COMPILERS
#

export CC=gcc CXX=g++

#
# SET COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O3 -march=native'

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n" 'The script has completed.'
    exit 0
}


fail_fn()
{
    printf "%s\n\n" "$1"
    exit 1
}

cleanup_fn()
{
    local choice

    if sudo dpkg -l | grep aria2 &>/dev/null; then
        sudo apt -y remove aria2
        sudo apt -y autoremove
        clear
    fi

    printf "\n%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "$choice" in
        1)      sudo rm -fr "$cwd";;
        2)      echo;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

#
# INSTALL REQUIRED APT cwd
#

pkgs=(autoconf autogen automake build-essential ca-certificates ccache clang curl libaria2-0 libaria2-0-dev
      libc-ares-dev libdmalloc-dev libgcrypt20-dev libgmp-dev libgnutls28-dev libgpg-error-dev libjemalloc-dev
      libmbedtls-dev libnghttp2-dev librust-openssl-dev libsqlite3-dev libssh2-1-dev libssh-dev libssl-dev
      libuv1-dev libxml2-dev pkg-config zlib1g-dev)

for i in ${pkgs[@]}
do
    missing_pkg="$(dpkg -l | grep $i)"

    if [ -z "$missing_pkg" ]; then
        missing_pkgs+=" $i"
    fi
done

if [ -n "$missing_pkgs" ]; then
    sudo apt -y install $missing_pkgs
    sudo apt -y autoremove
    clear
fi

#
# GET PC TYPE
#

curl -A "$user_agent" -Lso "$cwd/config.guess" 'https://raw.githubusercontent.com/gcc-mirror/gcc/master/config.guess'
chmod +x "$cwd/config.guess"
pc_type="$(source "$cwd/config.guess")"

#
# DOWNLOAD THE ARCHIVE FILE
#

archive_name="$archive_dir.tar.$archive_ext"

if [ ! -f "$cwd/$archive_name" ]; then
    curl -A "$user_agent" -Lso "$cwd/$archive_name" "$archive_url"
fi

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "$cwd/$archive_dir" ]; then
    sudo rm -fr "$cwd/$archive_dir"
fi
mkdir -p "$cwd/$archive_dir/build"

#
# EXTRACT ARCHIVE FILES
#

if ! tar -xf "$cwd/$archive_name" -C "$cwd/$archive_dir" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: $cwd/$archive_name"
    exit 1
fi

#
# BUILD PROGRAM FROM SOURCE
#

cd "$cwd/$archive_dir" || exit 1
# INCREASE THE MAX NUMBER OF CONNECTIONS FROM 16 TO 128
sed -i 's/1, 16/1, 128/g' 'src/OptionHandlerFactory.cc'
cd build || exit 1
../configure --prefix=/usr/local              \
             --{build,host,target}="$pc_type" \
             --disable-nls                    \
             --disable-shared                 \
             --disable-werror                 \
             --enable-libaria2                \
             --enable-static                  \
             --with-ca-bundle="$pem_target"   \
             --with-libgcrypt                 \
             --with-libuv                     \
             --with-jemalloc                  \
             --with-openssl                   \
             --without-gnutls                 \
             --without-libnettle              \
             ARIA2_STATIC=yes                 \
             LIBS="$(pkg-config --libs libuv)"
make "-j$(nproc --all)"
if ! sudo make install; then
    make distclean
    printf "\n%s\n\n" 'Failed to install aria2.'
    exit 1
fi

#
# CREATE SOFT LINK
#

if [ -f "/usr/local/bin/$pc_type-aria2c" ]; then
    sudo ln -sf /usr/local/bin/"$pc_type"-aria2c /usr/local/bin/aria2c
fi

sudo rm -fr "$cwd"
unset archive_dir archive_ext archive_name archive_url CC CXX i missing_pkg missing_pkgs pc_type pem_target pkgs script_ver
