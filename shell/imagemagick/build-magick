#!/bin/bash
# shellcheck disable=SC2046,SC2066,SC2068,SC2086,SC2119,SC2162,SC2181,SC2034

#################################################################################
##
##  GitHub: https://github.com/slyfox1186/script-repo
##
##  Purpose: Builds ImageMagick 7 from source code obtained
##          from the official ImageMagick GitHub repository.
##
##  Function: ImageMagick is the leading open source command line
##           image processor. It can blur, sharpen, warp, reduce
##           file size, ect... The possibilities are vast and wide.
##
##  Method: The script will search GitHub for the latest released version
##         and upon execution, will import the info into the script for use
##
##  Updated: 06.04.23
##
##  Script Version: 2.0
##
#################################################################################

# Verify the script does not have root access before continuing
if [ "$EUID" -eq '0' ]; then
    printf "%s\n\n" 'This script must be run WITHOUT root/sudo'
    exit 1
fi

clear

#
# Set master variables
#

progname="${0:2}"
script_version='2.0'
cwd="$PWD"/magick-build-script
packages="$cwd"/packages
workspace="$cwd"/workspace
script_repo='https://github.com/slyfox1186/script-repo'
latest='false'

#
# Create output directories
#

mkdir -p "$packages" "$workspace"

#
# Set the available cpu count for parallel processing (speeds up the build process)
#

if [ -f '/proc/cpuinfo' ]; then
    cpu_threads="$(grep -c processor '/proc/cpuinfo')"
else
    cpu_threads="$(nproc --all)"
fi

#
# Set global variables
#

export CXXFLAGS='-g -O3 -march=native -Wno-error'

PATH="\
/usr/lib/ccache:\
$workspace/bin:\
$HOME/.local/bin:\
/usr/local/bin:\
/usr/bin:\
/usr/share/sensible-utils/bin:\
/usr/share/cargo/registry/cc-1.0.71/src/bin:\
/usr/lib/klibc/bin:\
/usr/lib/jvm/java-11-openjdk-amd64/bin:\
/usr/lib/initramfs-tools/bin:\
/usr/lib/github-desktop/resources/app/git/bin\
$PATH\
"
export PATH

PKG_CONFIG_PATH="\
$workspace/lib/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/share/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig\
"
export PKG_CONFIG_PATH

LD_LIBRARY_PATH="\
$workspace/lib:\
$workspace/lib64:\
$workspace/src/lib:\
$workspace/share/ghostscript/10.01.1/lib:\
/usr/share/texinfo/lib:\
/usr/share/ghostscript/9.55.0/lib:\
/usr/lib/jvm/java-11-openjdk-amd64/lib:\
/usr/local/lib:\
/usr/lib64:\
/usr/lib\
"
export LD_LIBRARY_PATH

#
# Create Functions
#

# general failure function
fail_fn()
{
    printf "\n\n%s\n\n%s\n\n%s\n\n" \
        "$1" \
        'Please create a support ticket at the address below' \
        "$script_repo/issues"
    exit 1
}

exit_fn()
{
    printf "\n%s\n\n%s\n%s\n\n" \
        'The script has completed' \
        'Make sure to star this repository to show your support!' \
        "$script_repo"
    exit 0
}

cleanup_fn()
{
    local choice

    printf "\n%s\n\n%s\n%s\n\n" \
        'Do you want to remove the build files?' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "$choice" in
        1)
            sudo rm -fr "$cwd"
            exit_fn
            ;;
        2)
            exit_fn
            ;;
        *)
            printf "%s\n\n" 'Error: bad user input'
            read -p 'Press enter to try again.'
            echo
            cleanup_fn
            ;;
    esac
}

execute()
{
    echo "$ $*"
    if ! output=$("$@" 2>&1); then
        fail_fn "Failed to Execute $*"
    fi
}

build()
{
    echo
    echo "Building $1 - version $2"
    echo '=========================================='

    if [ -f "$packages/$1.done" ]; then
        if grep -Fx "$2" "$packages/$1.done" >/dev/null; then
            echo "$1 version $2 already built. Remove $packages/$1.done lockfile to rebuild it."
            return 1
        else
            echo "$1 is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove $packages/$1.done lockfile."
            return 1
        fi
    fi

    return 0
}

build_done() { echo "$2" > "$packages/$1.done"; }

get_version_fn()
{
    scipt_name="$(basename "$0")"
    printf "\n%s\n\n%s\n\n" \
        "Script name: $scipt_name" \
        "Script version: $script_version"
}

download()
{
    dl_path="$packages"
    dl_file="${2:-"${1#*/}"}"

    if [[ "$dl_file" =~ tar. ]]; then
        target_dir="${dl_file%.*}"
        target_dir="${3:-"${target_dir%.*}"}"
    else
        target_dir="${3:-"${dl_file%.*}"}"
    fi

    if [ ! -f "$dl_path/$dl_file" ]; then
        echo "Downloading $1 as $dl_file"
        if ! curl -Lso "$dl_path/$dl_file" "$1"; then
            printf "\n%s\n\n%s" \
                "Failed to download: $1" \
                'Retrying in 5 seconds'
                sleep 5
            if ! curl -Lso "$dl_path/$dl_file" "$1"; then
               fail_fn "Failed to download: $1"
            fi
            echo 'Download Completed'
        fi
    else
        echo "The file is already downloaded: $dl_file"
    fi

    if [ -d "$dl_path/$target_dir" ]; then
        sudo rm -fr "$dl_path/$target_dir"
    fi

    mkdir -p "$dl_path/$target_dir"

    if [[ "$dl_file" == *'patch'* ]]; then
        return
    fi

    if [ -n "$3" ]; then
        if ! tar -xf "$dl_path/$dl_file" -C "$dl_path/$target_dir" &>/dev/null; then
            fail_fn "Failed to extract: $dl_file"
        fi
    else
        if ! tar -xf "$dl_path/$dl_file" -C "$dl_path/$target_dir" --strip-components 1 &>/dev/null; then
            fail_fn "Failed to extract: $dl_file"
        fi
    fi

    echo "Extracted $dl_file"

    cd "$dl_path/$target_dir" || fail_fn "Unable to change the working directory to: $target_dir"
}

download_git()
{
    dl_path="$packages"
    dl_url="$1"
    dl_file="$2"
    target_dir="$dl_path/$dl_file"

    if [ -d "$target_dir" ]; then
        sudo rm -fr "$target_dir"
    fi

        echo "Downloading $dl_url as $dl_file"
        if ! git clone -q "$dl_url" "$target_dir"; then
            printf "\n%s\n\n%s\n\n" \
                "The script failed to clone the git repository: $target_dir" \
                'Sleeping for 5 seconds before trying again.'
            sleep 5
            if ! git clone -q "$dl_url" "$target_dir"; then
                fail_fn "The script failed to clone \"$target_dir\" twice and will now exit the build."
            fi
        fi
        echo -e "Succesfully cloned the directory: $target_dir\\n"

    cd "$target_dir" || fail_fn "Unable to change the working directory to: $target_dir"
}

# determine if a package is installed or not
installed() { return $(dpkg-query -W -f '${Status}\n' "$1" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}'); }

install_deb_files_fn()
{
    printf "%s\n%s" \
        'Installing required debian packages' \
        '=========================================='

    cd "$packages"/deb-files || exit 1

    printf "%s\n%s" \
        'Installing: libjxl_0.8.1_amd64.deb' \
        '=========================================='
    sudo dpkg -i 'libjxl_0.8.1_amd64.deb' 2>&1
    sudo rm 'libjxl_0.8.1_amd64.deb' &>/dev/null
    echo

    for i in *.deb
    do
        printf "%s\n%s\n" \
            "Installing: $i" \
            '=========================================='
        sudo dpkg -i "$i" 2>&1
        echo
    done
}

deb_files_fn()
{
    mkdir -p "$packages"/deb-files

    if ! curl -Lso "$packages"/deb-files/autotrace_0.40.0.deb 'https://github.com/autotrace/autotrace/releases/download/travis-20200219.65/autotrace_0.40.0-20200219_all.deb'; then
        fail_fn 'Failed to download autotrace_0.40.0.deb'
    fi

    if [ ! -f "$packages"/jpeg-xl.tar.gz ]; then
        if [ "$os_test" = '23.04' ] || [ "$os_test" = '22.10' ] || [ "$os_test" = '22.04' ]; then
            if ! curl -Lso "$packages"/jpeg-xl.tar.gz 'https://github.com/libjxl/libjxl/releases/download/v0.8.1/jxl-debs-amd64-ubuntu-22.04-v0.8.1.tar.gz'; then
                fail_fn 'Failed to download jpeg-xl.tar.gz'
            fi
        elif [ "$os_test" = '20.04' ]; then
            if ! curl -Lso "$packages"/jpeg-xl.tar.gz 'https://github.com/libjxl/libjxl/releases/download/v0.8.1/jxl-debs-amd64-ubuntu-20.04-v0.8.1.tar.gz'; then
                fail_fn 'Failed to download jpeg-xl.tar.gz'
            fi
        elif [ "$os_test" = '18.04' ]; then
            if ! curl -Lso "$packages"/jpeg-xl.tar.gz 'https://github.com/libjxl/libjxl/releases/download/v0.8.1/jxl-debs-amd64-ubuntu-18.04-v0.8.1.tar.gz'; then
                fail_fn 'Failed to download jpeg-xl.tar.gz'
            fi
        fi

        if ! tar -zxf "$packages"/jpeg-xl.tar.gz -C "$packages"/deb-files --strip-components 1; then
            fail_fn 'Could not extract: jpeg-xl.tar.gz'
        fi
        install_deb_files_fn
    fi
}

#
# Get the latest package version using GitHub's API
#

curl_timeout='10'

git_1_fn()
{
    local curl_cmd github_repo github_url

    github_repo="$1"
    github_url="$2"

    if curl_cmd="$(curl -m "$curl_timeout" -sSL "https://api.github.com/repos/$github_repo/$github_url")"; then
        g_ver="$(echo "$curl_cmd" | jq -r '.[0].name' 2>/dev/null)"
        g_ver1="$(echo "$curl_cmd" | jq -r '.[1].name' 2>/dev/null)"
        g_ver3="$(echo "$curl_cmd" | jq -r '.[3].name' 2>/dev/null)"
        g_ver="${g_ver#pkgconf-}"
        g_ver="${g_ver#release-}"
        g_ver="${g_ver#ver-}"
        g_ver="${g_ver#v}"
        g_ver1="${g_ver1#nasm-}"
        g_ver1="${g_ver1#v}"
        g_ver3="${g_ver3#v}"
        g_url="$(echo "$curl_cmd" | jq -r '.[0].tarball_url')"
    fi
}

git_2_fn()
{
    gitlab_repo="$1"
    if curl_cmd="$(curl -m "$curl_timeout" -sSL "https://gitlab.freedesktop.org/api/v4/projects/$gitlab_repo/repository/tags")"; then
        g_ver="$(echo "$curl_cmd" | jq -r '.[0].name')"
    fi
}

git_ver_fn()
{
    local v_flag v_tag url_tag

    v_url="$1"
    v_tag="$2"

    if [ -n "$3" ]; then
        v_flag="$3"
    fi

    if [ "$v_flag" = 'T' ] && [ "$v_tag" = '1' ]; then
        url_tag='git_1_fn' gv_url='tags'
    elif [ "$v_flag" = 'T' ] && [ "$v_tag" = '2' ]; then
        url_tag='git_2_fn' gv_url='tags'
    fi

    "$url_tag" "$v_url" "$gv_url" 2>/dev/null
}

# PRINT THE OPTIONS AVAILABLE WHEN MANUALLY RUNNING THE SCRIPT
usage()
{
    clear
    echo "Usage: $progname [options]"
    echo
    echo 'Options:'
    echo '    -h, --help                                           Display this information'
    echo '    -b, --build                                          Start the build process'
    echo '    -c, --cleanup                                        Remove all build files and directories'
    echo '    -l, --latest                                         Update outdated repositories'
    echo '    -v, --version                                        Display script version information'
}

while (($# > 0))
do
    case "$1" in
        -h | --help)
            usage
            echo
            exit 0
            ;;
        -v | --version)
            get_version_fn
            echo
            exit 0
            ;;
        -*)
            if [[ "$1" == '--build' || "$1" =~ '-b' ]]; then
                bflag='-b'
            fi
            if [[ "$1" == '--cleanup' || "$1" =~ '-c' && ! "$1" =~ '--' ]]; then
                cflag='-c'
                cleanup_fn
            fi
            if [[ "$1" == "--latest" || "$1" =~ '-l' && ! "$1" =~ '--' ]]; then
              latest='true'
            fi
            shift
            ;;
        *)
            usage
            echo
            exit 1
            ;;
    esac
done

if [ -z "$bflag" ]; then
    if [ -z "$cflag" ]; then
        usage
        exit 1
    fi
    exit 0
fi

# required imagemagick developement packages
pkgs_fn()
{
    pkgs=("$1" asciidoc autoconf automake autopoint bison build-essential ccache cmake curl flex gettext gimp-data git gperf \
          jq libamd2 libbabl-0.1-0 libcamd2 libccolamd2 libc-devtools libcholmod3 libcolamd2 libcpu-features-dev libfontconfig-dev \
          libfreetype-dev libgc1 libgc-dev libgegl-0.4-0 libgegl-common libgl2ps-dev libglib2.0-dev libgraphviz-dev libgs-dev \
          libheif-dev libhiredis0.14 libhwy0 libhwy-dev libmetis5 libmimalloc2.0 libmimalloc-dev libpango1.0-dev libpng-dev \
          libpstoedit-dev libraw-dev librsvg2-dev librust-bzip2-dev libsdl2-dev libsuitesparseconfig5 libtcmalloc-minimal4 \
          libumfpack5 libzip-dev meson ninja-build php-cli pstoedit xmlto)

    for pkg in ${pkgs[@]}
    do
        if ! installed "$pkg"; then
            missing_pkgs+=" $pkg"
        fi
    done

    if [ -n "${missing_pkgs-}" ]; then
        for i in "$missing_pkgs"
        do
            if ! sudo apt -y install $i; then
                sudo apt --fix-broken install
                fail_fn 'APT held broken packages. Try running the script again.'
            fi
        done
    else
        echo 'The required packages are already installed.'
        echo
    fi
}

#
# Begin compiling source code
#

printf "%s\n\n%s\n%s\n\n%s\n\n" \
    'Starting the build process...' \
    "ImageMagick Build Script $script_version" \
    '==========================================' \
    "This script will use ($cpu_threads) cpu cores for parallel processing to accelerate the build speed."
sleep 2

printf "%s\n%s\n" \
    'Installing required packages' \
    '=========================================='

#
# Install extra libraries for imagemagick
#

os_test="$(lsb_release -r 2>/dev/null | grep -Eo '[0-9\.]+$')"
if [ "$os_test" = '23.04' ]; then
    librust_pkg='librust-jpeg-decoder-dev'
    pkgs_fn "$librust_pkg"
else
    pkgs_fn
fi

#
# Install required debian files
#

deb_files_fn

#
# Install composer to compile Graphviz
#

composer_fn()
{
    if [ ! -f '/usr/bin/composer' ]; then
        EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
        php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"

        if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
            >&2 echo 'ERROR: Invalid installer checksum'
            rm composer-setup.php
            return 1
        fi
        if ! sudo php composer-setup.php --install-dir='/usr/bin' --filename=composer --quiet; then
            fail_fn 'Failed to install /usr/bin/composer'
        fi
        rm composer-setup.php
    fi
}

composer_fn

#
# FIGURE OUT WHICH COMPILERS TO USE
#

if which 'gcc-13' &>/dev/null; then
    export CC='gcc-13'
elif which 'gcc-12' &>/dev/null; then
    export CC='gcc-12'
elif which 'gcc-11' &>/dev/null; then
    export CC='gcc-11'
elif which 'gcc-10' &>/dev/null; then
    export CC='gcc-10'
elif which 'gcc' &>/dev/null; then
    export CC='gcc'
else
    fail_fn 'You must have "gcc" or some higher version of it installed.'
fi

if which 'g++-12' &>/dev/null; then
    export CXX='g++-12'
elif which 'g++-11' &>/dev/null; then
    export CXX='g++-11'
elif which 'g++-10' &>/dev/null; then
    export CXX='g++-10'
elif which 'g++' &>/dev/null; then
    export CXX='g++'
else
    fail_fn 'You must have "g++" or some higher version of it installed.'
fi

#
# Build from source code
#

git_ver_fn 'pkgconf/pkgconf' '1' 'T'
if build 'pkg-config' "$g_ver"; then
    download "https://codeload.github.com/pkgconf/pkgconf/tar.gz/refs/tags/pkgconf-$g_ver" "pkg-config-$g_ver.tar.gz"
    execute ./autogen.sh
    execute ./configure --silent --prefix="$workspace" --enable-static --disable-shared
    execute make "-j$cpu_threads"
    execute make install
    build_done 'pkg-config' "$g_ver"
fi

git_ver_fn 'netwide-assembler/nasm' '1' 'T'
if build 'nasm' '2.16.02rc1'; then
    download 'https://www.nasm.us/pub/nasm/releasebuilds/2.16.02rc1/nasm-2.16.02rc1.tar.xz' 'nasm-2.16.02rc1.tar.gz'
    execute ./autogen.sh
    execute ./configure --prefix="$workspace" --enable-ccache --disable-pedantic
    execute make "-j$cpu_threads"
    execute make strip
    execute make install
    build_done 'nasm' '2.16.02rc1'
fi

if build 'autoconf' '2.71'; then
    download 'https://ftp.gnu.org/gnu/autoconf/autoconf-2.71.tar.xz' 'autoconf-2.71.tar.xz'
    execute autoreconf -fi
    execute ./configure --prefix="$workspace"
    execute make "-j$cpu_threads"
    execute make install
    build_done 'autoconf' '2.71'
fi

if build 'automake' '1.16.5'; then
    download 'https://ftp.gnu.org/gnu/automake/automake-1.16.5.tar.xz' 'automake-1.16.5.tar.gz'
    execute ./bootstrap
    execute autoreconf -fi
    execute ./configure --prefix="$workspace"
    execute make "-j$cpu_threads"
    execute make install
    build_done 'automake' '1.16.5'
fi

if build 'libtool' '2.4.7'; then
    download 'https://ftp.gnu.org/gnu/libtool/libtool-2.4.7.tar.xz' 'libtool-2.4.7.tar.xz'
    execute ./configure --prefix="$workspace" --enable-static --disable-shared --with-pic
    execute make "-j$cpu_threads"
    execute make install
    build_done 'libtool' '2.4.7'
fi

if build 'm4' 'release'; then
    download 'http://ftp.gnu.org/gnu/m4/m4-latest.tar.xz' 'm4-release.tar.xz'
    execute ./configure --prefix="$workspace"
    execute make "-j$cpu_threads"
    execute make install
    build_done 'm4' 'latest'
fi

if build 'openssl' '1.1.1u'; then
    download 'https://www.openssl.org/source/openssl-1.1.1u.tar.gz' 'openssl-1.1.1u.tar.gz'
    execute ./config --prefix="$workspace" --openssldir="$workspace" --with-zlib-include="$workspace"/include/ --with-zlib-lib="$workspace"/lib no-shared zlib
    execute make "-j$cpu_threads"
    execute make install_sw
    build_done 'openssl' '1.1.1u'
fi

git_ver_fn 'libsdl-org/libtiff' '1' 'T'
if build 'tiff' "$g_ver"; then
    download "https://codeload.github.com/libsdl-org/libtiff/tar.gz/refs/tags/v$g_ver" "tiff-$g_ver.tar.gz"
    execute ./autogen.sh
    execute ./configure --prefix="$workspace" --enable-shared --enable-cxx
    execute make "-j$cpu_threads"
    execute make install
    build_done 'tiff' "$g_ver"
fi

if build 'jpeg-turbo' 'git'; then
    download_git 'https://github.com/imageMagick/jpeg-turbo.git' 'jpeg-turbo-git'
    mkdir -p 'build'
    execute cmake -S . -DCMAKE_INSTALL_PREFIX='/usr/local' -DCMAKE_BUILD_TYPE='Release' -DENABLE_SHARED='ON' -DENABLE_STATIC='ON' -G 'Ninja'
    execute ninja "-j$cpu_threads"
    execute sudo ninja "-j$cpu_threads" install
    build_done 'jpeg-turbo' 'git'
fi

if build 'fpx' 'git'; then
    download_git 'https://github.com/imageMagick/libfpx.git' 'libfpx-git'
    execute autoreconf -fi
    execute ./configure --prefix='/usr/local' --with-pic --with-aix-soname='aix'
    execute make -j "$cpu_threads"
    execute sudo make install
    build_done 'fpx' 'git'
fi

if build 'ghostscript' '10.01.1'; then
    download 'https://github.com/artifexsoftware/ghostpdl-downloads/releases/download/gs10011/ghostscript-10.01.1.tar.gz' 'ghostscript-10.01.1.tar.gz'
    execute ./autogen.sh
    execute ./configure --prefix="$workspace"
    execute make "-j$cpu_threads"
    execute make install
    build_done 'ghostscript' '10.01.1'
fi

if build 'png12' '1.2.59'; then
    download 'https://github.com/glennrp/libpng/archive/refs/tags/v1.2.59.tar.gz' 'libpng-1.2.59.tar.gz'
    execute ./autogen.sh
    execute ./configure --prefix='/usr'
    execute make "-j$cpu_threads"
    execute sudo make install
    build_done 'png12' '1.2.59'
fi

if build 'webp' 'git'; then
    download_git 'https://chromium.googlesource.com/webm/libwebp' 'webp-git'
    execute autoreconf -fi
    execute cmake -B 'build' -DCMAKE_INSTALL_PREFIX="$workspace" -DCMAKE_BUILD_TYPE='Release' -DBUILD_SHARED_LIBS='ON' \
        -DCMAKE_C_FLAGS_RELEASE="-O3 -DNDEBUG" -DWEBP_BUILD_EXTRAS='OFF' -DWEBP_BUILD_LIBWEBPMUX='OFF' \
        -DCMAKE_INSTALL_INCLUDEDIR="include" -DWEBP_LINK_STATIC='OFF' -DWEBP_BUILD_GIF2WEBP='OFF' -DWEBP_BUILD_IMG2WEBP='OFF' \
        -DWEBP_BUILD_DWEBP='ON' -DWEBP_BUILD_CWEBP='ON' -DWEBP_BUILD_ANIM_UTILS='OFF' -DWEBP_BUILD_WEBPMUX='OFF' \
        -DWEBP_ENABLE_SWAP_16BIT_CSP='OFF' -DWEBP_BUILD_WEBPINFO='OFF' -DZLIB_INCLUDE_DIR='/usr/include' -DWEBP_BUILD_VWEBP='OFF' \
        -G 'Ninja' -Wno-dev
    execute ninja "-j$cpu_threads" -C 'build'
    execute ninja "-j$cpu_threads" -C 'build' install
    build_done 'webp' 'git'
fi

if build 'c2man' 'git'; then
    download_git 'https://github.com/fribidi/c2man.git' 'c2man-git'
    execute ./Configure -desO -D prefix="$workspace" -D bin="$workspace"/bin -D bash='/bin/bash' -D cc='/usr/bin/cc' \
        -D d_gnu='/usr/lib/x86_64-linux-gnu' -D find='/usr/bin/find' -D gcc="$CC" -D gzip='/usr/bin/gzip' \
        -D installmansrc="$workspace"/share/man -D ldflags="-L$workspace/lib" -D less='/usr/bin/less' \
        -D libpth="$workspace/lib /usr/local/lib /lib /usr/lib" \
        -D locincpth="$workspace/include /usr/local/include /opt/local/include /usr/gnu/include /opt/gnu/include /usr/GNU/include /opt/GNU/include" \
        -D yacc='/usr/bin/yacc' -D loclibpth="$workspace/lib /usr/local/lib /opt/local/lib /usr/gnu/lib /opt/gnu/lib /usr/GNU/lib /opt/GNU/lib" \
        -D make='/usr/bin/make' -D more='/usr/bin/more' -D osname='Ubuntu' -D perl='/usr/bin/perl' -D privlib="$workspace"/lib/c2man \
        -D privlibexp="$workspace"/lib/c2man -D sleep='/usr/bin/sleep' -D tail='/usr/bin/tail' -D tar='/usr/bin/tar' -D uuname='Linux' \
        -D vi='/usr/bin/vi' -D zip='/usr/bin/zip'
    execute make depend
    execute make "-j$cpu_threads"
    execute sudo make install
    build_done 'c2man' 'git'
fi

git_ver_fn 'fribidi/fribidi' '1' 'T'
if build 'fribidi' "$g_ver"; then
    download "https://codeload.github.com/fribidi/fribidi/tar.gz/refs/tags/v$g_ver" "fribidi-$g_ver.tar.gz"
    execute meson setup 'build' --prefix="$workspace" --buildtype='release' --default-library='static' --strip
    execute ninja "-j$cpu_threads" -C 'build'
    execute ninja "-j$cpu_threads" -C 'build' install
    build_done 'fribidi' "$g_ver"
fi

git_ver_fn 'host-oman/libraqm' '1' 'T'
if build 'raqm' "$g_ver"; then
    download "https://codeload.github.com/host-oman/libraqm/tar.gz/refs/tags/v$g_ver" "raqm-$g_ver.tar.gz"
    execute meson setup 'build' --prefix="$workspace" --includedir="$workspace"/include --buildtype='release' --default-library='static' --strip
    execute ninja "-j$cpu_threads" -C 'build'
    execute ninja "-j$cpu_threads" -C 'build' install
    build_done 'raqm' "$g_ver"
fi

git_ver_fn 'jemalloc/jemalloc' '1' 'T'
if build 'jemalloc' "$g_ver"; then
    download "https://codeload.github.com/jemalloc/jemalloc/tar.gz/refs/tags/$g_ver" "jemalloc-$g_ver.tar.gz"
    execute ./autogen.sh
    execute make "-j$cpu_threads"
    execute sudo make install
    build_done 'jemalloc' "$g_ver"
fi

git_ver_fn 'uclouvain/openjpeg' '1' 'T'
if build 'openjpeg' "$g_ver"; then
    download "$g_url" "openjpeg-$g_ver.tar.gz"
    execute cmake -B 'build' -DCMAKE_INSTALL_PREFIX="$workspace" -DCMAKE_BUILD_TYPE='Release' -DBUILD_TESTING='OFF' -DCPACK_BINARY_FREEBSD='ON' \
        -DBUILD_THIRDPARTY='ON' -DCPACK_SOURCE_RPM='ON' -DCPACK_SOURCE_ZIP='ON' -DCPACK_BINARY_IFW='ON' -DBUILD_SHARED_LIBS='ON' -DCPACK_BINARY_DEB='ON' \
        -DCPACK_BINARY_TBZ2='ON' -DCPACK_BINARY_NSIS='ON' -DCPACK_BINARY_RPM='ON' -DCPACK_BINARY_TXZ='ON' -DCMAKE_EXPORT_COMPILE_COMMANDS='ON' -G 'Ninja' -Wno-dev
    execute ninja "-j$cpu_threads" -C 'build'
    execute ninja "-j$cpu_threads" -C 'build' install
    build_done 'openjpeg' "$g_ver"
fi

#
# Begin imagemagick build
#

if [ -f "$packages/ImageMagick.done" ]; then
    rm -f "$packages/ImageMagick.done"
fi

git_ver_fn 'imagemagick/imagemagick' '1' 'T'
if [ -d "$packages/imagemagick-$g_ver" ]; then
    sudo rm -fr "$packages/imagemagick-$g_ver"
fi

if build 'imageMagick' "$g_ver"; then
    download "https://codeload.github.com/imagemagick/imagemagick/tar.gz/refs/tags/$g_ver" "imagemagick-$g_ver.tar.gz"
    ./configure \
        --prefix='/usr/local' \
        --enable-ccmalloc \
        --enable-legacy-support \
        --with-autotrace \
        --with-dmalloc \
        --with-fpx \
        --with-gvc \
        --with-gslib \
        --with-heic \
        --with-jemalloc \
        --with-modules \
        --with-perl \
        --with-rsvg \
        --with-tcmalloc \
        --with-quantum-depth=16 \
        LDFLAGS="-L$workspace/lib -L/usr/local/lib -L/usr/lib" \
        CPPFLAGS="-I$workspace/include -I/usr/local/include -I/usr/include"
    execute make "-j$cpu_threads"
    execute sudo make install
    build_done 'ImageMagick' "$g_ver"
fi

# ldconfig must be run next in order to update file changes or the magick command will not work
echo
sudo ldconfig /usr/local/lib 2>/dev/null

# show the newly installed magick version
if ! magick -version 2>/dev/null; then
    fail_fn 'Failure to execute the command: magick -version'
fi

# prompt the user to cleanup the build files
cleanup_fn
