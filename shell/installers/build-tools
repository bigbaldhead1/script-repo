#!/bin/bash
# shellcheck disable=SC2034,SC2046,SC2066,SC2068,SC2086,SC2162

##################################################################
##
##  Install CMake, Ninja, & Meson: Latest GitHub Releases
##
##  Supported OS: Linux Ubuntu - 23.04 (Lunar) / 22.04 (Jammy)
##
##  Updated: 06.02.23
##
##  Script version: 4.1
##
##################################################################

clear

if [ "$EUID" -eq '0' ]; then
	printf "\n%s\n\n" 'You must run this script WITHOUT root/sudo'
	exit 1
fi

#
# CREATE SCRIPT VARIABLES
#

script_ver='4.1'
cwd="$PWD"/build-tools-script
packages="$cwd"/packages
workspace="$cwd"/workspace
install_dir='/usr/local'

#
# PRINT SCRIPT BANNER
#

printf "%s\n%s\n\n" \
	"Build-tools script: v$script_ver" \
	'===================================='

#
# GET CPU CORE COUNT FOR PARALLEL PROCESSING
#

cpu_threads="$(nproc --all)"

#
# CREATE OUTPUT DIRECTORIES
#

mkdir -p "$packages" "$workspace"

#
# SET GLOBAL VARIABLES
#

PATH="\
/usr/lib/ccache:\
$workspace/bin:\
$PATH"
export PATH

#
# EXPORT THE PKG-CONFIG PATHS TO ENABLE SUPPORT DURING THE BUILD
#

PKG_CONFIG_PATH="\
$workspace/lib/pkgconfig:\
$workspace/lib64/pkgconfig:\
$workspace/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib64/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/lib/i386-linux-gnu/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/share/pkgconfig\
"
export PKG_CONFIG_PATH

#
# EXPORT LIBRARY PATHS
#

LD_LIBRARY_PATH="\
$workspace/lib:\
$workspace/lib64:\
$workspace/src/lib:\
/usr/local/lib:\
/usr/lib:\
/usr/x86_64-linux-gnu/lib\
"
export LD_LIBRARY_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
	printf "\n%s\n\n%s\n%s\n\n" \
		'The script has completed' \
		'Make sure to star this repository to show your support!' \
		'https://github.com/slyfox1186/script-repo'
	exit 0
}

fail_fn()
{
	printf "\n\n%s\n\n%s\n\n%s\n\n" \
		"$1" \
		'Please create a support ticket so I can work on a fix.' \
		'https://github.com/slyfox1186/script-repo/issues'
	exit 1
}

cleanup_fn()
{
	local cleanup_answer

	printf "\n%s\n\n%s\n%s\n\n" \
		'Do you want to remove the build files?' \
		'[1] Yes' \
		'[2] No'
	read -p 'Your choices are (1 or 2): ' cleanup_answer

	case "$cleanup_answer" in
	1)
		sudo rm -fr "$cwd" "$0"
		exit_fn
		;;
	2)
		exit_fn
		;;

	*)
		printf "%s\n\n" 'Bad user input.'
		read -p 'Press enter to try again.'
		clear
		cleanup_fn
		;;
	esac
}

show_versions_fn()
{
	local show_cmake_ver show_ninja_ver show_meson_ver

	show_cmake_ver="$(cmake --version | sed 's/cmake version /v/g' | sed 's/CMake suite maintained and supported by Kitware (kitware.com\/cmake).//g' | xargs -n1)"
	show_ninja_ver="$(ninja --version)"
	show_meson_ver="$(meson --version)"

	if [ -x "$show_cmake_ver" ]; then
		fail_fn 'Failed to execute the command: cmake --version'
	elif [ -x "$show_ninja_ver" ]; then
		fail_fn 'Failed to execute the command: ninja --version'
	elif [ -x "$show_meson_ver" ]; then
		fail_fn 'Failed to execute the command: meson --version'
	else
        clear
		printf "%s\n\n%s\n%s\n%s\n" \
            'The installed versions are:' \
			"CMake: $show_cmake_ver" \
			"Ninja: v$show_ninja_ver" \
			"Meson: v$show_meson_ver"
	fi
}

execute()
{
	echo "$ $*"
	if ! output=$("$@" 2>&1); then
		fail_fn "Failed to Execute $*"
	fi
}

download()
{
	local dl_file dl_path dl_url output_dir target_dir target_file

	dl_path="$packages"
	dl_url="$1"
	dl_file="${2:-"${1##*/}"}"

	if [[ "$dl_file" =~ tar. ]]; then
		output_dir="${dl_file%.*}"
		output_dir="${3:-"${output_dir%.*}"}"
	else
		output_dir="${3:-"${dl_file%.*}"}"
	fi

	target_file="$dl_path/$dl_file"
	target_dir="$dl_path/$output_dir"

	if [ -f "$target_file" ]; then
		echo "The file \"$dl_file\" is already downloaded."
	else
		echo "Downloading \"$dl_url\" saving as \"$dl_file\""
		if ! curl -Lso "$target_file" "$dl_url"; then
			printf "\n%s\n\n" "The script failed to download \"$dl_file\" and will try again in 10 seconds..."
			sleep 10
			if ! curl -Lso "$target_file" "$dl_url"; then
				fail_fn "The script failed to download \"$dl_file\" twice and will now exit."
			fi
		fi
		echo 'Download Completed'
	fi

	# REMOVE ANY DIRETORIES FROM PREVIOUS RUNS BEFORE ATTEMPTING TO RE-BUILD
	if [ -d "$target_dir" ]; then
		rm -fr "$target_dir"
	fi

	# CREATE A NEW OUTPUT DIRECTORY
	mkdir -p "$target_dir"

	if [ -n "$3" ]; then
		if ! tar -xf "$target_file" -C "$target_dir" 2>/dev/null >/dev/null; then
			fail_fn "Failed to extract: $dl_file"
		fi
	else
		if ! tar -xf "$target_file" -C "$target_dir" --strip-components 1 2>/dev/null >/dev/null; then
			fail_fn "Failed to extract: $dl_file"
		fi
	fi

	echo -e "File extracted: $dl_file\\n"

	cd "$target_dir" || fail_fn "Unable to change the working directory to: $target_dir"
}

build()
{
	echo
	echo "building $1 - version $2"
	echo '===================================='

	if [ -f "$packages/$1.done" ]; then
		if grep -Fx "$2" "$packages/$1.done" >/dev/null; then
			echo "$1 version $2 is already built. Remove $packages/$1.done lockfile to rebuild it."
			return 1
		else
			echo "$1 is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove $packages/$1.done lockfile."
			return 1
		fi
	fi

	return 0
}

git_1_fn()
{
	local curl_cmd github_repo github_url g_sver g_sver1

	# SCRAPE GITHUB'S API FOR THE LATEST REPO VERSION
	github_repo="$1"
	github_url="$2"

	if curl_cmd="$(curl -m '10' -sSL https://api.github.com/repos/"$github_repo"/"$github_url")"; then
		g_sver="$(echo "$curl_cmd" | jq -r '.[0].tag_name' 2>/dev/null)"
		g_sver1="$(echo "$curl_cmd" | jq -r '.[0].name' 2>/dev/null)"
		g_ver="${g_sver#v}"
		g_ver1="${g_sver1#v}"
	fi
}

git_2_fn()
{
    gitlab_repo="$1"
    if curl_cmd="$(curl -m "$curl_timeout" -sSL "https://gitlab.kitware.com/api/v4/projects/$gitlab_repo/repository/tags")"; then
        g_ver="$(echo "$curl_cmd" | jq -r '.[0].name')"
        g_ver="${g_ver#v}"
    fi
}

git_ver_fn()
{
    local t_flag u_flag v_flag v_tag v_url

    v_url="$1"
    v_tag="$2"

    if [ -n "$3" ]; then
        v_flag="$3"
    fi

    case "$v_flag" in
            R)      t_flag='releases';;
            T)      t_flag='tags';;
            *)      fail_fn 'Could not detect the variable $v_flag.'
    esac

    case "$v_tag" in
            1)      u_flag='git_1_fn';;
            2)      u_flag='git_2_fn';;
            *)      fail_fn 'Could not detect the variable $v_tag.'
    esac

    "$u_flag" "$v_url" "$t_flag" 2>/dev/null
}

build_done()
{
    echo "$2" >"$packages/$1.done"
}

installed()
{
    return $(dpkg-query -W -f '${Status}\n' "$1" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}')
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(autoconf automake autogen build-essential ccache cmake curl jq git libssl-dev)

for pkg in ${pkgs[@]}; do
    if ! installed "$pkg"; then
        missing_pkgs+=" $pkg"
    fi
done

if [ -n "$missing_pkgs" ]; then
    printf "%s\n%s\n\n" \
        'Installing required apt packages' \
        '================================================'
    for i in "$missing_pkgs"; do
        echo "\$ sudo apt -y install $i"
        sudo apt -y install $i
        echo
    done
fi

#
# SET THE C & C++ COMPILERS
#

type -P gcc &>/dev/null && export CC=gcc CXX=g++
type -P clang &>/dev/null && export CC=clang CXX=clang++

#
# SET THE C++ COMPILER OPTIMIZATION FLAGS TO TUNE THE BUILD FOR THE SPECIFIC COMPUTER RUNNING THE SCRIPT 
#

export CXXFLAGS='-g -O3 -march=native -mtune=native'

#
# INSTALL FROM SOURCE CODE
#

git_ver_fn '541' '2'
if build 'cmake' "$g_ver"; then
    download "https://gitlab.kitware.com/cmake/cmake/-/archive/v$g_ver/cmake-v$g_ver.tar.bz2" "cmake-$g_ver.tar.bz2"
    execute ./configure --prefix="$workspace" --parallel="$cpu_threads" --enable-ccache -- -DCMAKE_USE_OPENSSL=OFF
    execute make "-j$cpu_threads"
    execute make install
    execute make clean
    build_done 'cmake' "$g_ver"
fi

git_ver_fn 'ninja-build/ninja' 'T'
if build 'ninja' "$g_ver1"; then
	download "https://codeload.github.com/ninja-build/ninja/tar.gz/refs/tags/v$g_ver1" "ninja-$g_ver1.tar.gz"
	execute cmake -B"$workspace"/bin
	execute cmake --build "$workspace"/bin
	execute sudo cp -f "$workspace"/bin/ninja "$install_dir"/bin
	build_done 'ninja' "$g_ver1"
fi

git_ver_fn 'mesonbuild/meson' 'T'
if build 'meson' "$g_ver1"; then
	download "https://codeload.github.com/mesonbuild/meson/tar.gz/refs/tags/$g_ver1" "meson-$g_ver1.tar.gz"
	execute python3 setup.py build
	execute sudo python3 setup.py install --prefix="$install_dir"
	build_done 'meson' "$g_ver1"
fi

# LDCONFIG MUST BE RUN NEXT IN ORDER TO UPDATE FILE CHANGES
sudo ldconfig 2>/dev/null

# SHOW THE NEWLY INSTALLED VERSION OF EACH PACKAGE
show_versions_fn

# PROMPT THE USER TO CLEANUP THE BUILD FILES
cleanup_fn
