#!/bin/bash
# shellcheck disable=SC2034,SC2046,SC2066,SC2068,SC2086,SC2162

##################################################################
##
##  Install gcc-13
##
##  Supported OS: Linux Ubuntu - 23.04 (Lunar) / 22.04 (Jammy)
##
##  Updated: 06.12.23
##
##  Script version: 1.0
##
##################################################################

clear

if [ "$EUID" -eq '0' ]; then
    printf "\n%s\n\n" 'You must run this script WITHOUT root/sudo'
    exit 1
fi

#
# CREATE SCRIPT VARIABLES
#

script_ver='1.0'
cwd="$PWD"/gcc-build-script
packages="$cwd"/packages
workspace="$cwd"/workspace
install_prefix='/usr/local'

#
# GET CPU CORE COUNT FOR PARALLEL PROCESSING
#

cpu_threads="$(nproc --all)"

#
# CREATE OUTPUT DIRECTORIES
#

mkdir -p "$packages" "$workspace"

#
# SET GLOBAL VARIABLES
#

PATH="\
/usr/lib/ccache:\
$workspace/bin:\
$HOME/.local/bin:\
$HOME/.cargo/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin:\
/usr/local/cuda/bin:\
/snap/bin\
"
export PATH

#
# EXPORT THE PKG-CONFIG PATHS TO ENABLE SUPPORT DURING THE BUILD
#

PKG_CONFIG_PATH="\
$workspace/lib/pkgconfig:\
$workspace/lib64/pkgconfig:\
$workspace/share/pkgconfig:\
$workspace/lib/x86_64-linux-gnu/pkgconfig:\
$workspace/usr/lib/pkgconfig:\
/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/lib64/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/share/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/lib/pkgconfig\
"

#
# EXPORT LIBRARY PATHS
#

LD_LIBRARY_PATH="\
$workspace/lib:\
$workspace/lib64:\
$workspace/src/lib:\
/usr/local/lib:\
/usr/lib:\
/usr/x86_64-linux-gnu/lib\
"
export LD_LIBRARY_PATH

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n%s\n\n" \
        'The script has completed' \
        'Make sure to star this repository to show your support!' \
        'https://github.com/slyfox1186/script-repo'
    exit 0
}

fail_fn()
{
    printf "\n\n%s\n\n%s\n\n%s\n\n" \
        "$1" \
        'Please create a support ticket so I can work on a fix.' \
        'https://github.com/slyfox1186/script-repo/issues'
    exit 1
}

cleanup_fn()
{
    local answer

    printf "\n%s\n\n%s\n%s\n\n" \
        'Do you want to remove the build files?' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' answer

    case "$answer" in
        1)      sudo rm -fr "$cwd" "$0";;
        2)      return 0;;
        *)
                printf "%s\n\n" 'Bad user input.'
                read -p 'Press enter to try again.'
                clear
                cleanup_fn
                ;;
    esac
}

show_versions_fn()
{
    local show_cmake_ver show_ninja_ver show_meson_ver

    show_cmake_ver="$(cmake --version | sed 's/cmake version /v/g' | sed 's/CMake suite maintained and supported by Kitware (kitware.com\/cmake).//g' | xargs -n1)"
    show_ninja_ver="$(ninja --version)"
    show_meson_ver="$(meson --version)"

    if [ -x "$show_cmake_ver" ]; then
        fail_fn 'Failed to execute the command: cmake --version'
    elif [ -x "$show_ninja_ver" ]; then
        fail_fn 'Failed to execute the command: ninja --version'
    elif [ -x "$show_meson_ver" ]; then
        fail_fn 'Failed to execute the command: meson --version'
    else
        clear
        printf "%s\n\n%s\n%s\n%s\n" \
            'The installed versions are:' \
            "CMake: $show_cmake_ver" \
            "Ninja: v$show_ninja_ver" \
            "Meson: v$show_meson_ver"
    fi
}

execute()
{
    echo "$ $*"
    # 2>&1
    if ! output=$("$@"); then
        fail_fn "Failed to Execute $*"
    fi
}

download()
{
    dl_path="$packages"
    dl_url="$1"
    dl_file="${2:-"${1##*/}"}"

    if [[ "$dl_file" =~ tar. ]]; then
        output_dir="${dl_file%.*}"
        output_dir="${3:-"${output_dir%.*}"}"
    else
        output_dir="${3:-"${dl_file%.*}"}"
    fi

    target_file="$dl_path/$dl_file"
    target_dir="$dl_path/$output_dir"

    if [ -f "$target_file" ]; then
        echo "The file \"$dl_file\" is already downloaded."
    else
        echo "Downloading \"$dl_url\" saving as \"$dl_file\""
        if ! curl -Lso "$target_file" "$dl_url"; then
            printf "\n%s\n\n" "The script failed to download \"$dl_file\" and will try again in 5 seconds..."
            sleep 5
            if ! curl -Lso "$target_file" "$dl_url"; then
                fail_fn "The script failed to download \"$dl_file\" twice and will now exit."
            fi
        fi
        echo 'Download Completed'
    fi

    if [ -d "$target_dir" ]; then
        sudo rm -fr "$target_dir"
    fi

    mkdir -p "$target_dir"

    if [ -n "$3" ]; then
        if ! tar -xf "$target_file" -C "$target_dir" 2>/dev/null >/dev/null; then
            sudo rm "$target_file"
            fail_fn "Failed to extract \"$dl_file\" so it was deleted. Please run the script again."
        fi
    else
        if ! tar -xf "$target_file" -C "$target_dir" --strip-components 1 2>/dev/null >/dev/null; then
            sudo rm "$target_file"
            fail_fn "Failed to extract \"$dl_file\" so it was deleted. Please run the script again."
        fi
    fi

    echo -e "File extracted: $dl_file\\n"

    cd "$target_dir" || fail_fn "Unable to change the working directory to: $target_dir"
}

download_git()
{
    local dl_path dl_url dl_file target_dir

    dl_path="$packages"
    dl_url="$1"
    dl_file="${2:-"${1##*/}"}"
    dl_file="${dl_file//\./-}"
    target_dir="$dl_path/$dl_file"

    if [ -d "$target_dir" ]; then
        sudo rm -fr "$target_dir"
    fi

    echo "Downloading $dl_url as $dl_file"
    if ! git clone -q "$dl_url" "$target_dir"; then
        printf "\n%s\n\n" "The script failed to clone the git repository \"$target_dir\" and will try again in 10 seconds..."
        sleep 10
        if ! git clone -q "$dl_url" "$target_dir"; then
            fail_fn "The script failed to clone \"$target_dir\" twice and will now exit the build."
        fi
    else
        echo -e "Succesfully cloned: $target_dir\\n"
    fi

    cd "$target_dir" || fail_fn "Unable to change the working directory to: $target_dir"
}

build()
{
    echo
    echo "building $1 - version $2"
    echo '===================================='

    if [ -f "$packages/$1.done" ]; then
        if grep -Fx "$2" "$packages/$1.done" >/dev/null; then
            echo "$1 version $2 is already built. Remove $packages/$1.done lockfile to rebuild it."
            return 1
        else
            echo "$1 is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove $packages/$1.done lockfile."
            return 1
        fi
    fi

    return 0
}

curl_timeout='10'

git_1_fn()
{
    local curl_cmd github_repo github_url g_sver g_sver1

    # SCRAPE GITHUB'S API FOR THE LATEST REPO VERSION
    github_repo="$1"
    github_url="$2"
    git_token='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'

    if curl_cmd="$(curl \
                        -m "$curl_timeout" \
                        --request GET \
                        --url "https://api.github.com/slyfox1186" \
                        --header "Authorization: Bearer $git_token" \
                        --header "X-GitHub-Api-Version: 2022-11-28" \
                        -sSL "https://api.github.com/repos/$github_repo/$github_url")"; then
        g_sver="$(echo "$curl_cmd" | jq -r '.[0].tag_name' 2>/dev/null)"
        g_sver1="$(echo "$curl_cmd" | jq -r '.[0].name' 2>/dev/null)"
        g_ver="${g_sver#v}"
        g_ver1="${g_sver1#v}"
    fi
}

git_2_fn()
{
    gitlab_repo="$1"
    github_url="$2"

    if curl_cmd="$(curl -m "$curl_timeout" -sSL "https://gitlab.kitware.com/api/v4/projects/$gitlab_repo/repository/$github_url")"; then
        g_ver="$(echo "$curl_cmd" | jq -r '.[0].name')"
        g_ver="${g_ver#v}"
    fi
}

git_ver_fn()
{
    local t_flag u_flag v_flag v_tag v_url

    v_url="$1"
    v_tag="$2"

    if [ -n "$3" ]; then
        v_flag="$3"
    fi

    case "$v_flag" in
            R)      t_flag='releases';;
            T)      t_flag='tags';;
            *)      fail_fn 'Could not detect the variable $v_flag.'
    esac

    case "$v_tag" in
            1)      u_flag='git_1_fn';;
            2)      u_flag='git_2_fn';;
            *)      fail_fn 'Could not detect the variable $v_tag.'
    esac

    "$u_flag" "$v_url" "$t_flag" 2>/dev/null
}

build_done()
{
    echo "$2" >"$packages/$1.done"
}

installed()
{
    return $(dpkg-query -W -f '${Status}\n' "$1" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}')
}

#
# PRINT SCRIPT BANNER
#

printf "%s\n%s\n%s" \
    "Build gcc-13 script: v$script_ver" \
    '===================================='

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(autoconf autogen automake build-essential ccache curl gcc-12-base git gnat jq libadacgi4
      libadacgi4-dev libeigen3-dev libgm2-10-dev libgm2-15 libgnat-util10 libquadmath0 m4
      libgmp3-dev libmpfr-dev libgcc-12-dev gcc-multilib)

for pkg in ${pkgs[@]}; do
    if ! installed "$pkg"; then
        missing_pkgs+=" $pkg"
    fi
done

if [ -n "$missing_pkgs" ]; then
    printf "%s\n%s\n\n" \
        'Installing required apt packages' \
        '================================================'
    for i in "$missing_pkgs"; do
        echo "\$ sudo apt -y install $i"
        sudo apt -y install $i
        echo
    done
fi

#
# SET THE C & C++ COMPILERS
#

type -P gcc &>/dev/null && export CC=gcc CXX=g++

# SET THE C++ COMPILER OPTIMIZATION FLAGS TO TUNE THE BUILD FOR THE SPECIFIC COMPUTER RUNNING THE SCRIPT
export CXXFLAGS='-g -O3 -march=native -mtune=native'

#
# INSTALL FROM SOURCE CODE
#

if build 'autoconf' '2.69'; then
    download 'https://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.xz' 'autoconf-2.69.tar.xz'
    execute ./configure --prefix="$workspace" M4='/usr/bin/m4'
    execute make "-j$(($cpu_threads-1))"
    execute make install
    build_done 'autoconf' '2.69'
fi

if build 'libtool' '2.4.6'; then
    download 'https://ftp.gnu.org/gnu/libtool/libtool-2.4.6.tar.xz'
    execute ./configure --prefix="$workspace" --disable-shared
    execute make "-j$(($cpu_threads-1))"
    execute make install
    execute make distclean
    build_done 'libtool' '2.4.6'
fi

git_ver_fn 'madler/zlib' '1' 'R'
if build 'zlib' "$g_ver"; then
    download "https://github.com/madler/zlib/releases/download/v$g_ver/zlib-$g_ver.tar.gz" "zlib-$g_ver.tar.gz"
    execute ./configure --prefix='/usr/local'
    execute make "-j$(($cpu_threads-1))"
    execute sudo make install
    build_done 'zlib' "$g_ver"
fi

git_ver_fn '541' '2' 'T'
if build 'cmake' '3.26.3'; then
    download 'https://gitlab.kitware.com/cmake/cmake/-/archive/v3.26.3/cmake-v3.26.3.tar.bz2' 'cmake-3.26.3.tar.bz2'
    execute ./configure --prefix="$workspace" --parallel="$cpu_threads" --enable-ccache -- -DCMAKE_USE_OPENSSL=OFF
    execute make "-j$(($cpu_threads-1))"
    execute make install
    build_done 'cmake' '3.26.3'
fi

git_ver_fn 'ninja-build/ninja' '1' 'T'
if build 'ninja' "$g_ver1"; then
    download "https://codeload.github.com/ninja-build/ninja/tar.gz/refs/tags/v$g_ver1" "ninja-$g_ver1.tar.gz"
    re2c_path="$(type -P re2c)"
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} \
        -DRE2C="$re2c_path" -DBUILD_TESTING=OFF -G 'Unix Makefiles' -Wno-dev
    execute make "-j$(($cpu_threads-1))" -C build
    execute make -C build install
    build_done 'ninja' "$g_ver1"
fi

git_ver_fn 'nicolapiccinelli/libmpc' '1' 'R'
if build 'libmpc' "$g_ver"; then
    download 'https://codeload.github.com/nicolapiccinelli/libmpc/tar.gz/refs/tags/0.4.0' "libmpc-$g_ver.tar.gz"
    execute sudo bash configure.sh
    execute cmake -B build -DCMAKE_{INSTALL_PREFIX="$workspace",BUILD_TYPE=Release} \
        -DNLopt_DIR='/usr/local/lib/cmake/nlopt' -Dosqp_DIR='/usr/local/lib/cmake/osqp' -DEigen3_DIR='/usr/share/eigen3/cmake' \
        -G 'Ninja' -Wno-dev
    execute ninja "-j$(($cpu_threads-1))" -C build
    execute ninja "-j$(($cpu_threads-1))" -C build install
    build_done 'libmpc' "$g_ver"
fi

git_ver_fn 'mesonbuild/meson' '1' 'T'
if build 'meson' "$g_ver1"; then
    download "https://codeload.github.com/mesonbuild/meson/tar.gz/refs/tags/$g_ver1" "meson-$g_ver1.tar.gz"
    execute python3 setup.py build
    execute python3 setup.py install --prefix="$workspace"
    build_done 'meson' "$g_ver1"
fi

if build 'gmp' '6.2.1'; then
    download 'https://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.2.1.tar.bz2' 'gmp-6.2.1.tar.bz2'
    execute autoreconf -fi
    execute ./configure --prefix="$workspace" --disable-shared --enable-cxx --build=amd64
    execute make "-j$(($cpu_threads-1))"
    execute make install
    build_done 'gmp' '6.2.1'
fi

if build 'mpfr' '4.1.0'; then
    download 'https://gcc.gnu.org/pub/gcc/infrastructure/mpfr-4.1.0.tar.bz2' 'mpfr-4.1.0.tar.bz2'
    execute ./configure --prefix="$workspace" --disable-shared --enable-lto --with-gmp="$workspace"
    execute make "-j$(($cpu_threads-1))"
    execute make install
    build_done 'mpfr' '4.1.0'
fi

if build 'mpc' '4.1.0'; then
    download 'https://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.2.1.tar.gz' 'mpc-1.2.1.tar.gz'
    execute autoreconf -fi
    execute ./configure --prefix="$workspace" --disable-shared --with-{gmp="$workspace",mpfr="$workspace"}
    execute make "-j$(($cpu_threads-1))"
    execute make install
    build_done 'mpc' '4.1.0'
fi

if build 'libelf' 'git'; then
    download_git 'https://github.com/WolfgangSt/libelf.git' 'libelf-git'
    execute mv configure.in configure.ac
    execute autoreconf -fi
    execute ./configure --prefix="$workspace"
    execute make "-j$(($cpu_threads-1))"
    execute make install
    build_done 'libelf' 'git'
fi

if [ -d "$packages/lto-4.1.0" ]; then
    sudo rm -fr "$packages/lto-4.1.0"
fi

#if build 'lto' '4.1.0'; then
#    execute svn co 'svn://gcc.gnu.org/svn/gcc/branches/lto' "$packages/lto-4.1.0"
#    cd "$packages/lto-4.1.0" || exit 1
#    mkdir builddir
#    cd builddir || exit 1
#    execute ../configure --prefix="$workspace"  --with-libelf="$workspace"
#    execute make "-j$(($cpu_threads-1))"
#    execute make install
#    build_done 'lto' '4.1.0'
#fi

if build 'gcc-11.4.0' '11.4.0'; then
    download 'https://codeload.github.com/gcc-mirror/gcc/tar.gz/refs/tags/releases/gcc-11.4.0' 'gcc-11.4.0.tar.gz'
    execute autoreconf -fi
    execute ./configure \
        --prefix="$workspace" \
        --enable-bootstrap \
        --disable-{multilib,werror} \
        --with-{gcc-major-version-only,gmp="$workspace",mpc="$workspace",mpfr="$workspace",static-standard-libraries,system-zlib}
    echo '$ This is going to take a while...'
    execute make "-j$(($cpu_threads-1))"
    execute make install
    execute libtool --finish "$workspace/libexec/gcc/x86_64-pc-linux-gnu/11"
    build_done 'gcc-11.4.0' '11.4.0'
fi


# LDCONFIG MUST BE RUN NEXT IN ORDER TO UPDATE FILE CHANGES
sudo ldconfig 2>/dev/null

# SHOW THE NEWLY INSTALLED VERSION OF EACH PACKAGE
show_versions_fn

# PROMPT THE USER TO CLEANUP THE BUILD FILES
cleanup_fn

# SHOW THE EXIT MESSAGE
exit_fn
