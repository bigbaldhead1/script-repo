#!/bin/bash

###################################################################
##
##  Install OpenSSL from source code with multiple optional
##  features enabled.
## 
##  The script also installs SCTP Module Support which allows OpenSSL
##  to enable its own SCTP feature support. 
##  
##  Enabled features: egd, fips, md2, rc5, trace, sctp, threads
##
##  Updated: 07.17.23
##
##  Script version: 1.1
##
###################################################################

clear

#
# SET PROGRAM NAME + VERSION
#

script_ver=1.1
archive_dir=openssl-3.1.1
archive_url=https://github.com/openssl/openssl/releases/download/openssl-3.1.1/openssl-3.1.1.tar.gz
archive_ext="${archive_url//*.}"
cwd="$PWD"/openssl-build-script
install_dir=/usr/local
ssl_dir="$install_dir"/lib/ssl
cert_dir="$ssl_dir"/certs
pem_filename=cacert.pem
pem_output="$cert_dir/$pem_filename"
repo=https://github.com/slyfox1186/script-repo

printf "\n%s\n%s\n\n" \
    "OpenSSL Build Script - v$script_ver" \
    '==============================================='

#
# CREATE OUTPUT DIRECTORY
#

mkdir -p "$cwd"

#
# SET THE C+CPP COMPILERS
#

export CC=gcc CXX=g++

#
# EXPORT COMPILER OPTIMIZATION FLAGS
#

export {CFLAGS,CXXFLAGS}='-g -O3 -march=native -D_REENTRANT'

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n" 'The script has completed.'
    exit 0
}

cleanup_fn()
{
    local choice

    printf "\n%s\n%s\n%s\n\n%s\n%s\n\n" \
        '============================================' \
        '  Do you want to clean up the build files?  ' \
        '============================================' \
        '[1] Yes' \
        '[2] No'
    read -p 'Your choices are (1 or 2): ' choice

    case "$choice" in
        1)      sudo rm -fr "$cwd";;
        2)      echo;;
        *)
                clear
                printf "%s\n\n" 'Bad user input. Reverting script...'
                sleep 3
                unset choice
                clear
                cleanup_fn
                ;;
    esac
}

fail_fn()
{
    printf "%s\n\n" "$1"
    exit 1
}

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(autoconf autogen automake build-essential ca-certificates ccache curl libc-ares-dev libcurl4-openssl-dev
      libdmalloc-dev libgcrypt20-dev libgmp-dev libgpg-error-dev libjemalloc-dev libmbedtls-dev libsctp-dev
      libssh2-1-dev libssh-dev libssl-dev libxml2-dev zlib1g-dev)

for i in ${pkgs[@]}
do
    missing_pkg="$(dpkg -l | grep $i)"

    if [ -z "$missing_pkg" ]; then
        missing_pkgs+=" $i"
    fi
done
unset i

if [ -n "$missing_pkgs" ]; then
    sudo apt -y install $missing_pkgs
    clear
fi

#
# INSTALL CA CERTS FROM CURL'S OFFICIAL WEBSITE
#

if [ ! -f "$cert_dir/$pem_filename" ]; then
    printf "%s\n%s\n\n" \
        'Download the latest security certificate' \
        '================================================'
    curl -Lso "$cwd/$pem_filename" "https://curl.se/ca/$pem_filename"
    sudo mv -f "$cwd/$pem_filename" "$cert_dir/$pem_filename"
fi

#
# DOWNLOAD ARCHIVE FILE
#

archive_name="$archive_dir.tar.$archive_ext"

if [ ! -f "$cwd/$archive_name" ]; then
    curl -Lso "$cwd/$archive_name" "$archive_url"
fi

#
# CREATE OUTPUT DIRECTORY
#

if [ -d "$cwd/$archive_dir" ]; then
    sudo rm -fr "$cwd/$archive_dir"
fi
mkdir -p "$cwd/$archive_dir/build"

#
# EXTRACT ARCHIVE FILES
#

if ! tar -xf "$cwd/$archive_name" -C "$cwd/$archive_dir" --strip-components 1; then
    printf "%s\n\n" "Failed to extract: $cwd/$archive_name"
    exit 1
fi

#
# BUILD PROGRAM FROM SOURCE
#

cd "$cwd/$archive_dir/build" || exit 1
../Configure --prefix="$install_dir"          \
             --openssldir="$ssl_dir"          \
             --with-rand-seed=os              \
             --with-zlib-include=/usr/include \
             --with-zlib-lib=/usr/lib         \
             enable-egd                       \
             enable-fips                      \
             enable-md2                       \
             enable-rc5                       \
             enable-trace                     \
             sctp                             \
             threads                          \
             zlib
make "-j$(nproc --all)"
if ! sudo make install; then
    fail_fn 'Failed to execute: sudo make install'
fi

if ! sudo make install_fips; then
    fail_fn 'Failed to execute: sudo make install_fips'
fi

# REQUIRED FOR FIPS FUNCTIONALITY TO WORK
sudo openssl fipsinstall

# ENSURE THE CORRECT PERMISSIONS ARE ATTACHED TO THE CUSTOM PEM FILE THAT WAS ADDED
if [ -f "$pem_output" ]; then
    sudo chmod 644 "$pem_output"
fi

# CLEANUP FILES
cleanup_fn
# SHOW EXIT MESSAGE
exit_fn
