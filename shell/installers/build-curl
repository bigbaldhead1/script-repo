#!/bin/bash
# shellcheck disable=SC2016,SC2034,SC2046,SC2066,SC2068,SC2086,SC2162,SC2317

####################################
#
# Install curl latest curl release
#
# Supported OS: Linux Debian based
#
#####################################

clear

#
# create global variables
#

parent_dir="$PWD"
packages="$PWD"/packages
workspace="$PWD"/workspace

export PATH="$PATH:/usr/local/share/ca-certificates"

PKG_CONFIG_PATH="\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/share/emscripten/system/lib/pkgconfig:\
/usr/share/emscripten/cache/sysroot/lib/pkgconfig:\
/usr/share/pkgconfig\
"
export PKG_CONFIG_PATH

LD_LIBRARY_PATH="\
/usr/lib:\
/usr/lib/usrmerge/lib:\
/usr/lib/jvm/java-17-openjdk-amd64/lib:\
/usr/lib/debug/usr/lib:\
/usr/local/lib:\
/usr/share/texinfo/lib:\
/usr/share/alsa/ucm2/lib:\
/usr/share/gdb/auto-load/lib:\
/usr/share/lintian/lib:\
/usr/share/ghostscript/10.00.0/lib\
"
export LD_LIBRARY_PATH

CFLAGS="\
-I/usr/include \
-I/usr/local/include\
"
export CFLAGS

#
# create output directories
#

mkdir -p "$packages" "$parent_dir" "$workspace"

#
# define functions
#

fail_fn()
{
    printf "\n%s\n\n%s\n\n" \
        "$1" \
        'Please submit a support ticket in GitHub.'
    exit 1
}

exit_fn()
{
    echo
    printf "%s\n\n%s\n\n" \
        'Make sure to star this repository to show your support!' \
        'https://github.com/slyfox1186/script-repo/'
    exit 0
}

cleanup_fn()
{
    printf "\n%s\n\n%s\n%s\n\n" \
        'Do you want to cleanup the build files?' \
        '[1] Yes' \
        '[2] No'
        read -p 'Your choices are (1 or 2): ' pychoice
        case "$pychoice" in
            1)
                    remove_dir "$parent_dir"
                    exit_fn
                    ;;
            2)
                    exit_fn
                    ;;
            *)
                    read -p 'Bad user input. Press enter to try again'
                    clear
                    cleanup_fn
                    ;;
        esac
}

success_fn()
{
    printf "\n%s\n\n" \
        'The installed curl version is shown below.'
    sudo curl --version 2>/dev/null
    cleanup_fn
}

# PULL THE LATEST VERSIONS OF EACH PACKAGE FROM THE WEBSITE API
curl_timeout='10'

git_1_fn()
{
    # SCRAPE GITHUB WEBSITE FOR LATEST REPO VERSION
    github_repo="$1"
    github_url="$2"

    if curl_cmd="$(curl -m "$curl_timeout" -sSL "https://api.github.com/repos/$github_repo/$github_url")"; then
        g_url="$(echo "$curl_cmd" | jq -r '.[0].tarball_url' 2>/dev/null)"
        g_ver="$(echo "$curl_cmd" | jq -r '.[0].name' 2>/dev/null)"
        g_ver="${g_ver#v}"
        g_ver="${g_ver#OpenJPEG }"
        g_ver="${g_ver#OpenSSL }"
        g_ver="${g_ver#pkgconf-}"
        g_ver="${g_ver#lcms}"
    fi
}

git_ver_fn()
{
    local v_flag v_tag url_tag

    v_url="$1"
    v_tag="$2"

    if [ -n "$3" ]; then
        v_flag="$3"
    fi

    case "$v_flag" in
        T)
            gv_url='tags';;
        R)
            gv_url='releases';;
        L)
            gv_url='releases/latest';;
    esac

    url_tag='git_1_fn'

    "$url_tag" "$v_url" "$gv_url" 2>/dev/null
}

execute()
{
    echo "$ $*"
#  2>&1
    if ! output=$("$@"); then
        fail_fn "Failed to Execute $*"
    fi
}

make_dir()
{
    remove_dir "$*"
    if ! mkdir "$*"; then
        printf "\n Failed to create dir %s" "$*"
        echo
        exit 1
    fi
}

remove_file()
{
    if [ -f "$*" ]; then
        sudo rm -f "$*"
    fi
}

remove_dir()
{
    if [ -d "$*" ]; then
        sudo rm -fr "$*"
    fi
}

download()
{
    dl_path="$packages"
    dl_url="$1"
    dl_file="${2:-"${1#*/}"}"

    if [[ "$dl_file" =~ tar. ]]; then
        target_dir="${dl_file%.*}"
        target_dir="${3:-"${target_dir%.*}"}"
    else
        target_dir="${3:-"${dl_file%.*}"}"
    fi

    if [ -d "$dl_path/$target_dir" ]; then
        remove_dir "$dl_path/$target_dir"
    fi

    if [ ! -f "$dl_path/$dl_file" ]; then
        echo "Downloading $dl_url as $dl_file"
        if ! $downloader -Lso "$dl_path/$dl_file" "$dl_url"; then
            echo
            echo "The script failed to download \"$dl_url\" and will try again in 10 seconds"
            sleep 10
            echo
            if ! $downloader -Lso "$dl_path/$dl_file" "$dl_url"; then
                fail_fn "The script failed to download \"$dl_url\" two times and will exit the build"
            fi
        fi
        echo 'Download Completed'
    else
        echo "$dl_file is already downloaded"
    fi

    make_dir "$dl_path/$target_dir"

    if [ -n "$3" ]; then
        if ! tar -xf "$dl_path/$dl_file" -C "$dl_path/$target_dir" 2>/dev/null >/dev/null; then
            fail_fn "Failed to extract $dl_file"
        fi
    else
        if ! tar -xf "$dl_path/$dl_file" -C "$dl_path/$target_dir" --strip-components 1 2>&1; then
            fail_fn "Failed to extract $dl_file"
        fi
    fi

    echo "File extracted: $dl_file"
    echo

    cd "$dl_path/$target_dir" || fail_fn "Unable to change the working directory to $target_dir"
}

build()
{
    echo
    echo "building $1 - version $2"
    echo '===================================='

    if [ -f "$packages/$1.done" ]; then
    if grep -Fx "$2" "$packages/$1.done" >/dev/null; then
            echo "$1 version $2 already built. Remove $packages/$1.done lockfile to rebuild it."
            return 1
        else
            echo "$1 is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove $packages/$1.done lockfile."
            return 1
        fi
    fi

    return 0
}

build_done() { echo "$2" > "$packages/$1.done"; }

installed() { return $(dpkg-query -W -f '${Status}\n' "$1" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}'); }

#
# Figure out which compilers to use
#

if which 'gcc-13' &>/dev/null; then
    export CC='gcc-13'
elif which 'gcc-12' &>/dev/null; then
    export CC='gcc-12'
elif which 'gcc-11' &>/dev/null; then
    export CC='gcc-11'
elif which 'gcc' &>/dev/null; then
    export CC='gcc'
else
    fail_fn 'You must have gcc or some high version of it installed. Please do so and run the script again.'
fi

if which 'g++-12' &>/dev/null; then
    export CXX='g++-12'
elif which 'g++-11' &>/dev/null; then
    export CXX='g++-11'
elif which 'g++' &>/dev/null; then
    export CXX='g++'
else
    fail_fn 'You must have g++ or some high version of it installed. Please do so and run the script again.'
fi

export CXXFLAGS='-g -O3 -march=native'

#
# get cpu coure count for parallel processing
#

if [ -f '/proc/cpuinfo' ]; then
    cpu_threads="$(grep -c ^processor '/proc/cpuinfo')"
else
    cpu_threads="$(nproc --all)"
fi
cpu_cores="$(grep ^cpu\\scores '/proc/cpuinfo' | uniq | awk '{print $4}')"

# create txt files to check versions
ver_file_tmp="$workspace/latest-versions-tmp.txt"
ver_file="$workspace/latest-versions.txt"
if [ ! -f "$ver_file_tmp" ] || [ ! -f "$ver_file" ]; then
    touch "$ver_file_tmp" "$ver_file" 2>/dev/null
fi

#
# install required apt packages
#

pkgs=(build-essential ccache gcc-12 jq lcov libbrotli-dev libc-ares-dev libcurl4-openssl-dev \
      libec-dev libgcc-12-dev libgsasl7-dev libgsasl-dev libldap2-dev libldap-dev libmbedtls-dev \
      libnghttp2-dev libnghttp3-dev libnghttp3-dev libntlm0-dev libpsl-dev librtmp-dev libssh2-1-dev \
      libzstd-dev make nghttp2 openssl pkg-config libgnutls28-dev)

for pkg in ${pkgs[@]}
do
    if ! installed "$pkg"; then
        missing_pkgs+=" $pkg"
    fi
done

if [ -n "${missing_pkgs-}" ]; then
    printf "%s\n%s\n\n" \
        'Installing required apt packages' \
        '================================================'
        for i in "$missing_pkgs"
    do
        echo "\$ sudo apt -y install $i"
        sudo apt -y install $i
        echo
    done
fi

#
# run the bootstrap file to generate essential files
#

git_ver_fn 'c-ares/c-ares' '1' 'R'
if build 'c-ares' "$g_ver"; then
    download "$g_url" "c-ares-$g_ver.tar.gz"
    make_dir 'build'
    execute cmake -B 'build' -DCMAKE_INSTALL_PREFIX="$workspace" -DCARES_SHARED='0' -DCARES_STATIC_PIC='1' \
        -DCARES_STATIC='1' -DCMAKE_CXX_COMPILER='/usr/lib/ccache/g++-12' -DCMAKE_BUILD_TYPE='Release' \
        -DBUILD_SHARED_LIBS='OFF' -G 'Ninja' -Wno-dev CXXFLAGS='-O3 -march=native'
    execute ninja "-j$cpu_threads" -C 'build'
    execute ninja "-j$cpu_threads" -C 'build' install
    build_done 'c-ares' "$g_ver"
fi

git_ver_fn 'curl/curl' '1' 'R'
if build 'curl' "$g_ver"; then
    download "$g_url" "curl-$g_ver.tar.gz"
    execute sudo update-ca-certificates
    execute $downloader -s --remote-name 'https://curl.se/ca/cacert-2023-01-10.pem'
    execute sudo mv 'cacert-2023-01-10.pem' '/etc/ssl/certs' 2>/dev/null
    execute autoreconf -fi
    ./configure --prefix='/usr' --disable-shared --enable-static --enable-optimize --enable-ares="$workspace/include" \
        --enable-http --enable-ftp --enable-file --enable-ldap --enable-ldaps --enable-rtsp --enable-proxy --enable-dict --enable-telnet \
        --enable-tftp --enable-pop3 --enable-imap --enable-smb --enable-smtp --enable-gopher --enable-mqtt --disable-manual \
        --enable-libcurl-option --enable-libgcc --enable-ipv6 --enable-openssl-auto-load-config --disable-versioned-symbols \
        --enable-threaded-resolver --enable-pthreads --disable-verbose --enable-sspi --enable-crypto-auth --enable-ntlm  \
        --enable-ntlm-wb='/usr/bin/ntlm_auth' --enable-tls-srp --enable-unix-sockets --enable-cookies --enable-socketpair \
        --enable-http-auth --enable-doh --enable-mime --enable-dateparse --enable-netrc --enable-progress-meter --enable-dnsshuffle \
        --enable-get-easy-options --enable-alt-svc --enable-headers-api --enable-hsts --enable-websockets --enable-year2038 \
        --with-gnutls='/usr/include' --without-hyper --with-zlib='/usr/include/boost/beast' --with-brotli='/usr/include' \
        --with-ca-bundle='/etc/ssl/certs/ca-certificates.crt' --with-ca-path='/etc/ssl/certs' --with-ca-fallback --with-libssh2 \
        --with-wolfssh --with-nghttp2='/usr/include' --with-nghttp3='/usr/include' CXXFLAGS='-O3 -march=native'
    execute make "-j$cpu_threads"
    execute sudo make install
    build_done 'curl' "$g_ver"
fi

# output final messages to user in terminal
success_fn
