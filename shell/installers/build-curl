#!/bin/bash
# shellcheck disable=SC2016,SC2034,SC2046,SC2066,SC2068,SC2086,SC2162,SC2317

################################################
##
##  Install the latest curl release from GitHub
##
##  Supported OS: Debian based OS
##
##  Updated: 06.02.23
##
##  Script version: 4.0
##
################################################

echo

script_ver='4.0'
cwd="$PWD"/curl-build-script
packages="$cwd"/packages
workspace="$cwd"/workspace
curl_flags=()
install_dir='/usr/local'

#
# CREATE OUTPUT DIRECTORIES
#

mkdir -p "$packages" "$workspace"

#
# GET CPU CORE COUNT FOR PARALLEL PROCESSING
#

if [ -f '/proc/cpuinfo' ]; then
	cpu_threads="$(grep -c ^processor '/proc/cpuinfo')"
else
	cpu_threads="$(nproc --all)"
fi

#
# PRINT BANNER
#

printf "%s\n%s\n%s\n" \
	"cURL Build Script v$script_ver" \
	'===============================' \
	"This script will utilize ($cpu_threads cpu cores) for parallel processing to accelerate the building processes."

#
# CREATE GLOBAL VARIABLES
#

PATH="\
/usr/lib/ccache:\
$workspace/bin:\
$HOME/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin\
"
export PATH

PKG_CONFIG_PATH="\
$workspace/lib64/pkgconfig:\
$workspace/lib/pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/lib64/pkgconfig:\
/usr/lib/x86_64-linux-gnu/lib/x86_64-linux-gnu/pkgconfig:\
/usr/lib/x86_64-linux-gnu/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/lib/i386-linux-gnu/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/share/pkgconfig\
"
export PKG_CONFIG_PATH

#
# DEFINE FUNCTIONS
#

fail_fn() {
	printf "\n%s\n\n%s\n\n" \
		"$1" \
		'Please submit a support ticket in GitHub.'
	exit 1
}

exit_fn() {
	printf "\n%s\n\n%s\n\n" \
		'Make sure to star this repository to show your support!' \
		'https://github.com/slyfox1186/script-repo/'
	exit 0
}

cleanup_fn() {
	printf "\n%s\n\n%s\n%s\n\n" \
		'Do you want to cleanup the build files?' \
		'[1] Yes' \
		'[2] No'
	read -p 'Your choices are (1 or 2): ' pychoice
	case "$pychoice" in
	1)
		sudo rm -fr "$cwd"
		exit_fn
		;;
	2)
		exit_fn
		;;
	*)
		read -p 'Bad user input. Press enter to try again'
		clear
		cleanup_fn
		;;
	esac
}

success_fn() {
	curl_ver="$(curl --version)"
	printf "\n%s\n\n" \
		"The installed curl version is: $curl_ver"
	cleanup_fn
}

curl_timeout='10'

git_1_fn() {
	# SCRAPE GITHUB WEBSITE FOR LATEST REPO VERSION
	github_repo="$1"
	github_url="$2"
	git_token='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'

	if curl_cmd="$(curl \
		-m "$curl_timeout" \
		--request GET \
		--url "https://api.github.com/slyfox1186" \
		--header "Authorization: Bearer $git_token" \
		--header "X-GitHub-Api-Version: 2022-11-28" \
		-sSL "https://api.github.com/repos/$github_repo/$github_url")"; then
		g_url="$(echo "$curl_cmd" | jq -r '.[0].tarball_url' 2>/dev/null)"
		g_ver="$(echo "$curl_cmd" | jq -r '.[0].name' 2>/dev/null)"
		g_ver="${g_ver#cares-}"
		g_ver="${g_ver#nghttp2 v}"
		g_ver="${g_ver#nghttp3 v}"
		g_ver="${g_ver#OpenSSL }"
		g_ver="${g_ver#v}"
	fi
}

git_2_fn() {
	local curl_cmd gitlab_repo github_url

	gitlab_repo="$1"
	github_url="$2"
	if curl_cmd="$(curl -m "$curl_timeout" -sSL "https://gitlab.gnome.org/api/v4/projects/$gitlab_repo/repository/$github_url")"; then
		g_ver="$(echo "$curl_cmd" | jq -r '.[0].name')"
		g_ver="${g_ver#v}"
	fi
}

git_6_fn() {
	gitlab_repo="$1"
	if curl_cmd="$(curl -m "$curl_timeout" -sSL "https://gitlab.gnome.org/api/v4/projects/$gitlab_repo/repository/tags")"; then
		g_ver="$(echo "$curl_cmd" | jq -r '.[0].name')"
		g_ver="${g_ver#v}"
	fi
}

git_ver_fn() {
	local v_flag v_url v_tag url_tag gv_url

	v_url="$1"
	v_tag="$2"
	v_flag="$3"

	case "$v_flag" in
		T)	gv_url='tags';;
		R)	gv_url='releases';;
		*)	fail_fn 'tags and releases were not among the URL options.';;
	esac

	case "$v_tag" in
		1) url_tag='git_1_fn';;
		2) url_tag='git_2_fn';;
		6) url_tag='git_6_fn';;
	esac

	"$url_tag" "$v_url" "$gv_url" 2>/dev/null
}

execute() {
	echo "$ $*"
	# 2>&1
	if ! output=$("$@"); then
		fail_fn "Failed to Execute $*"
	fi
}

download() {
	dl_path="$packages"
	dl_url="$1"
	dl_file="${2:-"${1#*/}"}"

	if [[ "$dl_file" =~ tar. ]]; then
		output_dir="${dl_file%.*}"
		output_dir="${3:-"${output_dir%.*}"}"
	else
		output_dir="${3:-"${dl_file%.*}"}"
	fi

	target_file="$dl_path/$dl_file"
	target_dir="$dl_path/$output_dir"

	if [ -f "$target_file" ]; then
		echo "The file \"$dl_file\" is already downloaded."
	else
		echo "Downloading \"$dl_url\" and saving as \"$dl_file\""
		if ! wget -cqO "$target_file" "$dl_url"; then
			printf "\n%s\n\n" "The script failed to download \"$dl_file\" and will try again in 5 seconds..."
			sleep 5
			if ! wget -cqO "$target_file" "$dl_url"; then
				fail_fn "The script failed to download \"$dl_file\" twice and will now exit."
			fi
		fi
		echo 'Download Completed'
	fi

	if [ -d "$target_dir" ]; then
		sudo rm -fr "$target_dir"
	fi

	mkdir -p "$target_dir"

	if [ -n "$3" ]; then
		if ! tar -xf "$target_file" -C "$target_dir" 2>/dev/null >/dev/null; then
			fail_fn "Failed to extract: $dl_file"
		fi
	else
		if ! tar -xf "$target_file" -C "$target_dir" --strip-components 1 2>/dev/null >/dev/null; then
			fail_fn "Failed to extract: $dl_file"
		fi
	fi

	echo -e "File extracted: $dl_file\\n"

	cd "$target_dir" || fail_fn "Unable to change the working directory to: $target_dir"
}

download_git()
{
	local dl_path dl_url dl_file target_dir

	dl_path="$packages"
	dl_url="$1"
	dl_file="$2"
	target_dir="$dl_path/$dl_file"

	if [ -d "$target_dir" ]; then
		sudo rm -fr "$target_dir"
	fi

	echo "Downloading $dl_url as $dl_file"
	if ! git clone -q "$dl_url" "$target_dir"; then
		printf "\n%s\n\n" "The script failed to clone the git repository \"$target_dir\" and will try again in 10 seconds..."
		sleep 10
		if ! git clone -q "$dl_url" "$target_dir"; then
			fail_fn "The script failed to clone \"$target_dir\" twice and will now exit the build."
		fi
	else
		echo -e "Succesfully cloned: $target_dir\\n"
	fi

	cd "$target_dir" || fail_fn "Unable to change the working directory to: $target_dir"
}

build() {
	echo
	echo "building $1 - version $2"
	echo '===================================='

	if [ -f "$packages/$1.done" ]; then
		if grep -Fx "$2" "$packages/$1.done" >/dev/null; then
			echo "$1 version $2 already built. Remove $packages/$1.done lockfile to rebuild it."
			return 1
		else
			echo "$1 is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove $packages/$1.done lockfile."
			return 1
		fi
	fi

	return 0
}

build_done() { echo "$2" >"$packages/$1.done"; }

installed() { return $(dpkg-query -W -f '${Status}\n' "$1" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}'); }

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(autoconf autogen automake autotools-dev build-essential ccache cmake curl jq lcov libcunit1-dev libcurl4-gnutls-dev libec-dev libev-dev libevent-dev \
      libgnutls28-dev libgsasl7-dev libgsasl-dev libjansson-dev libjemalloc-dev libldap2-dev libldap-dev liblzma-dev libmbedtls-dev libngtcp2-dev libntlm0-dev \
      libpsl-dev librtmp-dev libssh2-1-dev libssh-dev libtool libzstd-dev m4 pkg-config python3-pip re2c)

for pkg in ${pkgs[@]}
do
	if ! installed "$pkg"; then
		missing_pkgs+=" $pkg"
	fi
done

if [ -n "$missing_pkgs" ]; then
	printf "%s\n%s\n\n" \
		'Installing required apt packages' \
		'================================================'
	for i in "$missing_pkgs"; do
		echo "\$ sudo apt -y install $i"
		sudo apt -y install $i
		echo
	done
fi

#
# FIGURE OUT WHICH COMPILERS TO USE
#

if which 'gcc-13' &>/dev/null; then
	export CC='gcc-13'
elif which 'gcc-12' &>/dev/null; then
	export CC='gcc-12'
elif which 'gcc-11' &>/dev/null; then
	export CC='gcc-11'
elif which 'gcc-10' &>/dev/null; then
	export CC='gcc-10'
elif which 'gcc' &>/dev/null; then
	export CC='gcc'
else
	fail_fn 'You must have "gcc" or some higher version of it installed. Please do so and run the script again.'
fi

if which 'g++-12' &>/dev/null; then
	export CXX='g++-12'
elif which 'g++-11' &>/dev/null; then
	export CXX='g++-11'
elif which 'g++-10' &>/dev/null; then
	export CXX='g++-10'
elif which 'g++' &>/dev/null; then
	export CXX='g++'
else
	fail_fn 'You must have "g++" or some higher version of it installed. Please do so and run the script again.'
fi

#
# START BUILDING FROM SOURCE
#

git_ver_fn 'madler/zlib' '1' 'T'
if build 'zlib' "$g_ver"; then
	download "$g_url" "zlib-$g_ver.tar.gz"
	execute ./configure --prefix="$workspace" --static --64
	execute make "-j$cpu_threads"
	execute make install
	build_done 'zlib' "$g_ver"
fi

git_ver_fn 'google/brotli' '1' 'T'
if build 'brotli' "$g_ver"; then
	download "$g_url" "brotli-$g_ver.tar.gz"
	execute python3 setup.py build
	execute python3 setup.py install --prefix="$workspace"
	build_done "brotli" "$g_ver"
fi

git_ver_fn 'c-ares/c-ares' '1' 'R'
if build 'c-ares' "$g_ver"; then
	download "$g_url" "c-ares-$g_ver.tar.gz"
	execute cmake -B 'build' -DCMAKE_INSTALL_PREFIX="$workspace" -DCARES_SHARED='OFF' -DCARES_STATIC_PIC='ON' \
		-DCARES_STATIC='ON' -DCMAKE_BUILD_TYPE='Release' -DBUILD_SHARED_LIBS='OFF' -Wno-dev
	execute make "-j$cpu_threads" -C 'build'
	execute make "-j$cpu_threads" -C 'build' install
	build_done 'c-ares' "$g_ver"
fi

git_ver_fn 'akheron/jansson' '1' 'T'
if build 'jansson' "$g_ver"; then
	download "$g_url" "jansson-$g_ver.tar.gz"
	execute cmake -B 'build' -DCMAKE_INSTALL_PREFIX="$workspace" -DJANSSON_INSTALL='ON' -DJANSSON_EXAMPLES='OFF' -DJANSSON_LIBRARIES='jansson' \
		-DJANSSON_INITIAL_HASHTABLE_ORDER='3' -DJANSSON_INCLUDE_DIRS="$packages/jansson-2.14/include;$workspace/include" \
		-DJANSSON_WITHOUT_TESTS='ON' -DJANSSON_BUILD_DOCS='OFF' -DJANSSON_BUILD_SHARED_LIBS='ON' -Wno-dev
	execute make "-j$cpu_threads" -C 'build'
	execute make "-j$cpu_threads" -C 'build' install
	build_done 'jansson' "$g_ver"
fi

git_ver_fn '1665' '6' 'T'
if build 'xml2' "$g_ver"; then
	download "https://gitlab.gnome.org/GNOME/libxml2/-/archive/v$g_ver/libxml2-v$g_ver.tar.bz2" "xml2-$g_ver.tar.bz2"
	execute cmake -B 'build' -DBUILD_SHARED_LIBS='OFF' -DCMAKE_EXPORT_COMPILE_COMMANDS='OFF' -DCMAKE_INSTALL_PREFIX="$workspace" \
		-DCMAKE_VERBOSE_MAKEFILE='OFF' -DCPACK_BINARY_DEB='ON' -DCPACK_BINARY_FREEBSD='ON' -DCPACK_BINARY_IFW='ON' -DCPACK_BINARY_NSIS='ON' \
		-DCPACK_BINARY_RPM='ON' -DCPACK_BINARY_TBZ2='ON' -DCPACK_BINARY_TXZ='ON' -DCPACK_SOURCE_RPM='ON' -DCPACK_SOURCE_ZIP='ON' -G 'Unix Makefiles' -Wno-dev
	execute make "-j$cpu_threads" -C 'build'
	execute make "-j$cpu_threads" -C 'build' install
	build_done 'xml2' "$g_ver"
fi
ffmpeg_libraries+=('--enable-libxml2')

git_ver_fn 'quictls/openssl' '1' 'R'
g_ver="$(echo $g_ver | sed 's/\-quic Release 1//g')"
if build 'openssl-qtls' "$g_ver"; then
	download "$g_url" "openssl-qtls-$g_ver.tar.gz"
	_RLD_LIB_PATH="$workspace"
	execute ./Configure --prefix="$workspace" --openssldir='/usr/local/ssl' --with-zlib-include="$workspace"/include --with-zlib-lib="$workspace"/lib no-shared zlib enable-tls1_3
	execute make "-j$cpu_threads"
	execute make install_sw
	build_done 'openssl-qtls' "$g_ver"
fi

git_ver_fn 'curl/curl' '1' 'R'
if build 'curl' "$g_ver"; then
	disable_opts=(--disable-{manual,shared,verbose,versioned-symbols})
	enable_opts=(--enable-{alt-svc,ares="$workspace"/include,cookies,crypto-auth,dateparse,dict,dnsshuffle,doh,file,ftp,get-easy-options,gopher})
	enable_opts+=(--enable-{headers-api,hsts,http,http-auth,imap,ipv6,ldap,ldaps,libcurl-option,libgcc,manual,mime,mqtt,netrc,ntlm,ntlm-wb='/usr/bin/ntlm_auth'})
	enable_opts+=(--enable-{openssl-auto-load-config,optimize,pop3,progress-meter,proxy,pthreads,rtsp,smb,smtp,socketpair,sspi,static,telnet,tftp,threaded-resolver})
	enable_opts+=(--enable-{tls-srp,unix-sockets,websockets})
	with_opts=(--with-{libssh2,nghttp2='/usr/include',nghttp3='/usr/include',brotli='/usr/include',gnutls='/usr/include'})
	with_opts+=(--with-{gssapi,wolfssh,zlib='/usr/include/boost/beast',ca-bundle='/etc/ssl/certs/ca-certificates.crt',ca-path='/etc/ssl/certs',ca-fallback})
	download "$g_url" "curl-$g_ver.tar.gz"
	if which 'update-ca-certificates' &>/dev/null; then
		execute sudo update-ca-certificates
	fi
	execute curl -s --remote-name 'https://curl.se/ca/cacert-2023-05-30.pem'
	execute sudo mv 'cacert-2023-05-30.pem' '/etc/ssl/certs'
	execute autoreconf -fi
	./configure \
		--prefix="$install_dir" \
		"${disable_opts[@]}" \
		"${enable_opts[@]}" \
		"${with_opts[@]}" \
		CXXFLAGS='-O3 -march=native' \
		CPPFLAGS="-I$workspace/include -I/usr/local/include -I/usr/include" \
		LDFLAGS="-L$workspace/lib -L/usr/local/lib -L/usr/lib"
	execute make "-j$cpu_threads"
	execute sudo make install
fi

# OUTPUT FINAL MESSAGES TO USER IN TERMINAL
success_fn

# CLEANUP LEFTOVER FILES
cleanup_fn
