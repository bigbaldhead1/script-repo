#!/bin/bash
# shellcheck disable=SC2016,SC2034,SC2046,SC2066,SC2068,SC2086,SC2162,SC2317

################################################
##
##  Install the latest curl release from GitHub
##
##  Supported OS: Debian based OS
##
##  Updated: 06.02.23
##
##  Script version: 3.0
##
################################################

echo

script_ver='3.0'
cwd="$PWD"/curl-build-script
packages="$cwd"/packages
workspace="$cwd"/workspace
install_dir='/usr/local'

#
# CREATE OUTPUT DIRECTORIES
#

mkdir -p "$packages" "$workspace"

#
# GET CPU CORE COUNT FOR PARALLEL PROCESSING
#

if [ -f '/proc/cpuinfo' ]; then
	cpu_threads="$(grep -c ^processor '/proc/cpuinfo')"
else
	cpu_threads="$(nproc --all)"
fi

#
# PRINT BANNER
#

printf "%s\n%s\n%s\n" \
	"cURL Build Script v$script_ver" \
	'===============================' \
	"This script will utilize ($cpu_threads cpu cores) for parallel processing to accelerate the building processes."

#
# CREATE GLOBAL VARIABLES
#

PATH="\
/usr/lib/ccache:\
$workspace/bin:\
$HOME/.local/bin:\
/usr/local/sbin:\
/usr/local/bin:\
/usr/sbin:\
/usr/bin:\
/sbin:\
/bin\
"
export PATH

PKG_CONFIG_PATH="\
$workspace/lib/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/share/emscripten/system/lib/pkgconfig:\
/usr/share/emscripten/cache/sysroot/lib/pkgconfig:\
/usr/share/pkgconfig\
"
export PKG_CONFIG_PATH

export LDFLAGS="-L$workspace/lib -L/usr/local/lib -L/usr/lib -L/usr/share/ghostscript/10.00.0/lib"

#
# DEFINE FUNCTIONS
#

fail_fn() {
	printf "\n%s\n\n%s\n\n" \
		"$1" \
		'Please submit a support ticket in GitHub.'
	exit 1
}

exit_fn() {
	printf "\n%s\n\n%s\n\n" \
		'Make sure to star this repository to show your support!' \
		'https://github.com/slyfox1186/script-repo/'
	exit 0
}

cleanup_fn() {
	printf "\n%s\n\n%s\n%s\n\n" \
		'Do you want to cleanup the build files?' \
		'[1] Yes' \
		'[2] No'
	read -p 'Your choices are (1 or 2): ' pychoice
	case "$pychoice" in
	1)
		sudo rm -fr "$cwd"
		exit_fn
		;;
	2)
		exit_fn
		;;
	*)
		read -p 'Bad user input. Press enter to try again'
		clear
		cleanup_fn
		;;
	esac
}

success_fn() {
	curl_ver="$(curl --version)"
	printf "\n%s\n\n" \
		"The installed curl version is: $curl_ver"
	cleanup_fn
}

curl_timeout='10'

git_1_fn() {
	local github_repo github_url

	# SCRAPE GITHUB WEBSITE FOR LATEST REPO VERSION
	github_repo="$1"
	github_url="$2"

	if curl_cmd="$(curl -m "$curl_timeout" -sSL https://api.github.com/repos/"$github_repo"/"$github_url")"; then
		g_url="$(echo "$curl_cmd" | jq -r '.[0].tarball_url' 2>/dev/null)"
		g_ver="$(echo "$curl_cmd" | jq -r '.[0].name' 2>/dev/null)"
		g_ver="${g_ver#cares-}"
		g_ver="${g_ver#nghttp2 v}"
		g_ver="${g_ver#nghttp3 v}"
		g_ver="${g_ver#OpenSSL }"
		g_ver="${g_ver#v}"
	fi
}

git_2_fn() {
	gitlab_repo="$1"
	github_url="$2"
	if curl_cmd="$(curl -m "$curl_timeout" -sSL "https://gitlab.gnome.org/api/v4/projects/$gitlab_repo/repository/$github_url")"; then
		g_ver="$(echo "$curl_cmd" | jq -r '.[0].name')"
		g_ver="${g_ver#v}"
	fi
}

git_ver_fn() {
	local v_flag v_url v_tag url_tag

	v_url="$1"
	v_tag="$2"
	v_flag="$3"

	case "$v_flag" in
		T)	gv_url='tags';;
		R)	gv_url='releases';;
		*)	fail_fn 'tags and releases were not among the URL options.';;
	esac

	case "$v_tag" in
	1) url_tag='git_1_fn';;
	2) url_tag='git_2_fn';;
	esac

	"$url_tag" "$v_url" "$gv_url" 2>/dev/null
}

execute() {
	echo "$ $*"
	if ! output=$("$@" 2>&1); then
		fail_fn "Failed to Execute $*"
	fi
}

download() {
	local dl_path dl_url dl_file target_dir

	dl_path="$packages"
	dl_url="$1"
	dl_file="${2:-"${1#*/}"}"

	if [[ "$dl_file" =~ tar. ]]; then
		target_dir="${dl_file%.*}"
		target_dir="${3:-"${target_dir%.*}"}"
	else
		target_dir="${3:-"${dl_file%.*}"}"
	fi

	if [ -d "$dl_path/$target_dir" ]; then
		sudo rm -fr "$dl_path/$target_dir"
	fi

	if [ ! -f "$dl_path/$dl_file" ]; then
		echo "Downloading $dl_url as $dl_file"
		if ! curl -Lso "$dl_path/$dl_file" "$dl_url"; then
			echo
			echo "The script failed to download \"$dl_url\" and will try again in 10 seconds"
			sleep 10
			echo
			if ! curl -Lso "$dl_path/$dl_file" "$dl_url"; then
				fail_fn "The script failed to download \"$dl_url\" two times and will exit the build"
			fi
		fi
		echo 'Download Completed'
	else
		echo "$dl_file is already downloaded"
	fi

	mkdir -p "$dl_path/$target_dir"

	if [ -n "$3" ]; then
		if ! tar -xf "$dl_path/$dl_file" -C "$dl_path/$target_dir" 2>/dev/null >/dev/null; then
			fail_fn "Failed to extract $dl_file"
		fi
	else
		if ! tar -xf "$dl_path/$dl_file" -C "$dl_path/$target_dir" --strip-components 1 2>&1; then
			fail_fn "Failed to extract $dl_file"
		fi
	fi

	if [ -d "$dl_path/$target_dir" ]; then
		echo "File extracted: $dl_file"
		echo
	fi

	cd "$dl_path/$target_dir" || fail_fn "Unable to change the working directory to $target_dir"
}

download_git() {
	local dl_path dl_url dl_file git_type git_other_url target_dir

	dl_path="$packages"
	dl_url="$1"
	dl_file="$2"
	git_type="$3"
	git_other_url="$4"
	target_dir="$dl_path/$dl_file"

	if [ -d "$target_dir" ]; then
		sudo rm -fr "$target_dir"
	fi

	if [ "$git_type" = 'O' ]; then
		echo "Downloading $dl_url as $dl_file"
		if ! git clone --depth 1 -b "$git_other_url" "$dl_url" "$target_dir"; then
			printf "\n%s\n\n%s\n\n" \
				"The script failed to clone the git repository: $target_dir" \
				'Sleeping for 5 seconds before trying again.'
			sleep 5
			if ! git clone -q "$dl_url" "$target_dir"; then
				fail_fn "The script failed to clone \"$target_dir\" twice and will now exit the build."
			fi
		fi
		echo -e "Succesfully cloned the directory: $target_dir\\n"
	else
		echo "Downloading $dl_url as $dl_file"
		if ! git clone -q "$dl_url" "$target_dir"; then
			printf "\n%s\n\n%s\n\n" \
				"The script failed to clone the git repository: $target_dir" \
				'Sleeping for 5 seconds before trying again.'
			sleep 5
			if ! git clone -q "$dl_url" "$target_dir"; then
				fail_fn "The script failed to clone \"$target_dir\" twice and will now exit the build."
			fi
		fi
		echo -e "Succesfully cloned the directory: $target_dir\\n"
	fi

	cd "$target_dir" || fail_fn "Unable to change the working directory to: $target_dir"
}

build() {
	echo
	echo "building $1 - version $2"
	echo '===================================='

	if [ -f "$packages/$1.done" ]; then
		if grep -Fx "$2" "$packages/$1.done" >/dev/null; then
			echo "$1 version $2 already built. Remove $packages/$1.done lockfile to rebuild it."
			return 1
		else
			echo "$1 is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove $packages/$1.done lockfile."
			return 1
		fi
	fi

	return 0
}

build_done() { echo "$2" >"$packages/$1.done"; }

installed() { return $(dpkg-query -W -f '${Status}\n' "$1" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}'); }

#
# FIGURE OUT WHICH COMPILERS TO USE
#

if which 'gcc-13' &>/dev/null; then
	export CC='gcc-13'
elif which 'gcc-12' &>/dev/null; then
	export CC='gcc-12'
elif which 'gcc-11' &>/dev/null; then
	export CC='gcc-11'
elif which 'gcc-10' &>/dev/null; then
	export CC='gcc-10'
elif which 'gcc' &>/dev/null; then
	export CC='gcc'
else
	fail_fn 'You must have "gcc" or some higher version of it installed. Please do so and run the script again.'
fi

if which 'g++-12' &>/dev/null; then
	export CXX='g++-12'
elif which 'g++-11' &>/dev/null; then
	export CXX='g++-11'
elif which 'g++-10' &>/dev/null; then
	export CXX='g++-10'
elif which 'g++' &>/dev/null; then
	export CXX='g++'
else
	fail_fn 'You must have "g++" or some higher version of it installed. Please do so and run the script again.'
fi

export CXXFLAGS='-g -O3 -march=native'

#
# INSTALL REQUIRED APT PACKAGES
#

pkgs=(autoconf automake autotools-dev build-essential ccache curl gcc-12 jq lcov libbrotli-dev libc-ares-dev libcunit1-dev
	libcurl4-gnutls-dev libec-dev libev-dev libgcc-12-dev libgnutls28-dev libgsasl7-dev libgsasl-dev libldap2-dev libldap-dev
	libmbedtls-dev libngtcp2-dev libntlm0-dev libpsl-dev librtmp-dev libssh2-1-dev libtool libzstd-dev make nghttp2 openssl
	pkg-config zlib1g-dev libjemalloc-dev libevent-dev libjansson-dev libnghttp2-dev libnghttp3-dev)

for pkg in ${pkgs[@]}; do
	if ! installed "$pkg"; then
		missing_pkgs+=" $pkg"
	fi
done

if [ -n "${missing_pkgs-}" ]; then
	printf "%s\n%s\n\n" \
		'Installing required apt packages' \
		'================================================'
	for i in "$missing_pkgs"; do
		echo "\$ sudo apt -y install $i"
		sudo apt -y install $i
		echo
	done
fi

#
# START BUILDING FROM SOURCE
#

git_ver_fn 'madler/zlib' '1' 'T'
if build 'zlib' "$g_ver"; then
	download "$g_url" "zlib-$g_ver.tar.gz"
	execute ./configure --prefix="$workspace" --static --64
	execute make "-j$cpu_threads"
	execute make install
	build_done 'zlib' "$g_ver"
fi

git_ver_fn 'google/brotli' '1' 'T'
if build 'brotli' "$g_ver"; then
	download "$g_url" 'brotli-1.6.39.tar.gz'
	execute autoreconf -fi
	execute cmake -B 'build' -DCMAKE_INSTALL_PREFIX="$workspace" -DCMAKE_BUILD_TYPE='Release' -G 'Ninja' -Wno-dev
	execute ninja "-j$cpu_threads" -C 'build'
	execute ninja "-j$cpu_threads" -C 'build' install
	build_done "brotli" '1.6.39'
fi

git_ver_fn 'c-ares/c-ares' '1' 'R'
if build 'c-ares' "$g_ver"; then
	download "$g_url" "c-ares-$g_ver.tar.gz"
	execute cmake -B 'build' -DCMAKE_INSTALL_PREFIX="$workspace" -DCARES_SHARED='OFF' -DCARES_STATIC_PIC='ON' \
		-DCARES_STATIC='ON' -DCMAKE_BUILD_TYPE='Release' -DBUILD_SHARED_LIBS='OFF' -G 'Ninja' -Wno-dev
	execute ninja "-j$cpu_threads" -C 'build'
	execute ninja "-j$cpu_threads" -C 'build' install
	build_done 'c-ares' "$g_ver"
fi

git_ver_fn 'akheron/jansson' '1' 'T'
if build 'jansson' "$g_ver"; then
	download "$g_url" "jansson-$g_ver.tar.gz"
	execute cmake -B 'build' -DCMAKE_INSTALL_PREFIX="$workspace" -DJANSSON_INSTALL='ON' -DJANSSON_EXAMPLES='OFF' -DJANSSON_LIBRARIES='jansson' \
		-DJANSSON_INITIAL_HASHTABLE_ORDER='3' -DJANSSON_INCLUDE_DIRS="/home/jman/tmp/curl-build-script/packages/jansson-2.14/include;$workspace/include" \
		-DJANSSON_WITHOUT_TESTS='ON' -DJANSSON_BUILD_DOCS='OFF' -DJANSSON_BUILD_SHARED_LIBS='ON' -G 'Ninja' -Wno-dev
	execute ninja "-j$cpu_threads" -C 'build'
	execute ninja "-j$cpu_threads" -C 'build' install
	build_done 'jansson' "$g_ver"
fi

git_ver_fn 'quictls/openssl' '1' 'R'
g_ver="$(echo $g_ver | sed 's/\-quic Release 1//g')"
if build 'openssl-qtls' "$g_ver"; then
	download "$g_url" "openssl-qtls-$g_ver.tar.gz"
	_RLD_LIB_PATH="$workspace"
	execute ./Configure --prefix="$workspace" --openssldir='/usr/local/ssl' --with-zlib-include="$workspace"/include --with-zlib-lib="$workspace"/lib no-shared zlib
	execute make "-j$cpu_threads"
	execute make install_sw
	build_done 'openssl-qtls' "$g_ver"
fi

git_ver_fn 'ngtcp2/ngtcp2' '1' 'T'
if build 'ngtcp2' "$g_ver"; then
	download_git 'https://github.com/quictls/openssl' "ngtcp2-$g_ver" 'O' 'OpenSSL_1_1_1t+quic'
	execute ./config --prefix="$workspace" enable-tls1_3
	execute make "-j$cpu_threads"
	execute make install_sw
	cd '../' || exit 1
	execute git clone 'https://github.com/ngtcp2/nghttp3' 'nghttp3-git'
	cd 'nghttp3-git' || exit 1
	execute autoreconf -i
	execute ./configure --prefix="$workspace" --enable-lib-only
	execute make "-j$cpu_threads" check
	cd ../ || exit 1
	execute git clone 'https://github.com/ngtcp2/ngtcp2' 'ngtcp2-git'
	cd 'ngtcp2-git' || exit 1
	execute autoreconf -i
	execute ./configure --prefix="$workspace" LDFLAGS="-Wl,-rpath,$workspace/../openssl/build/lib"
	execute make "-j$cpu_threads" check
	build_done 'ngtcp2' "$g_ver"
fi

git_ver_fn 'curl/curl' '1' 'R'
if build 'curl' "$g_ver"; then
	d_opts=(--disable-{manual,shared,verbose,versioned-symbols})
	e_opts=(--enable-{alt-svc,ares="$workspace"/include,cookies,crypto-auth,dateparse,dict,dnsshuffle,doh,file,ftp,get-easy-options,gopher})
	e_opts+=(--enable-{headers-api,hsts,http,http-auth,imap,ipv6,ldap,ldaps,libcurl-option,libgcc,manual,mime,mqtt,netrc,ntlm,ntlm-wb='/usr/bin/ntlm_auth'})
	e_opts+=(--enable-{openssl-auto-load-config,optimize,pop3,progress-meter,proxy,pthreads,rtsp,smb,smtp,socketpair,sspi,static,telnet,tftp,threaded-resolver})
	e_opts+=(--enable-{tls-srp,unix-sockets,websockets})
	w_opts=(--with-{libssh2,nghttp2='/usr/include',nghttp3='/usr/include',brotli='/usr/include',gnutls='/usr/include'})
	w_opts+=(--with-{gssapi,wolfssh,zlib='/usr/include/boost/beast',ca-bundle='/etc/ssl/certs/ca-certificates.crt',ca-path='/etc/ssl/certs',ca-fallback})
	download "$g_url" "curl-$g_ver.tar.gz"
	if which 'update-ca-certificates' &>/dev/null; then
		execute sudo update-ca-certificates
	fi
	execute curl -s --remote-name 'https://curl.se/ca/cacert-2023-01-10.pem'
	execute sudo mv 'cacert-2023-01-10.pem' '/etc/ssl/certs'
	execute autoreconf -fi
	./configure \
		--prefix="$install_dir" \
		"${d_opts[@]}" \
		"${e_opts[@]}" \
		"${w_opts[@]}" \
		--without-hyper \
		CXXFLAGS='-g -O3 -march=native'
	execute make "-j$cpu_threads"
	execute sudo make install
	build_done 'curl' "$g_ver"
fi

# OUTPUT FINAL MESSAGES TO USER IN TERMINAL
success_fn
