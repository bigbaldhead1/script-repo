#!/bin/bash

#######################################
##
## GitHub: https://github.com/slyfox1186/script-repo/
##
## Purpose: Install the latest 7-zip package across multiple OS types.
##          The user will be prompted to select their OS architecture before
##          installing.
##
## Updated: 05.20.23
##
#############################

echo

#
# SET VARIABLES
#

script_ver='2.0'
version='7z2201'
tar_file="$version.tar.xz"
cwd="$PWD"/7zip-build-script
packages="$cwd"/packages
install_dir='/usr/bin/7z'

#
# PRINT SCRIPT BANNER
#
printf "%s\n%s\n\n" \
    "7-Zip Build Script: v$script_ver" \
    '============================='
sleep 3

# CREATE OUTPUT FOLDERS
mkdir -p "$packages"

#
# CREATE FUNCTIONS
#

exit_fn()
{
    printf "\n%s\n\n%s\n%s\n" \
        'The script has completed' \
        'Make sure to star this repository to show your support!' \
        'https://github.com/slyfox1186/script-repo'
    exit 0
}

fail_fn()
{
    printf "\n\n%s\n\n%s\n\n%s\n\n" \
        "$1" \
        'Please create a support ticket at the address below' \
        'https://github.com/slyfox1186/script-repo/issues'
    exit 1
}

remove_dir()
{
    if [ -d "$*" ]; then
        sudo rm -fr "$*"
    fi
}

# CLEANUP DOWNLAOD FILES
cleanup_fn()
{
    local choice

        printf "\n%s\n\n%s\n%s\n\n" \
            'Do you want to remove the build files?' \
            '[1] Yes' \
            '[2] No'
        read -p 'Your choices are (1 or 2): ' choice

    case "$choice" in
        1)
            remove_dir "$cwd"
            exit_fn
            ;;
        2)
            exit_fn
            ;;

        *)
            printf "%s\n\n" \
                'Bad user input.'
            read -p 'Press enter to try again.'
            clear
            cleanup_fn
            ;;
    esac
}

# PRINT 7-ZIP VERSION
version_fn()
{
    show_ver="$("$install_dir" | head -n 2 | cut -d " " -f3 | awk 'NF' | xargs echo "$1")"
    show_ver="$(echo $show_ver | sed 's/v /v/g')"
    echo "7-zip has been updated to: v$show_ver"
}

# DETECT PC ARCHITECTURE
case "$(uname -m)" in 
      x86_64)          url='linux-x64.tar.xz';;
      i386|i686)       url='linux-x86.tar.xz';;
      aarch64*|armv8*) url='linux-arm64.tar.xz';;
      arm|armv7*)      url='linux-arm.tar.xz';;
      *) fail_fn "Unrecognized architecture '$(uname -m)'";;
esac

# Download the tar file if missing
if [ ! -f "$tar_file" ]; then
   curl -Lso "$packages/$tar_file" "https://www.7-zip.org/a/$version-$url"
fi

# Extract files into directory '7z'
mkdir -p "$packages/$version"
if ! tar -xf "$packages/$tar_file" -C "$packages/$version"; then
    fail_fn 'The script was unable to find the download file.'
fi

# Copy the file to its destination or throw an error if the copying of the file fails
if ! sudo cp -f "$packages/$version/7zzs" "$install_dir"; then
    fail_fn "The script was unable to copy the static file '7zzs' to: $install_dir"
fi

# SHOW THE NEWLY INSTALLED 7-ZIP VERSION
version_fn

# PROMPT THE USER TO CLEANUP THE INSTALL FILES
cleanup_fn

# SHOW THE EXIT MESSAGE
exit_fn
