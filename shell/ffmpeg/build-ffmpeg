#!/bin/bash

##########################################################################
##
##  GITHUB: https://github.com/slyfox1186/script-repo
##
##  FORKED FROM: https://github.com/markus-perl/ffmpeg-build-script/
##
##  TARGET DISTRO: DEBIAN BASED (UBUNTU etc.)
##
##  TARGET ARCHITECTURE: x86_x64
##
##  PURPOSE: TO BUILD FFMPEG FROM SOURCE CODE WITH ADDON DEVELOPMENT
##           LIBRARIES ALSO COMPILED FROM SOURCE CODE TO ENSURE THE
##           LATEST IN EXTRA FUNCTIONALITY.
##
##  CUDA: IF THE CUDA LIBRARIES ARE NOT INSTALLED (FOR GEFORCE CARDS ONLY)
##        THE USER WILL BE PROMPTED FOR THE SCRIPT TO INSTALL THEM SO THAT
##        HARDWARE ACCELERATION IS ENABLED WHEN BUILDING FFMPEG AT THE
##        SCRIPT'S END.
##
##  UPDATED ON: 03.14.23
##
##  SCRIPT VERSION: 2.30
##
##########################################################################

clear

# VERIFY THE SCRIPT DOES NOT HAVE ROOT ACCESS BEFORE CONTINUING
# THIS CAN CAUSE ISSUES USING THE 'IF WHICH' COMMANDS WHEN RUN AS ROOT
if [ "${EUID}" -lt '1' ]; then
    echo 'You must run this script WITHOUT root/sudo'
    echo
    exit 1
fi

##
## DEFINE VARIABLES
##

script_ver='2.30'
progname="${0:2}"
# THE FFMPEG VERSION WILL BE THE LATEST AVAILABLE (SOURCED FROM FFMPEG'S OFFICIAL GIT REPOSITORY)
ffmpeg_ver='latest'
cuda_ver='12.1'
cuda_pkg="cuda-${cuda_ver}.deb"
packages="${PWD}"/packages
workspace="${PWD}"/workspace
install_dir='/usr/bin'
CFLAGS="-I${workspace}"/include
LDFLAGS="-L${workspace}"/lib
LDEXEFLAGS=''
EXTRALIBS='-ldl -lpthread -lm -lz'
cnf_ops=()
nonfree='false'
latest='false'

##
## DEFINE PARENT DIRECTORY FROM PASSED VARIABLES
##

if [ -n "${4}" ]; then
    parent_dir="${4}"
fi

##
## SET THE AVAILABLE CPU COUNT FOR PARALLEL PROCESSING (SPEEDS UP THE BUILD PROCESS)
##

if [ -f '/proc/cpuinfo' ]; then
    cpus="$(grep -c processor '/proc/cpuinfo')"
else
    cpus="$(nproc --all)"
fi

######################
## DEFINE FUNCTIONS ##
######################

exit_fn()
{
    echo '=============================='
    echo '   The script has finished!   '
    echo '=============================='
    echo
    echo 'Make sure to star this repository to show your support!'
    echo 'https://github.com/slyfox1186/script-repo/'
    echo
    exit 0
}


cleanup_fn()
{
    # PROMPT USER TO CLEAN UP BUILD FILES
    echo
    echo 'Do you want to cleanup the build files?'
    echo '========================================='
    echo
    echo '[1] Yes'
    echo '[2] No'
    echo
    read -p 'Your choices are (1 or 2): ' cleanup_ans
    clear

        if [[ "${cleanup_ans}" -eq '1' ]]; then
            cleanup
            exit_fn
        elif [[ "${cleanup_ans}" -eq '2' ]]; then
            exit_fn
        else
            echo 'Error: Bad user input'
            echo '======================'
            echo
            read -p 'Press enter to try again.'
            clear
            cleanup_fn
        fi
}

ff_ver_fn()
{
    echo
    echo '===================================='
    echo '       FFmpeg Build Complete        '
    echo '===================================='
    echo
    echo '  The binary files can be found in the following locations'
    echo
    echo "  ffmpeg:  ${install_dir}/ffmpeg"
    echo "  ffprobe: ${install_dir}/ffprobe"
    echo "  ffplay:  ${install_dir}/ffplay"
    echo
    echo '============================'
    echo '       FFmpeg Version       '
    echo '============================'
    echo
    ffmpeg -version
    echo
    read -p 'Press enter to continue.'
    clear
    cleanup_fn
}

make_dir()
{
    remove_dir "${1}"
    if ! mkdir "${1}"; then
        printf "\n Failed to create dir %s" "${1}"
        echo
        exit 1
    fi
}

remove_file()
{
    if [ -f "${1}" ]; then
        rm -f "${1}"
    fi
}

remove_dir()
{
    if [ -d "${1}" ]; then
        rm -fr "${1}"
    fi
}

download()
{

    dl_path="${packages}"
    dl_file="${2:-"${1##*/}"}"

    if [[ "${dl_file}" =~ tar. ]]; then
        tdir="${dl_file%.*}"
        tdir="${3:-"${tdir%.*}"}"
    else
        tdir="${3:-"${dl_file%.*}"}"
    fi

    if [ ! -f "${dl_path}/${dl_file}" ]; then
        echo "Downloading ${1} as ${dl_file}"
        curl -Lso "${dl_path}/${dl_file}" "${1}"

        ec="${?}"
        if [ "${ec}" -ne '0' ]; then
            echo
            echo "Failed to download ${1}. Exitcode ${ec}. Retrying in 10 seconds"
            echo
            read -t 10 -p 'Press enter to skip waiting.'
            echo
            curl -Lso "${dl_path}/${dl_file}" "${1}"
        fi

        ec="${?}"
        if [ "${ec}" -ne '0' ]; then
            echo
            echo "Failed to download ${1}. Exitcode ${ec}"
            echo
            exit 1
        fi

        echo 'Download Complete...'
        echo
    else
        echo "${dl_file} is already downloaded."
fi

    make_dir "${dl_path}/${tdir}"

    if [[ "${dl_file}" == *'patch'* ]]; then
        return
    fi

    if [ -n "${3}" ]; then
        if ! tar -xf "${dl_path}/${dl_file}" -C "${dl_path}/${tdir}" &>/dev/null; then
            echo "Failed to extract ${dl_file}"
            echo
            exit 1
        fi
    else
        if ! tar -xf "${dl_path}/${dl_file}" -C "${dl_path}/${tdir}" --strip-components 1 &>/dev/null; then
            echo "Failed to extract ${dl_file}"
            echo
            exit 1
        fi
    fi

    echo "Extracted ${dl_file}"

    cd "${dl_path}/${tdir}" || (
        echo 'Script error!'
        echo
        echo "Unable to cd into: ${tdir}"
        echo
        exit 1
    )

}

error_fn()
{
    echo
    echo 'Please create a support ticket to get assistance fixing errors.'
    echo
    echo 'https://github.com/slyfox1186/script-repo/issues'
    echo
    read -p 'Press enter to exit.'
    echo
    exit 1
}

execute()
{
    echo "$ ${*}"

    output=$("${@}" 2>&1)

    # shellcheck disable=SC2181
    if [ "${?}" -ne '0' ]; then
        echo "${output}"
        echo
        echo "Failed to Execute ${*}" >&2
        echo
        exit 1
    fi
}

# BUILD COMMAND FUNCTION
build()
{
    echo
    echo "building ${1} - version ${2}"
    echo '===================================='

    if [ -f "${packages}/${1}.done" ]; then
        if grep -Fx "${2}" "${packages}/${1}.done" >/dev/null; then
            echo "${1} version ${2} already built. Remove ${packages}/${1}.done lockfile to rebuild it."
            return 1
        elif ${latest}; then
            echo "${1} is outdated and will be rebuilt using version ${2}"
            return 0
        else
            echo "${1} is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove ${packages}/${1}.done lockfile."
            return 1
        fi
    fi

    return 0
}

command_exists()
{
    if ! [[ -x $(command -v "${1}") ]]; then
        return 1
    fi

    return
}

library_exists()
{

    if ! [[ -x "$(pkg-config --exists --print-errors "${1}" 2>&1 >/dev/null)" ]]; then
        return 1
    fi

    return 0
}

# CONFIRM A BUILD HAS COMPLETED FUNCTION
build_done() { echo "${2}" > "${packages}/${1}.done"; }

verify_binary_type()
{
    if ! command_exists 'file'; then
        return
    fi

    binary_type=$(file "${workspace}"/bin/ffmpeg | sed -n 's/^.*\:\ \(.*$\)/\1/p')
    echo
    case ${binary_type} in
    'Mach-O 64-bit executable arm64')
        echo "Successfully built Apple Silicon (M1) for ${ostype}: ${binary_type}"
         ;;
    *)
          echo "Successfully built binary for ${ostype}: ${binary_type}"
          ;;
    esac
}

# CLEANUP ALL FILES FUNCTION
cleanup()
{
    remove_dir "${parent_dir}"
    remove_file "${0}"
    echo 'Cleanup finished.'
    echo
}

# FUNCTION TO DETERMINE IF A PACKAGE IS INSTALLED OR NOT
installed() { return $(dpkg-query -W -f '${Status}\n' "${1}" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}'); }

cuda_fail_fn()
{
    clear
    echo "Error: Unable to locate the required hardware acceleration library: /usr/local/cuda-${}/bin/"
    error_fn
}

gpu_arch_fn()
{
    echo
    local gpu_ans

    echo 'Tune the build to match your specific Nvidia GPU which will maximize the performance output.'
    echo '============================================================================================'
    echo
    echo 'Please select your GPU'\''s architecture.'
    echo
    echo '[1] Pascal   | Geforce GTX [1030, 1050, 1060, 1070, 1080] GT [1010, Titan Xp, Tesla P40, Tesla P4, Discrete GPU on the NVIDIA Drive PX2]'
    echo '[2] Volta    | Geforce GTX [1180, Titan V] Quadro [GV100] Tesla [V100]'
    echo '[3] Turing   | Geforce GTX [1660 Ti] Geforce RTX [2060, 2070, 2080, Titan] Quadro RTX [4000, 5000, 6000, 8000, T1000/T2000, Tesla T4]'
    echo '[4] Ampere   | Geforce RTX [3050, 3060, 3070, 3080, 3090, A2000, A3000, A4000, A5000, A6000]'
    echo '[5] Lovelace | Geforce RTX [4080, 4090, 6000]'
    echo '[6] Hopper   | GH100'
    echo
    read -p 'Your choices are (1 to 6): ' gpu_ans
    
    if [[ "${gpu_ans}" -eq '1' ]]; then
        gpu_arch='compute_61,code=sm_61'
    elif [[ "${gpu_ans}" -eq '2' ]]; then
        gpu_arch='compute_70,code=sm_70'
    elif [[ "${gpu_ans}" -eq '3' ]]; then
        gpu_arch='compute_75,code=sm_75'
    elif [[ "${gpu_ans}" -eq '4' ]]; then
        gpu_arch='compute_86,code=sm_86'
    elif [[ "${gpu_ans}" -eq '5' ]]; then
        gpu_arch='compute_89,code=sm_89'
    elif [[ "${gpu_ans}" -eq '6' ]]; then
        gpu_arch='compute_90,code=sm_90'
    else
        echo
        echo 'Error: Bad user input.'
        echo
        echo 'Press enter to start over.'
        clear
        gpu_arch_fn
    fi
}

# PRINT THE OPTIONS AVAILABLE WHEN MANUALLY RUNNING THE SCRIPT
usage()
{
    echo "Usage: ${progname} [OPTIONS]"
    echo
    echo 'Options:'
    echo '    -h, --help                                         Display usage information'
    echo '            --version                                    Display version information'
    echo '    -b, --build                                        Starts the build process'
    echo '            --enable-gpl-and-non-free    Enable GPL and non-free codecs    - https://ffmpeg.org/legal.html'
    echo '    -c, --cleanup                                    Remove all working dirs'
    echo '            --latest                                     Build latest version of dependencies if newer available'
    echo '            gpu_arch_fn--full-static                            Build a full static FFmpeg binary (eg. glibc, pthreads etc...) **only Linux**'
    echo '                                                                 Note: Because of the NSS (Name Service Switch), glibc does not recommend static links.'
    echo
}

echo "ffmpeg-build-script v${script_ver}"
echo '======================================'
echo

while ((${#} > 0)); do
    case ${1} in
    -h | --help)
        usage
        exit 0
        ;;
    --version)
        echo "${script_ver}"
        exit 0
        ;;
    -*)
        if [[ "${1}" == '--build' || "${1}" =~ '-b' ]]; then
            bflag='-b'
        fi
        if [[ "${1}" == '--enable-gpl-and-non-free' ]]; then
            cnf_ops+=('--enable-nonfree')
            cnf_ops+=('--enable-gpl')
            nonfree='true'
        fi
        if [[ "${1}" == '--cleanup' || "${1}" =~ '-c' && ! "${1}" =~ '--' ]]; then
            cflag='-c'
            cleanup
        fi
        if [[ "${1}" == '--full-static' ]]; then
            LDEXEFLAGS='-static'
        fi
        if [[ "${1}" == '--latest' ]]; then
            latest='true'
        fi
        shift
        ;;
    *)
        usage
        echo
        exit 1
        ;;
    esac
done

if [ -z "${bflag}" ]; then
    if [ -z "${cflag}" ]; then
        usage
        echo
        exit 1
    fi
    exit 0
fi

echo "The script will utilize ${cpus} cpu cores for parallel processing to accelerate the build speed."
echo

if ${nonfree}; then
    echo 'The script has been configured to run with GPL and non-free codecs enabled'
    echo
fi

if [ -n "${LDEXEFLAGS}" ]; then
    echo 'The script has been configured to run in full static mode.'
    echo
fi

mkdir -p "${packages}"
mkdir -p "${workspace}"

PATH="${workspace}/bin:${PATH}"
export PATH

PKG_CONFIG_PATH="\
${workspace}\lib\pkgconfig:\
/usr/local/lib/x86_64-linux-gnu/pkgconfig:\
/usr/local/lib/pkgconfig:\
/usr/local/share/pkgconfig:\
/usr/lib/x86_64-linux-gnu/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/share/pkgconfig:\
/usr/lib64/pkgconfig\
"
export PKG_CONFIG_PATH

if ! command_exists 'make'; then
    echo 'The '\''make'\'' package is not installed. It is required for this script to run.'
    echo
    exit 1
fi

if ! command_exists 'g++'; then
    echo 'The '\''g++'\'' package is not installed. It is required for this script to run.'
    echo
    exit 1
fi

if ! command_exists 'curl'; then
    echo 'The '\''curl'\'' package is not installed. It is required for this script to run.'
    echo
    exit 1
fi

if ! command_exists 'cargo'; then
    echo 'The '\''cargo'\'' command was not found. rav1e encoder will not be available.'
fi

if ! command_exists 'python3'; then
    echo 'The '\''python3'\'' command was not found. The '\''Lv2'\'' filter and '\''dav1d'\'' decoder will not be available.'
fi

##
## CUDA FUNCTIONS
##

cuda_fn()
{
    clear
    echo 'Pick your Linux distro from the list below:'
    echo
    echo '[1] Debian 10 (x86_x64)'
    echo '[2] Debian 11 (x86_x64)'
    echo '[3] Ubuntu 18.04 (x86_x64)'
    echo '[4] Ubuntu 20.04 (x86_x64)'
    echo '[5] Ubuntu 22.04 (x86_x64)'
    echo '[6] Ubuntu WSL 2 (Windows Subsystem for Linux)'
    echo '[7] Skip this'
    echo
    read -p 'Your choices are (1 to 7): ' cuda_dist
    clear
    if [[ "${cuda_dist}" -eq '1' ]]; then
        wget --show progress -cqO "${cuda_pkg}" 'https://developer.download.nvidia.com/compute/cuda/12.1.0/local_installers/cuda-repo-debian10-12-1-local_12.1.0-530.30.02-1_amd64.deb'
        sudo dpkg -i "${cuda_pkg}"
        sudo cp /var/cuda-repo-debian10-12-1-local/cuda-*-keyring.gpg '/usr/share/keyrings/'
        sudo add-apt-repository contrib
       elif [[ "${cuda_dist}" -eq '2' ]]; then
        wget --show progress -cqO "${cuda_pkg}" 'https://developer.download.nvidia.com/compute/cuda/12.1.0/local_installers/cuda-repo-debian11-12-1-local_12.1.0-530.30.02-1_amd64.deb'
        sudo dpkg -i "${cuda_pkg}"
        sudo cp /var/cuda-repo-debian11-12-1-local/cuda-*-keyring.gpg '/usr/share/keyrings/'
        sudo add-apt-repository contrib
    elif [[ "${cuda_dist}" -eq '3' ]]; then
        wget --show progress -cq 'https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin'
        sudo mv 'cuda-ubuntu1804.pin' '/etc/apt/preferences.d/cuda-repository-pin-600'
        wget --show progress -cqO "${cuda_pkg}" 'https://developer.download.nvidia.com/compute/cuda/12.1.0/local_installers/cuda-repo-ubuntu1804-12-1-local_12.1.0-530.30.02-1_amd64.deb'
        sudo dpkg -i "${cuda_pkg}"
        sudo cp /var/cuda-repo-ubuntu1804-12-1-local/cuda-*-keyring.gpg '/usr/share/keyrings/'
    elif [[ "${cuda_dist}" -eq '4' ]]; then
        wget --show progress -cq 'https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin'
        sudo mv 'cuda-ubuntu2004.pin' '/etc/apt/preferences.d/cuda-repository-pin-600'
        wget --show progress -cqO "${cuda_pkg}" 'https://developer.download.nvidia.com/compute/cuda/12.1.0/local_installers/cuda-repo-ubuntu2004-12-1-local_12.1.0-530.30.02-1_amd64.deb'
        sudo dpkg -i "${cuda_pkg}"
        sudo cp /var/cuda-repo-ubuntu2004-12-1-local/cuda-*-keyring.gpg '/usr/share/keyrings/'
    elif [[ "${cuda_dist}" -eq '5' ]]; then
        wget --show progress -cq 'https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin'
        sudo mv 'cuda-ubuntu2204.pin' '/etc/apt/preferences.d/cuda-repository-pin-600'
        wget --show progress -cqO "${cuda_pkg}" 'https://developer.download.nvidia.com/compute/cuda/12.1.0/local_installers/cuda-repo-ubuntu2204-12-1-local_12.1.0-530.30.02-1_amd64.deb'
        sudo dpkg -i "${cuda_pkg}"
        sudo cp /var/cuda-repo-ubuntu2204-12-1-local/cuda-*-keyring.gpg '/usr/share/keyrings/'
    elif [[ "${cuda_dist}" -eq '6' ]]; then
        wget --show progress -cq 'https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin'
        sudo mv 'cuda-wsl-ubuntu.pin' '/etc/apt/preferences.d/cuda-repository-pin-600'
        wget --show progress -cqO "${cuda_pkg}" 'https://developer.download.nvidia.com/compute/cuda/12.1.0/local_installers/cuda-repo-wsl-ubuntu-12-1-local_12.1.0-1_amd64.deb'
        sudo dpkg -i "${cuda_pkg}"
        sudo cp /var/cuda-repo-wsl-ubuntu-12-1-local/cuda-*-keyring.gpg '/usr/share/keyrings/'
    elif [[ "${cuda_dist}" -eq '7' ]]; then
        return 0
    fi

    # UPDATE THE APT PACKAGES THEN INSTALL THE CUDA-SDK-TOOLKIT
    sudo apt update
    sudo apt -y install cuda
    
    # REMOVE LEFTOVER DEB FILE
    if [ -f "${cuda_pkg}" ]; then
        sudo rm "${cuda_pkg}"
    fi
    
    # CHECK IF THE CUDA FOLDER EXISTS TO ENSURE IT WAS INSTALLED
    if [ ! -d "/usr/local/cuda-${cuda_ver}/bin" ]; then
        cuda_fail_fn
    else
        PATH="${PATH}:/usr/local/cuda-${cuda_ver}/bin"
        export PATH
    fi
}

##
## ADDITIONAL REQUIRED GEFORCE CUDA DEVELOPMENT PACKAGES
##
  
cuda_add_fn()
{
    echo
    echo 'Installing: Additional Required Geforce CUDA Developement Packages'
    echo '===================================================================='

    addons=(autoconf automake build-essential libass-dev libc6 libc6-dev libfdk-aac-dev libfreetype6-dev libmp3lame-dev libnuma1 libnuma-dev libtheora-dev libtool libvorbis-dev pkg-config texinfo unzip wget yasm zlib1g-dev)

    for pkg in ${addons[@]}
    do
        if ! installed "${pkg}"; then
            missing_pkgs+=" ${pkg}"
        fi
    done

    if [ -n "${missing_pkgs}" ]; then
        for pkg in "${missing_pkgs}"
        do
            sudo apt install ${pkg}
        done
        echo
        echo 'The Required Geforce CUDA Developement Libraries were installed.'
    else
        echo
        echo 'The Required Geforce CUDA Developement Libraries are already installed.'
    fi

    echo
    sleep 3
}

##
## INSTALL CUDA
##

if ! which 'nvcc' &>/dev/null ; then
    echo
    echo 'You don'\''t have the cuda-sdk-toolkit installed OR you don'\''t have it in your PATH variable.'
    echo '==============================================================================================='
    echo
    echo 'Do you want to install it and/or add it to your PATH?'
    echo
    echo '[1] Install it and add it to my PATH'
    echo '[2] Just add it to my PATH'
    echo '[3] Don'\''t do either and continue the build'
    echo
    read -p 'Your choices are (1 to 3): ' cuda_ans
    echo
    if [[ "${cuda_ans}" -eq '1' ]]; then
        cuda_fn
        cuda_add_fn
    elif [[ "${cuda_ans}" -eq '2' ]]; then
        if [ -d '/usr/local/cuda-12.1/bin' ]; then
            PATH="${PATH}:/usr/local/cuda-12.1/bin"
            export PATH
        else
            echo 'The script was unable to add it to your $PATH because a required folder is missing: /usr/local/cuda-12.1/bin'
            echo
            read -p 'Press enter to continue the build.'
            echo
        fi
    elif [[ "${cuda_ans}" -eq '3' ]]; then
        echo
    else
        clear
        echo 'Error: Bad user input!'
        echo '======================='
        error_fn
    fi
else
    echo
    echo "The cuda-sdk-toolkit v${cuda_ver} is already installed."
    echo '================================================='
    echo
    echo 'Do you want to update/reinstall it?'
    echo
    echo '[1] Yes'
    echo '[2] No'
    echo
    read -p 'Your choices are (1 or 2): ' cuda_choice
    echo
    if [[ "${cuda_choice}" -eq '1' ]]; then
        cuda_fn
        cuda_add_fn
    elif [[ "${cuda_choice}" -eq '2' ]]; then
        echo 'Continuing the build...'
    fi
fi

##
## BUILD TOOLS
##

if build 'giflib' '5.2.1'; then
    download 'https://netcologne.dl.sourceforge.net/project/giflib/giflib-5.2.1.tar.gz'
    cd "${packages}"/giflib-5.2.1 || exit 1
    # PARELLEL BUILDING NOT AVAILABLE FOR THIS LIBRARY
    execute make
    execute make PREFIX="${workspace}" install
    build_done 'giflib' '5.2.1'
fi

if build 'pkg-config' '0.29.2'; then
    download 'https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz'
    execute ./configure --silent --prefix="${workspace}" --with-pc-path="${workspace}"/lib/pkgconfig --with-internal-glib
    execute make "-j${cpus}"
    execute make install
    build_done 'pkg-config' '0.29.2'
fi

if build 'yasm' '1.3.0'; then
    download 'https://github.com/yasm/yasm/releases/download/v1.3.0/yasm-1.3.0.tar.gz'
    execute ./configure --prefix="${workspace}"
    execute make "-j${cpus}"
    execute make install
    build_done 'yasm' '1.3.0'
fi

if build 'nasm' '2.16.02rc1'; then
    download 'https://www.nasm.us/pub/nasm/releasebuilds/2.16.02rc1/nasm-2.16.02rc1.tar.xz'
    execute ./configure --prefix="${workspace}" --disable-shared --enable-static
    execute make "-j${cpus}"
    execute make install
    build_done 'nasm' '2.16.02rc1'
fi

if build 'zlib' '1.2.13'; then
    download 'https://zlib.net/fossils/zlib-1.2.13.tar.gz'
    execute ./configure --static --prefix="${workspace}"
    execute make "-j${cpus}"
    execute make install
    build_done 'zlib' '1.2.13'
fi

if build 'm4' '1.4.19'; then
    download 'https://ftp.gnu.org/gnu/m4/m4-1.4.19.tar.xz'
    execute ./configure --prefix="${workspace}"
    execute make "-j${cpus}"
    execute make install
    build_done 'm4' '1.4.19'
fi

if build 'autoconf' '2.71'; then
    download 'https://ftp.gnu.org/gnu/autoconf/autoconf-2.71.tar.xz'
    execute ./configure --prefix="${workspace}"
    execute make "-j${cpus}"
    execute make install
    build_done 'autoconf' '2.71'
fi

if build 'automake' '1.16.5'; then
    download 'https://ftp.gnu.org/gnu/automake/automake-1.16.5.tar.xz'
    execute ./configure --prefix="${workspace}"
    execute make "-j${cpus}"
    execute make install
    build_done 'automake' '1.16.5'
fi

if build 'libtool' '2.4.7'; then
    download 'https://ftp.gnu.org/gnu/libtool/libtool-2.4.7.tar.xz'
    execute ./configure --prefix="${workspace}" --enable-static --disable-shared
    execute make "-j${cpus}"
    execute make install
    build_done 'libtool' '2.4.7'
fi

if ${nonfree}; then
    if build 'openssl' '1.1.1t'; then
        download 'https://www.openssl.org/source/openssl-1.1.1t.tar.gz'
        execute ./config --prefix="${workspace}" --openssldir="${workspace}" \
            --with-zlib-include="${workspace}"/include/ --with-zlib-lib="${workspace}"/lib no-shared zlib
        execute make "-j${cpus}"
        execute make install_sw
        build_done 'openssl' '1.1.1t'
    fi
    cnf_ops+=('--enable-openssl')
else
    if build 'gmp' '6.2.1'; then
        download 'https://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.xz'
        execute ./configure --prefix="${workspace}" --disable-shared --enable-static
        execute make "-j${cpus}"
        execute make install
        build_done 'gmp' '6.2.1'
    fi

    if build 'nettle' '3.8.1'; then
        download 'https://ftp.gnu.org/gnu/nettle/nettle-3.8.1.tar.gz'
        execute ./configure --prefix="${workspace}" --disable-shared --enable-static --disable-openssl \
            --disable-documentation --libdir="${workspace}"/lib CPPFLAGS="${CFLAGS}" LDFLAGS="${LDFLAGS}"
        execute make "-j${cpus}"
        execute make install
        build_done 'nettle' '3.8.1'
    fi

    if build 'gnutls' '3.7.9'; then
        download 'https://www.gnupg.org/ftp/gcrypt/gnutls/v3.7/gnutls-3.7.9.tar.xz'
        execute ./configure --prefix="${workspace}" --disable-shared --enable-static --disable-doc --disable-tools \
            --disable-cxx --disable-tests --disable-gtk-doc-html --disable-libdane --disable-nls --enable-local-libopts \
            --disable-guile --with-included-libtasn1 --with-included-unistring --without-p11-kit CPPFLAGS="${CFLAGS}" LDFLAGS="${LDFLAGS}"
        execute make "-j${cpus}"
        execute make install
        build_done 'gnutls' '3.7.9'
    fi
    cnf_ops+=('--enable-gmp' '--enable-gnutls')
fi

if build 'cmake' '3.25.3'; then
    download 'https://github.com/Kitware/CMake/releases/download/v3.25.3/cmake-3.25.3.tar.gz'
    execute ./configure --prefix="${workspace}" --parallel="${cpus}" -- -DCMAKE_USE_OPENSSL='OFF'
    execute make "-j${cpus}"
    execute make install
    build_done 'cmake' '3.25.3'
fi

##
## VIDEO LIBRARIES
##

if command_exists 'python3'; then
    # DAV1D NEEDS MESON AND NINJA ALONG WITH NASM TO BE BUILT
    if command_exists 'pip3'; then
        # MESON AND NINJA CAN BE INSTALLED VIA PIP3
        execute pip3 install pip setuptools --quiet --upgrade --no-cache-dir --disable-pip-version-check
        for r in meson ninja
        do
            if ! command_exists ${r}; then
                execute pip3 install ${r} --quiet --upgrade --no-cache-dir --disable-pip-version-check
            fi
            export PATH="${PATH}:${HOME}/Library/Python/3.9/bin"
        done
    fi
    if command_exists 'meson'; then
        if build 'dav1d' '7d23ec4a'; then
            download 'https://code.videolan.org/videolan/dav1d/-/archive/7d23ec4a042b2feb6c0d4c1b0618a87cb8c34dcb/dav1d-7d23ec4a042b2feb6c0d4c1b0618a87cb8c34dcb.tar.gz' 'dav1d-7d23ec4a.tar.gz'
            make_dir build
            execute meson setup build --prefix="${workspace}" --buildtype='release' --default-library='static' --libdir="${workspace}"/lib
            execute ninja -C build
            execute ninja -C build install
            build_done 'dav1d' '7d23ec4a'
        fi
        cnf_ops+=('--enable-libdav1d')
    fi
fi

if build 'svtav1' 'cb8830a'; then
    # LAST KNOWN WORKING COMMIT WHICH PASSED CI TESTS FROM HEAD BRANCH
    download 'https://gitlab.com/AOMediaCodec/SVT-AV1/-/archive/cb8830a55a529f539161348582ebe8bacb858e86/SVT-AV1-cb8830a55a529f539161348582ebe8bacb858e86.tar.gz' 'svtav1-cb8830a.tar.gz'
    cd "${packages}"/svtav1-cb8830a//Build/linux || exit 1
    execute cmake -DCMAKE_INSTALL_PREFIX="${workspace}" -DENABLE_SHARED='OFF' -DBUILD_SHARED_LIBS='OFF' ../.. -G 'Unix Makefiles' -DCMAKE_BUILD_TYPE='Release'
    execute make "-j${cpus}"
    execute make install
    execute cp 'SvtAv1Enc.pc' "${workspace}"/lib/pkgconfig/
    execute cp 'SvtAv1Dec.pc' "${workspace}"/lib/pkgconfig/
    build_done 'svtav1' 'cb8830a'
    fi
    cnf_ops+=('--enable-libsvtav1')

if command_exists 'cargo'; then
    if build 'rav1e' '0.6.3'; then
        execute cargo install --version '0.9.14+cargo-0.66' cargo-c
        download 'https://github.com/xiph/rav1e/archive/refs/tags/v0.6.3.tar.gz'
        execute cargo cinstall --prefix="${workspace}" --library-type='staticlib' --crt-static --release
        build_done 'rav1e' '0.6.3'
    fi
    cnf_ops+=('--enable-librav1e')
fi

if ${nonfree}; then
    if build 'x264' 'eaa68fad'; then
        download 'https://code.videolan.org/videolan/x264/-/archive/eaa68fad9e5d201d42fde51665f2d137ae96baf0/x264-eaa68fad9e5d201d42fde51665f2d137ae96baf0.tar.gz' 'x264-eaa68fad.tar.gz'
        cd "${packages}"/x264-eaa68fad || exit 1
        execute ./configure --prefix="${workspace}" --enable-static --enable-pic CXXFLAGS="-fPIC ${CXXFLAGS}"
        execute make "-j${cpus}"
        execute make install
        execute make install-lib-static
        build_done 'x264' 'eaa68fad'
    fi
    cnf_ops+=('--enable-libx264')
fi

if ${nonfree}; then
    # WHEN FFMPEG IS BUILT IT REQUIRES THE X265 BINARIES TO HAVE THE LIBNUMA-DEV APT PACKAGE ALREADY INSTALLED
    find_libnuma="$(sudo find /usr/ -name 'libnuma.so')"
    if [ -z "${find_libnuma}" ]; then
        echo '$ installing the required apt package libnuma-dev'
        echo
        sudo apt -y install libnuma-dev
        echo
    fi

    if build 'x265' '3.4'; then
        git clone -q 'https://bitbucket.org/multicoreware/x265_git.git' "${packages}/x265-3.4"
        cd "${packages}/x265-3.4/build/linux" || exit 1
        rm -fr {8,10,12}bit 2>/dev/null
        mkdir -p {8,10,12}bit
        cd '12bit' || exit 1
        echo '$ making 12bit binaries'
        execute cmake ../../../source -DCMAKE_INSTALL_PREFIX="${workspace}" -DENABLE_SHARED='OFF' -DBUILD_SHARED_LIBS='OFF' \
            -DHIGH_BIT_DEPTH='ON' -DENABLE_HDR10_PLUS='ON' -DEXPORT_C_API='OFF' -DENABLE_CLI='OFF' -DMAIN12='ON'
        execute make "-j${cpus}"
        echo '$ making 10bit binaries'
        cd ../'10bit' || exit 1
        execute cmake ../../../source -DCMAKE_INSTALL_PREFIX="${workspace}" -DENABLE_SHARED='OFF' \
            -DBUILD_SHARED_LIBS='OFF' -DHIGH_BIT_DEPTH='ON' -DENABLE_HDR10_PLUS='ON' -DEXPORT_C_API='OFF' -DENABLE_CLI='OFF'
        execute make "-j${cpus}"
        echo '$ making 8bit binaries'
        cd ../'8bit' || exit 1
        ln -sf ../'10bit/libx265.a' 'libx265_main10.a'
        ln -sf ../'12bit/libx265.a' 'libx265_main12.a'
        execute cmake ../../../'source' -DCMAKE_INSTALL_PREFIX="${workspace}" -DENABLE_SHARED='OFF' -DBUILD_SHARED_LIBS='OFF' \
            -DEXTRA_LIB='x265_main10.a;x265_main12.a;-ldl' -DEXTRA_LINK_FLAGS='-L.' -DLINKED_10BIT='ON' -DLINKED_12BIT='ON'
        execute make "-j${cpus}"
        # MUST RENAME THIS FILE
        mv 'libx265.a' 'libx265_main.a'

        execute ar -M <<EOF
CREATE libx265.a
ADDLIB libx265_main.a
ADDLIB libx265_main10.a
ADDLIB libx265_main12.a
SAVE
END
EOF

        execute make install

        if [ -n "${LDEXEFLAGS}" ]; then
            sed -i.backup 's/-lgcc_s/-lgcc_eh/g' "${workspace}"/lib/pkgconfig/x265.pc
        fi

        build_done 'x265' '3.4'
    fi
    cnf_ops+=('--enable-libx265')
fi

if build 'libvpx' '1.13.0'; then
    download 'https://github.com/webmproject/libvpx/archive/refs/tags/v1.13.0.tar.gz' 'libvpx-1.13.0.tar.gz'
    execute ./configure --prefix="${workspace}" --disable-unit-tests --disable-shared --disable-examples --as='yasm'
    execute make "-j${cpus}"
    execute make install
    build_done 'libvpx' '1.13.0'
fi
cnf_ops+=('--enable-libvpx')

if ${nonfree}; then
    if build 'xvidcore' '1.3.7'; then
        download 'https://downloads.xvid.com/downloads/xvidcore-1.3.7.tar.bz2'
        cd 'build/generic' || exit 1
        execute ./configure --prefix="${workspace}" --disable-shared --enable-static
        execute make "-j${cpus}"
        execute make install

        if [[ -f "${workspace}"/lib/libxvidcore.4.dylib ]]; then
            execute rm "${workspace}"/lib/libxvidcore.4.dylib
        fi

        if [[ -f "${workspace}"/lib/libxvidcore.so ]]; then
            execute rm "${workspace}"/lib/libxvidcore.so*
        fi

        build_done 'xvidcore' '1.3.7'
    fi
    cnf_ops+=('--enable-libxvid')
fi

if ${nonfree}; then
    if build 'vid_stab' '1.1.1'; then
        download 'https://github.com/georgmartius/vid.stab/archive/refs/tags/v1.1.1.tar.gz' 'vid.stab-1.1.1.tar.gz'
        execute cmake -DBUILD_SHARED_LIBS='OFF' -DCMAKE_INSTALL_PREFIX="${workspace}" -DUSE_OMP='OFF' -DENABLE_SHARED='OFF' .
        execute make
        execute make install
        build_done 'vid_stab' '1.1.1'
    fi
    cnf_ops+=('--enable-libvidstab')
fi

if build 'av1' '34c4c3f7'; then
  # libaom bcfe6fb == v3.5.0
    download 'https://aomedia.googlesource.com/aom/+archive/34c4c3f7e6d95fe3785cd3dc810dc39ec649224e.tar.gz' 'av1.tar.gz' 'av1'
    make_dir "${packages}"/aom_build
    cd "${packages}"/aom_build || exit 1
    execute cmake -DENABLE_TESTS='0' -DENABLE_EXAMPLES='0' -DCMAKE_INSTALL_PREFIX="${workspace}" -DCMAKE_INSTALL_LIBDIR='lib' "${packages}"/av1
    execute make "-j${cpus}"
    execute make install
    build_done 'av1' '34c4c3f7'
fi
cnf_ops+=('--enable-libaom')

if build 'zimg' '3.0.4'; then
    download 'https://github.com/sekrit-twc/zimg/archive/refs/tags/release-3.0.4.tar.gz' 'zimg-3.0.4.tar.gz' 'zimg'
    cd 'zimg-release-3.0.4' || exit 1
    execute "${workspace}"/bin/libtoolize -i -f -q
    execute ./autogen.sh --prefix="${workspace}"
    execute ./configure --prefix="${workspace}" --enable-static --disable-shared
    execute make "-j${cpus}"
    execute make install
    build_done 'zimg' '3.0.4'
fi
cnf_ops+=('--enable-libzimg')

##
## AUDIO LIBRARIES
##

if command_exists 'python3'; then
    if command_exists 'meson'; then
        if build 'lv2' '1.18.10'; then
            download 'https://lv2plug.in/spec/lv2-1.18.10.tar.xz' 'lv2-1.18.10.tar.xz'
            execute meson setup build --prefix="${workspace}" --buildtype='release' --default-library='static' --libdir="${workspace}"/lib
            execute ninja -C build
            execute ninja -C build install
            build_done 'lv2' '1.18.10'
        fi
        if build 'waflib' 'aeef9f5f'; then
            download 'https://gitlab.com/drobilla/autowaf/-/archive/aeef9f5fdf416d9b68c61c75de7dae409f1ac6a4/autowaf-aeef9f5fdf416d9b68c61c75de7dae409f1ac6a4.tar.bz2' 'autowaf-aeef9f5f.tar.bz2'
            build_done 'waflib' 'aeef9f5f'
        fi
        if build 'serd' '61d53637'; then
            download 'https://gitlab.com/drobilla/serd/-/archive/61d53637dc62d15f9b3d1fa9e69891313c465c35/serd-61d53637dc62d15f9b3d1fa9e69891313c465c35.tar.bz2' 'serd-61d53637.tar.bz2'
            execute meson setup build --prefix="${workspace}" --buildtype='release' --default-library='static' --libdir="${workspace}"/lib
            execute ninja -C build
            execute ninja -C build install
            build_done 'serd' '61d53637'
        fi
        if build 'pcre' '8.45'; then
            download 'https://cfhcable.dl.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.tar.bz2' 'pcre-8.45.tar.bz2'
            execute ./configure --prefix="${workspace}" --disable-shared --enable-static
            execute make "-j${cpus}"
            execute make install
            build_done 'pcre' '8.45'
        fi
        if build 'zix' '262d4a15'; then
            download 'https://gitlab.com/drobilla/zix/-/archive/262d4a1522c38be0588746e874159da5c7bb457d/zix-262d4a1522c38be0588746e874159da5c7bb457d.tar.bz2' 'zix-262d4a15.tar.gz'
            execute meson setup build --prefix="${workspace}" --buildtype='release' --default-library='static' --libdir="${workspace}"/lib
            execute ninja -C build
            execute ninja -C build install
            build_done 'zix' '262d4a15'
        fi
        if build 'sord' '0.16.14'; then
            download 'http://download.drobilla.net/sord-0.16.14.tar.xz' 'sord-0.16.14.tar.gz'
            execute meson setup build --prefix="${workspace}" --buildtype='release' --default-library='static' --libdir="${workspace}"/lib
            execute ninja -C build
            execute ninja -C build install
            build_done 'sord' '0.16.14'
        fi
        if build 'sratom' 'b1643412'; then
            download 'https://gitlab.com/lv2/sratom/-/archive/b1643412ef03f41fc174f076daff39ade0999bf2/sratom-b1643412ef03f41fc174f076daff39ade0999bf2.tar.bz2'  'sratom-b1643412.tar.bz2'
            execute meson setup build --prefix="${workspace}" --buildtype='release' --default-library='static' --libdir="${workspace}"/lib
            execute ninja -C build
            execute ninja -C build install
            build_done 'sratom' 'b1643412'
        fi
        if build 'lilv' '0.24.20'; then
            download 'https://gitlab.com/lv2/lilv/-/archive/v0.24.20/lilv-v0.24.20.tar.gz' 'lilv-v0.24.20.tar.gz'
            execute meson setup build --prefix="${workspace}" --buildtype='release' --default-library='static' --libdir="${workspace}"/lib
            execute ninja -C build
            execute ninja -C build install
            build_done 'lilv' '0.24.20'
        fi
        CFLAGS+=" -I${workspace}/include/lilv-0"
        cnf_ops+=('--enable-lv2')
    fi
fi

if build 'opencore' '0.1.6'; then
    download 'https://netactuate.dl.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-0.1.6.tar.gz' 'opencore-amr-0.1.6.tar.gz'
    execute ./configure --prefix="${workspace}" --disable-shared --enable-static
    execute make "-j${cpus}"
    execute make install
    build_done 'opencore' '0.1.6'
fi
cnf_ops+=('--enable-libopencore_amrnb' '--enable-libopencore_amrwb')

if build 'lame' '3.100'; then
    download 'https://sourceforge.net/projects/lame/files/lame/3.100/lame-3.100.tar.gz/download?use_mirror=gigenet' 'lame-3.100.tar.gz'
    execute ./configure --prefix="${workspace}" --disable-shared --enable-static
    execute make "-j${cpus}"
    execute make install
    build_done 'lame' '3.100'
fi
cnf_ops+=('--enable-libmp3lame')

if build 'opus' '1.3.1'; then
    download 'https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz'
    execute ./configure --prefix="${workspace}" --disable-shared --enable-static
    execute make "-j${cpus}"
    execute make install
    build_done 'opus' '1.3.1'
fi
cnf_ops+=('--enable-libopus')

if build 'libogg' '1.3.5'; then
    download 'https://ftp.osuosl.org/pub/xiph/releases/ogg/libogg-1.3.5.tar.xz'
    execute ./configure --prefix="${workspace}" --disable-shared --enable-static
    execute make "-j${cpus}"
    execute make install
    build_done 'libogg' '1.3.5'
fi

if build 'libvorbis' '1.3.7'; then
    download 'https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-1.3.7.tar.xz'
    execute ./configure --prefix="${workspace}" --with-ogg-libraries="${workspace}"/lib \
        --with-ogg-includes="${workspace}"/include/ --enable-static --disable-shared --disable-oggtest
    execute make "-j${cpus}"
    execute make install
    build_done 'libvorbis' '1.3.7'
fi
cnf_ops+=('--enable-libvorbis')

if build 'libtheora' '1.1.1'; then
    download 'https://ftp.osuosl.org/pub/xiph/releases/theora/libtheora-1.1.1.tar.gz'
    sed "s/-fforce-addr//g" 'configure' >'configure.patched'
    chmod +x 'configure.patched'
    mv 'configure.patched' 'configure'
    rm 'config.guess'
    curl -Lso 'config.guess' 'https://raw.githubusercontent.com/gcc-mirror/gcc/master/config.guess'
    chmod +x 'config.guess'
    execute ./configure --prefix="${workspace}" --with-ogg-libraries="${workspace}"/lib --with-ogg-includes="${workspace}"/include/ \
        --with-vorbis-libraries="${workspace}"/lib --with-vorbis-includes="${workspace}"/include/ --enable-static --disable-shared \
        --disable-oggtest --disable-vorbistest --disable-examples --disable-asm --disable-spec
    execute make "-j${cpus}"
    execute make install
    build_done 'libtheora' '1.1.1'
fi
cnf_ops+=('--enable-libtheora')

if ${nonfree}; then
    if build 'fdk_aac' '2.0.2'; then
        download 'https://sourceforge.net/projects/opencore-amr/files/fdk-aac/fdk-aac-2.0.2.tar.gz/download?use_mirror=gigenet' 'fdk-aac-2.0.2.tar.gz'
        execute ./configure --prefix="${workspace}" --disable-shared --enable-static --enable-pic
        execute make "-j${cpus}"
        execute make install
        build_done 'fdk_aac' '2.0.2'
    fi
    cnf_ops+=('--enable-libfdk-aac')
fi

##
## IMAGE LIBRARIES
##

if build 'libtiff' '4.5.0'; then
    download 'https://download.osgeo.org/libtiff/tiff-4.5.0.tar.xz'
    execute ./configure --prefix="${workspace}" --disable-shared --enable-static --disable-dependency-tracking \
        --disable-lzma --disable-webp --disable-zstd --without-x
    execute make "-j${cpus}"
    execute make install
    build_done 'libtiff' '4.5.0'
fi
if build 'libpng' '1.6.39'; then
    download 'https://versaweb.dl.sourceforge.net/project/libpng/libpng16/1.6.39/libpng-1.6.39.tar.xz' 'libpng-1.6.39.tar.xz'
    export LDFLAGS="${LDFLAGS}"
    export CPPFLAGS="${CFLAGS}"
    execute ./configure --prefix="${workspace}" --disable-shared --enable-static
    execute make "-j${cpus}"
    execute make install
    build_done 'libpng' '1.6.39'
fi

if build 'libwebp' '1.2.2'; then
    # LIBWEBP CAN FAIL TO COMPILE ON UBUNTU IF THESE FLAGS WERE LEFT SET TO CFLAGS
    # SO FAR VERSION 1.3.0 AND 1.2.4 FAILES TO BUILD SUCCESFULLY
    CPPFLAGS=
    download 'https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.2.2.tar.gz' 'libwebp-1.2.2.tar.gz'
    execute ./configure --prefix="${workspace}" --disable-shared --enable-static --disable-dependency-tracking \
        --disable-gl --with-zlib-include="${workspace}"/include/ --with-zlib-lib="${workspace}"/lib
    make_dir build
    cd 'build'|| exit 1
    execute cmake -DCMAKE_INSTALL_PREFIX="${workspace}" -DCMAKE_INSTALL_LIBDIR='lib' -DCMAKE_INSTALL_BINDIR='bin' \
        -DCMAKE_INSTALL_INCLUDEDIR='include' -DENABLE_SHARED='OFF' -DENABLE_STATIC='ON' ../
    execute make "-j${cpus}"
    execute make install

    build_done 'libwebp' '1.2.2'
fi
  cnf_ops+=('--enable-libwebp')

##
## OTHER LIBRARIES
##

if build 'libsdl' '2.26.4'; then
    download 'https://www.libsdl.org/release/SDL2-2.26.4.tar.gz'
    execute ./configure --prefix="${workspace}" --disable-shared --enable-static
    execute make "-j${cpus}"
    execute make install
    build_done 'libsdl' '2.26.4'
fi

if ${nonfree}; then
    if build 'srt' '1.5.2-rc.1'; then
        download 'https://github.com/Haivision/srt/archive/refs/tags/v1.5.2-rc.1.tar.gz' 'srt-1.5.2-rc.1.tar.gz'
        export OPENSSL_ROOT_DIR="${workspace}"
        export OPENSSL_LIB_DIR="${workspace}"/lib
        export OPENSSL_INCLUDE_DIR="${workspace}"/include/
        execute cmake . -DCMAKE_INSTALL_PREFIX="${workspace}" -DCMAKE_INSTALL_LIBDIR='lib' -DCMAKE_INSTALL_BINDIR='bin' \
            -DCMAKE_INSTALL_INCLUDEDIR='include' -DENABLE_SHARED='OFF' -DENABLE_STATIC='ON' -DENABLE_APPS='OFF' -DUSE_STATIC_LIBSTDCXX='ON'
        execute make install

        if [ -n "${LDEXEFLAGS}" ]; then
            sed -i.backup 's/-lgcc_s/-lgcc_eh/g' "${workspace}"/lib/pkgconfig/srt.pc
        fi
        build_done 'srt' '1.5.2-rc.1'
    fi
        cnf_ops+=('--enable-libsrt')
fi


#####################
## HWaccel library ##
#####################

if which 'nvcc' &>/dev/null ; then
    if build 'nv-codec' '12.0.16.0'; then
        # PRIOR VERSION USED '8.1.24.14'
        download 'https://github.com/FFmpeg/nv-codec-headers/releases/download/n12.0.16.0/nv-codec-headers-12.0.16.0.tar.gz'
        execute make PREFIX="${workspace}"
        execute make install PREFIX="${workspace}"
        build_done 'nv-codec' '12.0.16.0'
    fi
    CFLAGS+=' -I/usr/local/cuda-12.1/include'
    LDFLAGS+=' -L/usr/local/cuda-12.1/lib64'
    cnf_ops+=('--enable-cuda-nvcc' '--enable-cuvid' '--enable-nvenc' '--enable-cuda-llvm')

    if [ -z "${LDEXEFLAGS}" ]; then
        cnf_ops+=('--enable-libnpp')
    fi

    gpu_arch_fn
    # https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/ # cnf_ops+=('--nvccflags=-gencode arch=compute_52,code=sm_52')
    cnf_ops+=("--nvccflags=-gencode arch=${gpu_arch}")
fi

# Vaapi doesn't work well with static links FFmpeg.
if [ -z "${LDEXEFLAGS}" ]; then
    # If the libva development SDK is installed, enable vaapi.
    if library_exists 'libva'; then
        if build 'vaapi' '1'; then
            build_done 'vaapi' '1'
        fi
        cnf_ops+=('--enable-vaapi')
    fi
fi

if build 'amf' '1.4.29'; then
    download 'https://github.com/GPUOpen-LibrariesAndSDKs/AMF/archive/refs/tags/v1.4.29.tar.gz' 'AMF-1.4.29.tar.gz' 'AMF-1.4.29'
    execute rm -rf "${workspace}"/include/AMF
    execute mkdir -p "${workspace}"/include/AMF
    execute cp -fr "${packages}"/AMF-1.4.29/AMF-1.4.29/amf/public/include/* "${workspace}"/include/AMF/
    build_done 'amf' '1.4.29'
fi
cnf_ops+=('--enable-amf')

##
## BUILD FFMPEG
##

# REMOVE ANY FILES FROM PRIOR RUNS
if [ -d "${packages}/ffmpeg-latest" ]; then
    rm -fr "${packages}/ffmpeg-latest"
fi

# CLONE FFMPEG FROM THE LATEST GIT RELEASE
build 'ffmpeg' "${ffmpeg_ver}"
git clone -q 'https://github.com/FFmpeg/FFmpeg.git' "${packages}/ffmpeg-${ffmpeg_ver}"
cd "${packages}/ffmpeg-${ffmpeg_ver}" || exit 1
# shellcheck disable=SC2086
./configure \
    "${cnf_ops[@]}" \
    --disable-debug \
    --disable-doc \
    --disable-shared \
    --enable-libfdk-aac \
    --enable-pthreads \
    --enable-static \
    --enable-small \
    --enable-version3 \
    --extra-cflags="${CFLAGS}" \
    --extra-ldexeflags="${LDEXEFLAGS}" \
    --extra-ldflags="${LDFLAGS}" \
    --extra-libs="${EXTRALIBS}" \
    --pkgconfigdir="${workspace}"/lib/pkgconfig \
    --pkg-config-flags='--static' \
    --prefix="${workspace}" \
    --extra-version="${EXTRA_VERSION}"

# EXECUTE MAKE WITH PARELLEL PROCESSING
execute make "-j${cpus}"
# EXECUTE MAKE INSTALL
execute make install

# MOVE BINARIES TO '/usr/bin'
sudo cp -f "${workspace}/bin/ffmpeg" "${install_dir}/ffmpeg"
sudo cp -f "${workspace}/bin/ffprobe" "${install_dir}/ffprobe"
sudo cp -f "${workspace}/bin/ffplay" "${install_dir}/ffplay"

# CHECK THAT FILES WERE COPIED TO THE ${install_dir}
if [ ! -f "${install_dir}/ffmpeg" ]; then
    echo "Failed to copy: ffmpeg to ${install_dir}/"
fi
if [ ! -f "${install_dir}/ffprobe" ]; then
    echo "Failed to copy: ffprobe to ${install_dir}/"
fi
if [ ! -f "${install_dir}/ffplay" ]; then
    echo "Failed to copy: ffplay to ${install_dir}/"
fi

# DISPLAY FFMPEG'S VERSION
ff_ver_fn
# PROMPT THE USER TO CLEANUP THE BUILD FILES
cleanup_fn
# SHOW THE END OF SCRIPT MESSAGE
exit_fn
