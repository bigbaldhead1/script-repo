#!/bin/bash
# shellcheck disable=SC2046,SC2066,SC2068,SC2086,SC2119,SC2162

#############################################################################
##
## GitHub: https://github.com/slyfox1186
##
## Purpose: Builds curl 7 from source code obtained
##          from the official curl GitHub repository.
##
## Function: curl is the leading open source command line
##           image processor. It can blur, sharpen, warp, reduce
##           file size, ect... The possibilities are vast and wide.
##
## Method: The script will search GitHub for the latest released version
##         and upon execution, will import the info into the script for use
##
## Updated: 04.10.23
##
#############################################################################

# verify the script does not have root access before continuing
if [ "$EUID" -ne '0' ]; then
    exec sudo bash "$0" "$@"
fi

##
## Set the available cpu count for parallel processing (speeds up the build process)
##

## Get the CPU thread count for use in parallel processing
if [ -f '/proc/cpuinfo' ]; then
    cpu_threads="$(grep -c ^processor '/proc/cpuinfo')"
else
    cpu_threads="$(nproc --all)"
fi

## Get the CPU core count for use in parallel processing
cpu_cores="$(grep ^cpu\\scores '/proc/cpuinfo' | uniq | awk '{print $4}')"

##
## Create Functions
##

# show script exit message
exit_fn()
{
    clear
    echo
    echo 'The script has completed'
    echo
    echo 'Make sure to star this repository to show your support!'
    echo 'https://github.com/slyfox1186/script-repo'
    echo
    exit 0
}

# general failure function
fail_fn()
{
    printf "\n\n%s\n\n%s\n\n%s\n\n" \
        "$1" \
        'Please create a support ticket at the address below' \
        'https://github.com/slyfox1186/script-repo/issues'
    exit 1
}

# PULL THE LATEST VERSIONS OF EACH PACKAGE FROM THE WEBSITE API
net_timeout='10'

git_1_fn()
{
    # SCRAPE GITHUB WEBSITE FOR LATEST REPO VERSION
    github_repo="$1"
    github_url="$2"
    if curl_cmd=$(curl \
        -m "$net_timeout" \
        --request GET \
        --url "https://api.github.com/slyfox1186" \
        --header "Authorization: Bearer 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" \
        --header "X-GitHub-Api-Version: 2022-11-28" \
        -sSL "https://api.github.com/repos/$github_repo/$github_url?per_page=1"); then
        g_ver=$(echo "$curl_cmd" | jq -r '.[0].name')
        g_ver=${g_ver#v}
        g_ver_ssl=$(echo "$curl_cmd" | jq -r '.[0].name')
        g_ver_ssl=${g_ver_ssl#OpenSSL }
        g_ver_pkg=$(echo "$curl_cmd" | jq -r '.[0].name')
        g_ver_pkg=${g_ver_pkg#pkg-config-}
        g_ver_zimg=$(echo "$curl_cmd" | jq -r '.[0].name')
        g_ver_zimg=${g_ver_zimg#release-}
        g_ver_libva=$(echo "$curl_cmd" | jq -r '.[0].name')
        g_ver_libva=${g_ver_libva#Libva }
        g_url=$(echo "$curl_cmd" | jq -r '.[0].tarball_url')
    fi
}

git_2_fn()
{
    videolan_repo="$1"
    if curl_cmd=$(curl -m "$net_timeout" -sSL "https://code.videolan.org/api/v4/projects/$videolan_repo/repository/branches?"); then
        videolan_ver=$(echo "$curl_cmd" | jq -r '.[0].commit.id')
        videolan_sver=$(echo "$curl_cmd" | jq -r '.[0].commit.short_id')
    fi
}

git_3_fn()
{
    gitlab_repo="$1"
    
    if curl_cmd=$(curl -m "$net_timeout" -sSL "https://gitlab.com/api/v4/projects/$gitlab_repo/repository/branches?"); then
        gitlab_ver0=$(echo "$curl_cmd" | jq -r '.[0].commit.id')
        gitlab_ver0=${gitlab_ver0#v}
        gitlab_sver0=$(echo "$curl_cmd" | jq -r '.[0].commit.short_id')
        gitlab_ver3=$(echo "$curl_cmd" | jq -r '.[3].commit.id')
        gitlab_ver3=${gitlab_ver3#v}
        gitlab_sver3=$(echo "$curl_cmd" | jq -r '.[3].commit.short_id')
    fi
}

git_4_fn()
{
    gitlab_repo="$1"
    if curl_cmd=$(curl -m "$net_timeout" -sSL "https://gitlab.com/api/v4/projects/$gitlab_repo/repository/tags"); then
        gitlab_ver=$(echo "$curl_cmd" | jq -r '.[0].name')
        gitlab_ver=${gitlab_ver#v}
        gitlab_sver=$(echo "$curl_cmd" | jq -r '.[0].commit.short_id')
    fi
}

git_5_fn()
{
    gitlab_repo="$1"
    if curl_cmd=$(curl -m "$net_timeout" -sSL "https://gitlab.freedesktop.org/api/v4/projects/$gitlab_repo/repository/tags?"); then
        gitlab_ver=$(echo "$curl_cmd" | jq -r '.[0].name')
    fi
}

git_6_fn()
{
    gitlab_repo="$1"
    if curl_cmd="$(curl -m "$net_timeout" -sSL 'https://bitbucket.org/!api/2.0/repositories/multicoreware/x265_git/effective-branching-model')"; then
        gitlab_ver=$(echo "$curl_cmd" | jq '.development.branch.target' | grep -Eo '[0-9a-z][0-9a-z]+' | sort | head -n 1)
    fi
}

git_7_fn()
{
    gitlab_repo="$1"
    if curl_cmd=$(curl -m "$net_timeout" -sSL "https://gitlab.gnome.org/api/v4/projects/$gitlab_repo/repository/tags?"); then
        gitlab_ver=$(echo "$curl_cmd" | jq -r '.[0].name')
        gitlab_ver=${gitlab_ver#v}
    fi
}

git_8_fn()
{
    gitlab_repo="$1"
    if curl_cmd=$(curl -m "$net_timeout" -sSL "https://git.archive.org/api/v4/projects/$gitlab_repo/repository/tags?"); then
        gitlab_ver=$(echo "$curl_cmd" | jq -r '.[0].name')
        gitlab_ver=${gitlab_ver#v}
    fi
}

git_9_fn()
{
    # SCRAPE GITHUB WEBSITE FOR LATEST REPO VERSION
    github_repo="$1"
    github_url="$2"
    if curl_cmd=$(curl \
        -m "$net_timeout" \
        --request GET \
        --url "https://api.github.com/slyfox1186" \
        --header "Authorization: Bearer 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" \
        --header "X-GitHub-Api-Version: 2022-11-28" \
        -sSL "https://api.github.com/repos/$github_repo/$github_url?per_page=1"); then
        g_ver=$(echo "$curl_cmd" | jq -r '.[0].name')
        g_url=$(echo "$curl_cmd" | jq -r '.[0].tarball_url')
    fi
}

git_10_fn()
{
    videolan_repo="$1"
    if curl_cmd=$(curl -m "$net_timeout" -sSL "https://code.videolan.org/api/v4/projects/$videolan_repo/repository/tags?"); then
        videolan_sver=$(echo "$curl_cmd" | jq -r '.[0].name')
        videolan_sver=${videolan_sver#v}
    fi
}

git_ver_fn()
{
    local v_flag v_tag

    v_url="$1"
    v_tag="$2"

    if [ -n "$3" ]; then
        v_flag="$3"
    fi

    if [ "$v_flag" = 'X' ]; then
        url_tag='git_6_fn'
        "$url_tag" 2>/dev/null

        return 0
    fi

    if [  "$v_flag" = 'T' ] && [  "$v_tag" = '1' ]; then
        url_tag='git_1_fn' gv_url='tags'
    elif [ "$v_flag" = 'T' ] && [  "$v_tag" = '2' ]; then
        url_tag='git_2_fn' gv_url='tags'
    elif [ "$v_flag" = 'T' ] && [  "$v_tag" = '9' ]; then
        url_tag='git_9_fn' gv_url='tags'
    fi

    if [  "$v_flag" = 'R' ] && [  "$v_tag" = '1' ]; then
        url_tag='git_1_fn'; gv_url='releases'
    elif [ "$v_flag" = 'R' ] && [  "$v_tag" = '2' ]; then
        url_tag='git_2_fn'; gv_url='releases'
    elif [ "$v_flag" = 'R' ] && [  "$v_tag" = '9' ]; then
        url_tag='git_9_fn' gv_url='releases'
    fi

    case "$v_tag" in
        2)          url_tag='git_2_fn';;
        3)          url_tag='git_3_fn';;
        4)          url_tag='git_4_fn';;
        5)          url_tag='git_5_fn';;
        6)          url_tag='git_6_fn';;
        7)          url_tag='git_7_fn';;
        8)          url_tag='git_8_fn';;
        9)          url_tag='git_9_fn';;
       10)          url_tag='git_10_fn';;
    esac

    "$url_tag" "$v_url" "$gv_url" 2>/dev/null
}

# call the github_api_fn function to get the latest version of curl
git_ver_fn 'curl/curl' '1' 'T'

# set variables
script_ver='1.0'
progname='curl'
packages="$PWD"/packages
workspace="$PWD"/workspace
openssl_ver='1.1.1t'
curl_ver="$g_ver"
curl_url="$g_url"

execute()
{
    echo "$ sudo $*"

    if output=$(sudo "$@"); then
        echo "Failed to sudo $*" 2>/dev/null
        echo
        exit 1
    else
        $output
    fi
}

build()
{
    echo
    echo "Building $1 - version $2"
    echo '=========================================='

    if [ -f "$packages/$1.done" ]; then
        if grep -Fx "$2" "$packages/$1.done" >/dev/null; then
            echo "$1 version $2 already built. Remove $packages/$1.done lockfile to rebuild it."
            return 1
        else
            echo "$1 is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove $packages/$1.done lockfile."
            return 1
        fi
    fi

    return 0
}

build_done()
{
    echo "$2" > "$packages/$1.done"
}

cleanup_fn()
{
    echo
    echo 'Do you want to remove the build files?'
    echo
    echo '[1] Yes'
    echo '[2] No'
    echo
    read -p 'Your choices are (1 or 2): ' cleanup_choice
    clear

    if [[ "$cleanup_choice" -eq '1' ]]; then
        remove_dir "$packages"
        remove_file "$0"
        exit_fn
    elif [[ "$cleanup_choice" -eq '2' ]]; then
        exit_fn
    else
        echo 'Bad user input...'
        echo
        read -p 'Press enter to try again.'
        clear
        cleanup_fn
    fi
}

get_version_fn()
{
    scipt_name="$(basename "$0")"
    if which 'jq' &>/dev/null; then
        printf "%s\n\n%s\n\n" \
            "The latest version of curl is: $curl_ver" \
            "To install execute: sudo bash $scipt_name --build"
        exit 0
    else
        printf "%s\n\n%s\n\n%s\n\n%s\n\n" \
            'The required package "jq" must be installed for this command to work.' \
            'Excute one of the following commands to install.' \
            'sudo apt install jq' \
            "sudo bash $scipt_name"
        exit 1
    fi
}

make_dir()
{
    if ! remove_dir "$1"; then
        printf "%s\n\n" \
            "Failed to remove the directory: $PWD/$1"
        exit 1
    fi
    if ! mkdir "$1"; then
        printf "%s\n\n" \
            "Failed to create the directory: $PWD/$1"
        exit 1
    fi
}

remove_file()
{
    if [ -f "$1" ]; then
        rm -f "$1"
    fi
}

remove_dir()
{
    if [ -d "$1" ]; then
        rm -fr "$1"
    fi
}

download()
{

    dl_path="$packages"
    dl_file="${2:-"${1##*/}"}"

    if [[ "$dl_file" =~ tar. ]]; then
        target_dir="${dl_file%.*}"
        target_dir="${3:-"${target_dir%.*}"}"
    else
        target_dir="${3:-"${dl_file%.*}"}"
    fi

    if [ ! -f "$dl_path/$dl_file" ]; then
        echo "Downloading $1 as $dl_file"
        if ! curl -Lso "$dl_path/$dl_file" "$1"; then
            printf "\n%s\n\n%s" \
                "Failed to download: $1" \
                'Retrying in 10 seconds'
                sleep 10
            if ! curl -Lso "$dl_path/$dl_file" "$1"; then
               fail_fn "Failed to download: $1"
            fi
    fi

        echo 'Download Complete...'
        echo
    else
        echo "$dl_file is already downloaded."
    fi

    make_dir "$dl_path/$target_dir"

    if [[ "$dl_file" == *'patch'* ]]; then
        return
    fi

    if [ -n "$3" ]; then
        if ! tar -xf "$dl_path/$dl_file" -C "$dl_path/$target_dir" &>/dev/null; then
            fail_fn "Failed to download: $dl_file"
        fi
    else
        if ! tar -xf "$dl_path/$dl_file" -C "$dl_path/$target_dir" --strip-components 1 &>/dev/null; then
            fail_fn "Failed to download: $dl_file"
        fi
    fi

    echo "Extracted $dl_file"

    cd "$dl_path/$target_dir" || fail_fn "Unable to change the working directory to: $target_dir"
}

download_git()
{
    dl_path="$packages"
    dl_url="$1"
    dl_file="$2"
    target_dir="$dl_path/$dl_file"

    # first download attempt
    if [ ! -d "$target_dir" ]; then
        echo "Downloading $dl_file"
        if ! git clone -q "$dl_url" "$target_dir"; then
            echo
            echo "The script failed to download \"$dl_file\" and will try again in 10 seconds"
            sleep 10
            echo
            if ! git clone -q "$dl_url" "$target_dir"; then
                echo
                echo "The script failed to download \"$dl_file\" two times and will exit the build"
                fail_fn
            fi
        fi
        echo 'Download Complete'
        echo
    else
        echo
        echo "$dl_file is already downloaded"
    fi

    cd "$target_dir" || (
        echo 'Script error!'
        echo
        echo "Unable to change the working directory to $target_dir"
        fail_fn
    )
}

## determine if a package is installed or not
installed() { return $(dpkg-query -W -f '${Status}\n' "$1" 2>&1 | awk '/ok installed/{print 0;exit}{print 1}'); }

## required curl developement packages
curl_packages_fn()
{
    pkgs=(autoconf automake build-essential jq libc-devtools libcpu-features-dev libcrypto++-dev \
          libdmalloc-dev libdmalloc5 libgc-dev libgc1 libgl2ps-dev libglib2.0-dev libgoogle-perftools-dev \
          libgoogle-perftools4 libheif-dev libjemalloc-dev libjemalloc2 libjpeg-dev libopenjp2-7-dev \
          libpng++-dev libpng-dev libpng-tools libpng16-16 libpstoedit-dev libraw-dev librust-bzip2-dev \
          librust-jpeg-decoder+default-dev libtcmalloc-minimal4 libtiff-dev libtool libwebp-dev libzip-dev pstoedit)

    for pkg in ${pkgs[@]}
    do
        if ! installed "$pkg"; then
            missing_pkgs+=" $pkg"
        fi
    done

    if [ -n "${missing_pkgs-}" ]; then
        for i in "$missing_pkgs"
        do
            apt -y install $i
        done
        printf "\n%s\n\n%s\n\n" \
            'The required packages were successfully installed.' \
            'Please sudo the script again to finish installing Curl.'
        exit 0
    else
        echo 'The required packages are already installed.'
    fi
}

curl_packages_fn

# PRINT THE OPTIONS AVAILABLE WHEN MANUALLY RUNNING THE SCRIPT
usage()
{
    clear
    echo "Usage: $progname [options]"
    echo
    echo 'Options:'
    echo '    -h, --help                                           Display this usage information'
    echo '    -v, --version                                        Display version information'
    echo '    -b, --build                                          Start the build process'
    echo '    -c, --cleanup                                        Remove all working directories'
}

while (($# > 0)); do
    case $1 in
    -h | --help)
        clear
        usage
        echo
        exit 0
        ;;
    -*)
        if [[ "$1" == '--build' || "$1" =~ '-b' ]]; then
            bflag='-b'
        fi
        if [[ "$1" == '--cleanup' || "$1" =~ '-c' && ! "$1" =~ '--' ]]; then
            cflag='-c'
            cleanup_fn
        fi
        if [[ "$1" == '--version' || "$1" =~ '-v' && ! "$1" =~ '--' ]]; then
            vflag='-v'
            clear
            get_version_fn
        fi
        shift
        ;;
    *)
        usage
        echo
        exit 1
        ;;
    esac
done

if [ -z "$bflag" ]; then
    if [ -z "$cflag" ]; then
        if [ -z "$vflag" ]; then
            clear
            usage
            echo
            exit 1
        fi
    fi
    exit 0
fi

clear
echo 'Starting the build process...'
echo
echo "This script will use ($cpu_threads cpu threads) for parallel processing to accelerate the build speed."
echo

# Required + extra functionality packages for curl
echo 'Installing required apt packages'
echo '=========================================='
echo
curl_packages_fn

##
## Export the pkg-config paths to enable support during the build
##

PKG_CONFIG_PATH="\
/usr/share/pkgconfig:\
/usr/lib/pkgconfig:\
/usr/lib/aarch64-linux-gnu/pkgconfig\
"
export PKG_CONFIG_PATH

##
## Export the library config paths to enable support during the build
##

LD_LIBRARY_PATH="\
$packages/pkg-config-0.29.2:\
$workspace/lib/pkgconfig\
"
export LD_LIBRARY_PATH

##
## Create the packages directory
##

mkdir -p "$packages" "$workspace"

##
## Begin source code building
##

# begin source code building
##
## Begin curl build
##

if build 'giflib' 'git'; then
    download_git 'https://github.com/mirrorer/giflib.git' 'giflib-git'
    sudo autoreconf -fiv
    sudo ./configure --prefix='/usr/local' --enable-static --disable-shared
    sudo make
    sudo make install
    build_done 'giflib' 'git'
fi

git_ver_fn 'yasm/yasm' '1' 'T'
if build 'yasm' "$g_ver"; then
    download "https://github.com/yasm/yasm/releases/download/v$g_ver/yasm-$g_ver.tar.gz"
    sudo ./configure --prefix='/usr/local'
    sudo make -j "$cpu_threads"
    sudo make install
    build_done 'yasm' "$g_ver"
fi

if build 'nasm' '2.16.01'; then
    download 'https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/nasm-2.16.01.tar.xz'
    sudo ./autogen.sh
    sudo ./configure --prefix='/usr/local'
    sudo make -j "$cpu_threads"
    sudo make install
    build_done 'nasm' '2.16.01'
fi

git_ver_fn 'madler/zlib' '1' 'T'
if build 'zlib' "$g_ver"; then
    download "$g_url" "zlib-$g_ver.tar.gz"
    sudo ./configure --static --prefix='/usr/local'
    sudo make -j "$cpu_threads"
    sudo make install
    build_done 'zlib' "$g_ver"
fi

if build 'm4' '1.4.19'; then
    download 'https://ftp.gnu.org/gnu/m4/m4-1.4.19.tar.xz'
    sudo ./configure --prefix='/usr/local'
    sudo make -j "$cpu_threads"
    sudo make install
    build_done 'm4' '1.4.19'
fi

if build 'autoconf' '2.71'; then
    download 'https://ftp.gnu.org/gnu/autoconf/autoconf-2.71.tar.xz'
    sudo ./configure --prefix='/usr/local'
    sudo make -j "$cpu_threads"
    sudo make install
    build_done 'autoconf' '2.71'
fi

if build 'automake' '1.16.5'; then
    download 'https://ftp.gnu.org/gnu/automake/automake-1.16.5.tar.xz'
    sudo ./configure --prefix='/usr/local'
    sudo make -j "$cpu_threads"
    sudo make install
    build_done 'automake' '1.16.5'
fi

if build 'libtool' '2.4.7'; then
    download 'https://ftp.gnu.org/gnu/libtool/libtool-2.4.7.tar.xz'
    sudo ./configure --prefix='/usr/local' --enable-static --disable-shared
    sudo make -j "$cpu_threads"
    sudo make install
    build_done 'libtool' '2.4.7'
fi

if build 'openssl' "$openssl_ver"; then
    download "https://www.openssl.org/source/openssl-$openssl_ver.tar.gz" "openssl-$openssl_ver.tar.gz"
    sudo ./config \
        --prefix='/usr/local' \
        --openssldir='/usr/lib/ssl' \
        --with-zlib-include='/usr/local/include/' \
        --with-zlib-lib='/usr/lib' no-shared zlib
        # --with-zlib-lib='/usr/lib/aarch64-linux-gnu/pkgconfig' no-shared zlib
    sudo make -j "$cpu_threads"
    sudo make install_sw
    build_done 'openssl' "$openssl_ver"
fi

if build 'curl' "$curl_ver"; then
    download "$curl_url" "curl-$curl_ver.tar.gz"
    sudo mv configure.in configure.ac
    sudo autoreconf -fiv
    sudo ./configure --prefix='/usr/local' --enable-static --disable-shared --with-ssl='/usr/lib/ssl'
    sudo make -j "$cpu_threads"
    sudo make install
    build_done 'curl' "$curl_ver"
fi

git_ver_fn 'freedesktop/pkg-config' '1' 'T'
if build 'pkg-config' "$g_ver_pkg"; then
    download "https://pkgconfig.freedesktop.org/releases/$g_ver.tar.gz"
    sudo ./configure --enable-silent-rules --prefix='/usr/local' --with-pc-path='/usr/lib/aarch64-linux-gnu/pkgconfig/' \
        --with-internal-glib --enable-static --disable-shared
    sudo make -j "$cpu_threads"
    sudo make install
    build_done 'pkg-config' "$g_ver_pkg"
fi

# ldconfig must be run next in order to update file changes or the curl command will not work
echo
ldconfig /usr/local/lib 2>/dev/null

# show the newly installed curl version
if ! curl --version 2>/dev/null; then
    clear
    printf "%s\n%s\n\n%s\n\n%s\n\n" \
        'Script error!' \
        '    - Failure to sudo the command: curl --version' \
        'If help is required or to report bugs please create a support ticket' \
        'https://github.com/slyfox1186/build-curl/issues'
    exit 1
fi

# prompt the user to cleanup the build files
cleanup_fn
